{
  "resourceType" : "Library",
  "id" : "IMMZIND44",
  "text" : {
    "status" : "generated",
    "div" : "<div xmlns=\"http://www.w3.org/1999/xhtml\"><h2>Related Artifacts</h2><table class=\"grid\"><tr><td>depends-on</td><td>FHIR model information</td><td><code>http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1</code></td></tr><tr><td>depends-on</td><td>Library FHIRHelpers</td><td><code>http://fhir.org/guides/who/smart-immunization/Library/FHIRHelpers|4.0.1</code></td></tr><tr><td>depends-on</td><td>Library IMMZCom</td><td><a href=\"Library-IMMZCommon.html\">IMMZCommon</a></td></tr><tr><td>depends-on</td><td>Library IMMZc</td><td><a href=\"Library-IMMZConcepts.html\">IMMZConcepts</a></td></tr><tr><td>depends-on</td><td>Library IMMZCon</td><td><a href=\"Library-IMMZConfig.html\">IMMZConfig</a></td></tr><tr><td>depends-on</td><td>Library IMMZIndCom</td><td><a href=\"Library-IMMZIndicatorCommon.html\">IMMZIndicatorCommon</a></td></tr><tr><td>depends-on</td><td>Library IMMZvl</td><td><a href=\"Library-IMMZVaccineLibrary.html\">IMMZVaccineLibrary</a></td></tr><tr><td>depends-on</td><td>Library FC</td><td><a href=\"Library-FHIRCommon.html\">FHIRCommon</a></td></tr><tr><td>depends-on</td><td>Code system Administrative Gender Codes</td><td><a href=\"http://hl7.org/fhir/R4/codesystem-administrative-gender.html\">AdministrativeGender</a></td></tr><tr><td>depends-on</td><td>Value set Diphtheria Vaccine</td><td><code>http://fhir.org/guides/who/smart-immunization/ValueSet/IMMZ.A1.DE3</code></td></tr></table><h2>Parameters</h2><table class=\"grid\"><tr><td>Measurement Period</td><td>in</td><td>0</td><td>1</td><td>Period</td></tr><tr><td>Patient</td><td>out</td><td>0</td><td>1</td><td>Patient</td></tr><tr><td>numerator</td><td>out</td><td>0</td><td>1</td><td>boolean</td></tr><tr><td>denominator</td><td>out</td><td>0</td><td>1</td><td>boolean</td></tr><tr><td>Dose Sequence Stratifier</td><td>out</td><td>0</td><td>*</td><td>Resource</td></tr><tr><td>Geographic Region Stratifier</td><td>out</td><td>0</td><td>1</td><td>string</td></tr><tr><td>Gender Stratifier</td><td>out</td><td>0</td><td>1</td><td>Coding</td></tr></table><h2>Data Requirements</h2><table class=\"grid\"><tr><td colspan=\"2\"><b>Type</b>: <a href=\"http://hl7.org/fhir/R4/patient.html\">Patient</a> (<a href=\"http://hl7.org/fhir/R4/patient.html\">Patient</a>)</td></tr></table><table class=\"grid\"><tr><td colspan=\"2\"><b>Type</b>: <a href=\"http://hl7.org/fhir/R4/immunization.html\">Immunization</a> (<a href=\"http://hl7.org/fhir/R4/immunization.html\">Immunization</a>)</td></tr></table><table class=\"grid\"><tr><td colspan=\"2\"><b>Type</b>: <a href=\"http://hl7.org/fhir/R4/immunizationrecommendation.html\">ImmunizationRecommendation</a> (<a href=\"http://hl7.org/fhir/R4/immunizationrecommendation.html\">ImmunizationRecommendation</a>)</td></tr></table><h2>Contents</h2><p><code>text/cql</code></p><pre><code class=\"language-sql\">/*\r\n * Library: IMMZ.IND.44\r\n * Immunization coverage for Diphtheria containing vaccine boosters (Computed Denominator) \r\n * Compares the administered booster doses (4, 5, 6) for diphtheria containing vaccine with the number of immunization recommendations for boosters of diphtheria containing vaccines expressed as a percentage.\r\n * \r\n * Numerator: Number of administrations of booster vaccines containing a diphtheria component during the reporting period. \r\n * Numerator Computation: COUNT immunization events WHERE administered product is a Diphtheria containing vaccine (IMMZ.A1.DE3) and dose &gt; 3 during reporting period\r\n * Denominator: Number of immunization recommendations for diphtheria boosters (doses &gt;= 4) due during reporting period.\r\n * Denominator Computation: COUNT immunization recommendation WHERE recommended product is diphtheria containing vaccine (IMMZ.A1.DE3) AND due date during reporting period.\r\n * \r\n * Disaggregation:\r\n *   - Dose Sequence (4, 5, 6)\r\n *   - Geographic Region\r\n *   - Gender\r\n * \r\n * References: WHO / UNICEF Join Reporting Form (3 - element 4060, 4070, 4080)\r\n */\r\n\r\nlibrary IMMZIND44\r\n\r\n// Start Skeleton CQL\r\nusing FHIR version '4.0.1'\r\ninclude FHIRHelpers version '4.0.1'\r\ninclude IMMZCommon called IMMZCom\r\ninclude IMMZConcepts called IMMZc\r\ninclude IMMZConfig called IMMZCon\r\ninclude IMMZIndicatorCommon called IMMZIndCom\r\ninclude IMMZVaccineLibrary called IMMZvl\r\ninclude FHIRCommon called FC\r\n// End Skeleton CQL\r\nparameter &quot;Measurement Period&quot; Interval&lt;Date&gt;\r\ncontext Patient\r\n\r\n/*\r\n * Numerator: Number of administrations of booster vaccines containing a diphtheria component during the reporting period.\r\n * Numerator Computation: COUNT immunization events WHERE administered product is a Diphtheria containing vaccine (IMMZ.A1.DE3) and dose &gt; 3 during reporting period\r\n */\r\ndefine &quot;numerator&quot;:\r\n\texists(IMMZIndCom.&quot;Diphtheria Booster Doses Administered to Patient During Measurement Period&quot;)\r\n\r\n/*\r\n * Denominator: Number of immunization recommendations for diphtheria boosters (doses &gt;= 4) due during reporting period.\r\n * Denominator Computation: COUNT immunization recommendation WHERE recommended product is diphtheria containing vaccine (IMMZ.A1.DE3) AND due date during reporting period.\r\n */\r\ndefine &quot;denominator&quot;:\r\n\texists(IMMZIndCom.&quot;Diphtheria Booster Doses Recommended During Reporting Period&quot;)\r\n\r\n\r\n/*\r\n * Disaggregator: Dose Sequence (4, 5, 6)\r\n */\r\ndefine &quot;Dose Sequence Stratifier&quot;:\r\n\tIMMZIndCom.&quot;Diphtheria Booster Doses Administered to Patient During Measurement Period&quot; I\r\n\treturn (singleton from I.protocolApplied).doseNumber\r\n\r\n/*\r\n * Disaggregator: Geographic Region\r\n */\r\ndefine &quot;Geographic Region Stratifier&quot;:\r\n\tIMMZIndCom.&quot;By Geographic Region Stratifier&quot;\r\n\r\n/*\r\n * Disaggregator: Administrative Gender (or Biological Sex)\r\n */\r\ndefine &quot;Gender Stratifier&quot;:\r\n\tIMMZIndCom.&quot;By Administrative Gender Stratifier&quot;\r\n\r\n/* End of IMMZ.IND.44 */\r\n</code></pre><p><code>Content not shown - (</code><code>application/elm+xml</code>, size = 13Kb)</p><p><code>Content not shown - (</code><code>application/elm+json</code>, size = 59Kb)</p></div>"
  },
  "extension" : [{
    "url" : "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
    "valueReference" : {
      "reference" : "Device/cqf-tooling"
    }
  }],
  "url" : "http://fhir.org/guides/who/smart-immunization/Library/IMMZIND44",
  "version" : "0.1.0",
  "name" : "IMMZIND44",
  "status" : "draft",
  "date" : "2023-08-02T04:40:13+00:00",
  "publisher" : "World Health Organization (WHO)",
  "jurisdiction" : [{
    "coding" : [{
      "system" : "http://unstats.un.org/unsd/methods/m49/m49.htm",
      "code" : "001"
    }]
  }],
  "relatedArtifact" : [{
    "type" : "depends-on",
    "display" : "FHIR model information",
    "resource" : "http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1"
  },
  {
    "type" : "depends-on",
    "display" : "Library FHIRHelpers",
    "resource" : "http://fhir.org/guides/who/smart-immunization/Library/FHIRHelpers|4.0.1"
  },
  {
    "type" : "depends-on",
    "display" : "Library IMMZCom",
    "resource" : "http://fhir.org/guides/who/smart-immunization/Library/IMMZCommon"
  },
  {
    "type" : "depends-on",
    "display" : "Library IMMZc",
    "resource" : "http://fhir.org/guides/who/smart-immunization/Library/IMMZConcepts"
  },
  {
    "type" : "depends-on",
    "display" : "Library IMMZCon",
    "resource" : "http://fhir.org/guides/who/smart-immunization/Library/IMMZConfig"
  },
  {
    "type" : "depends-on",
    "display" : "Library IMMZIndCom",
    "resource" : "http://fhir.org/guides/who/smart-immunization/Library/IMMZIndicatorCommon"
  },
  {
    "type" : "depends-on",
    "display" : "Library IMMZvl",
    "resource" : "http://fhir.org/guides/who/smart-immunization/Library/IMMZVaccineLibrary"
  },
  {
    "type" : "depends-on",
    "display" : "Library FC",
    "resource" : "http://fhir.org/guides/who/smart-immunization/Library/FHIRCommon"
  },
  {
    "type" : "depends-on",
    "display" : "Code system Administrative Gender Codes",
    "resource" : "http://hl7.org/fhir/administrative-gender"
  },
  {
    "type" : "depends-on",
    "display" : "Value set Diphtheria Vaccine",
    "resource" : "http://fhir.org/guides/who/smart-immunization/ValueSet/IMMZ.A1.DE3"
  }],
  "parameter" : [{
    "name" : "Measurement Period",
    "use" : "in",
    "min" : 0,
    "max" : "1",
    "type" : "Period"
  },
  {
    "name" : "Patient",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "Patient"
  },
  {
    "name" : "numerator",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "boolean"
  },
  {
    "name" : "denominator",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "boolean"
  },
  {
    "name" : "Dose Sequence Stratifier",
    "use" : "out",
    "min" : 0,
    "max" : "*",
    "type" : "Resource"
  },
  {
    "name" : "Geographic Region Stratifier",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "string"
  },
  {
    "name" : "Gender Stratifier",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "Coding"
  }],
  "dataRequirement" : [{
    "type" : "Patient",
    "profile" : ["http://hl7.org/fhir/StructureDefinition/Patient"],
    "mustSupport" : ["use"]
  },
  {
    "type" : "Immunization",
    "profile" : ["http://hl7.org/fhir/StructureDefinition/Immunization"],
    "mustSupport" : ["status",
    "vaccineCode",
    "occurrence",
    "protocolApplied",
    "protocolApplied.doseNumber"]
  },
  {
    "type" : "ImmunizationRecommendation",
    "profile" : ["http://hl7.org/fhir/StructureDefinition/ImmunizationRecommendation"],
    "mustSupport" : ["recommendation"]
  }],
  "content" : [{
    "contentType" : "text/cql",
    "data" : "LyoNCiAqIExpYnJhcnk6IElNTVouSU5ELjQ0DQogKiBJbW11bml6YXRpb24gY292ZXJhZ2UgZm9yIERpcGh0aGVyaWEgY29udGFpbmluZyB2YWNjaW5lIGJvb3N0ZXJzIChDb21wdXRlZCBEZW5vbWluYXRvcikgDQogKiBDb21wYXJlcyB0aGUgYWRtaW5pc3RlcmVkIGJvb3N0ZXIgZG9zZXMgKDQsIDUsIDYpIGZvciBkaXBodGhlcmlhIGNvbnRhaW5pbmcgdmFjY2luZSB3aXRoIHRoZSBudW1iZXIgb2YgaW1tdW5pemF0aW9uIHJlY29tbWVuZGF0aW9ucyBmb3IgYm9vc3RlcnMgb2YgZGlwaHRoZXJpYSBjb250YWluaW5nIHZhY2NpbmVzIGV4cHJlc3NlZCBhcyBhIHBlcmNlbnRhZ2UuDQogKiANCiAqIE51bWVyYXRvcjogTnVtYmVyIG9mIGFkbWluaXN0cmF0aW9ucyBvZiBib29zdGVyIHZhY2NpbmVzIGNvbnRhaW5pbmcgYSBkaXBodGhlcmlhIGNvbXBvbmVudCBkdXJpbmcgdGhlIHJlcG9ydGluZyBwZXJpb2QuIA0KICogTnVtZXJhdG9yIENvbXB1dGF0aW9uOiBDT1VOVCBpbW11bml6YXRpb24gZXZlbnRzIFdIRVJFIGFkbWluaXN0ZXJlZCBwcm9kdWN0IGlzIGEgRGlwaHRoZXJpYSBjb250YWluaW5nIHZhY2NpbmUgKElNTVouQTEuREUzKSBhbmQgZG9zZSA+IDMgZHVyaW5nIHJlcG9ydGluZyBwZXJpb2QNCiAqIERlbm9taW5hdG9yOiBOdW1iZXIgb2YgaW1tdW5pemF0aW9uIHJlY29tbWVuZGF0aW9ucyBmb3IgZGlwaHRoZXJpYSBib29zdGVycyAoZG9zZXMgPj0gNCkgZHVlIGR1cmluZyByZXBvcnRpbmcgcGVyaW9kLg0KICogRGVub21pbmF0b3IgQ29tcHV0YXRpb246IENPVU5UIGltbXVuaXphdGlvbiByZWNvbW1lbmRhdGlvbiBXSEVSRSByZWNvbW1lbmRlZCBwcm9kdWN0IGlzIGRpcGh0aGVyaWEgY29udGFpbmluZyB2YWNjaW5lIChJTU1aLkExLkRFMykgQU5EIGR1ZSBkYXRlIGR1cmluZyByZXBvcnRpbmcgcGVyaW9kLg0KICogDQogKiBEaXNhZ2dyZWdhdGlvbjoNCiAqICAgLSBEb3NlIFNlcXVlbmNlICg0LCA1LCA2KQ0KICogICAtIEdlb2dyYXBoaWMgUmVnaW9uDQogKiAgIC0gR2VuZGVyDQogKiANCiAqIFJlZmVyZW5jZXM6IFdITyAvIFVOSUNFRiBKb2luIFJlcG9ydGluZyBGb3JtICgzIC0gZWxlbWVudCA0MDYwLCA0MDcwLCA0MDgwKQ0KICovDQoNCmxpYnJhcnkgSU1NWklORDQ0DQoNCi8vIFN0YXJ0IFNrZWxldG9uIENRTA0KdXNpbmcgRkhJUiB2ZXJzaW9uICc0LjAuMScNCmluY2x1ZGUgRkhJUkhlbHBlcnMgdmVyc2lvbiAnNC4wLjEnDQppbmNsdWRlIElNTVpDb21tb24gY2FsbGVkIElNTVpDb20NCmluY2x1ZGUgSU1NWkNvbmNlcHRzIGNhbGxlZCBJTU1aYw0KaW5jbHVkZSBJTU1aQ29uZmlnIGNhbGxlZCBJTU1aQ29uDQppbmNsdWRlIElNTVpJbmRpY2F0b3JDb21tb24gY2FsbGVkIElNTVpJbmRDb20NCmluY2x1ZGUgSU1NWlZhY2NpbmVMaWJyYXJ5IGNhbGxlZCBJTU1admwNCmluY2x1ZGUgRkhJUkNvbW1vbiBjYWxsZWQgRkMNCi8vIEVuZCBTa2VsZXRvbiBDUUwNCnBhcmFtZXRlciAiTWVhc3VyZW1lbnQgUGVyaW9kIiBJbnRlcnZhbDxEYXRlPg0KY29udGV4dCBQYXRpZW50DQoNCi8qDQogKiBOdW1lcmF0b3I6IE51bWJlciBvZiBhZG1pbmlzdHJhdGlvbnMgb2YgYm9vc3RlciB2YWNjaW5lcyBjb250YWluaW5nIGEgZGlwaHRoZXJpYSBjb21wb25lbnQgZHVyaW5nIHRoZSByZXBvcnRpbmcgcGVyaW9kLg0KICogTnVtZXJhdG9yIENvbXB1dGF0aW9uOiBDT1VOVCBpbW11bml6YXRpb24gZXZlbnRzIFdIRVJFIGFkbWluaXN0ZXJlZCBwcm9kdWN0IGlzIGEgRGlwaHRoZXJpYSBjb250YWluaW5nIHZhY2NpbmUgKElNTVouQTEuREUzKSBhbmQgZG9zZSA+IDMgZHVyaW5nIHJlcG9ydGluZyBwZXJpb2QNCiAqLw0KZGVmaW5lICJudW1lcmF0b3IiOg0KCWV4aXN0cyhJTU1aSW5kQ29tLiJEaXBodGhlcmlhIEJvb3N0ZXIgRG9zZXMgQWRtaW5pc3RlcmVkIHRvIFBhdGllbnQgRHVyaW5nIE1lYXN1cmVtZW50IFBlcmlvZCIpDQoNCi8qDQogKiBEZW5vbWluYXRvcjogTnVtYmVyIG9mIGltbXVuaXphdGlvbiByZWNvbW1lbmRhdGlvbnMgZm9yIGRpcGh0aGVyaWEgYm9vc3RlcnMgKGRvc2VzID49IDQpIGR1ZSBkdXJpbmcgcmVwb3J0aW5nIHBlcmlvZC4NCiAqIERlbm9taW5hdG9yIENvbXB1dGF0aW9uOiBDT1VOVCBpbW11bml6YXRpb24gcmVjb21tZW5kYXRpb24gV0hFUkUgcmVjb21tZW5kZWQgcHJvZHVjdCBpcyBkaXBodGhlcmlhIGNvbnRhaW5pbmcgdmFjY2luZSAoSU1NWi5BMS5ERTMpIEFORCBkdWUgZGF0ZSBkdXJpbmcgcmVwb3J0aW5nIHBlcmlvZC4NCiAqLw0KZGVmaW5lICJkZW5vbWluYXRvciI6DQoJZXhpc3RzKElNTVpJbmRDb20uIkRpcGh0aGVyaWEgQm9vc3RlciBEb3NlcyBSZWNvbW1lbmRlZCBEdXJpbmcgUmVwb3J0aW5nIFBlcmlvZCIpDQoNCg0KLyoNCiAqIERpc2FnZ3JlZ2F0b3I6IERvc2UgU2VxdWVuY2UgKDQsIDUsIDYpDQogKi8NCmRlZmluZSAiRG9zZSBTZXF1ZW5jZSBTdHJhdGlmaWVyIjoNCglJTU1aSW5kQ29tLiJEaXBodGhlcmlhIEJvb3N0ZXIgRG9zZXMgQWRtaW5pc3RlcmVkIHRvIFBhdGllbnQgRHVyaW5nIE1lYXN1cmVtZW50IFBlcmlvZCIgSQ0KCXJldHVybiAoc2luZ2xldG9uIGZyb20gSS5wcm90b2NvbEFwcGxpZWQpLmRvc2VOdW1iZXINCg0KLyoNCiAqIERpc2FnZ3JlZ2F0b3I6IEdlb2dyYXBoaWMgUmVnaW9uDQogKi8NCmRlZmluZSAiR2VvZ3JhcGhpYyBSZWdpb24gU3RyYXRpZmllciI6DQoJSU1NWkluZENvbS4iQnkgR2VvZ3JhcGhpYyBSZWdpb24gU3RyYXRpZmllciINCg0KLyoNCiAqIERpc2FnZ3JlZ2F0b3I6IEFkbWluaXN0cmF0aXZlIEdlbmRlciAob3IgQmlvbG9naWNhbCBTZXgpDQogKi8NCmRlZmluZSAiR2VuZGVyIFN0cmF0aWZpZXIiOg0KCUlNTVpJbmRDb20uIkJ5IEFkbWluaXN0cmF0aXZlIEdlbmRlciBTdHJhdGlmaWVyIg0KDQovKiBFbmQgb2YgSU1NWi5JTkQuNDQgKi8NCg=="
  },
  {
    "contentType" : "application/elm+xml",
    "data" : ""
  },
  {
    "contentType" : "application/elm+json",
    "data" : ""
  }]
}