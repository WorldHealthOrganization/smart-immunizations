<?xml version="1.0" encoding="UTF-8"?>

<Library xmlns="http://hl7.org/fhir">
  <id value="IMMZD18SMeaslesDose0LowTx"/>
  <text>
    <status value="generated"/><div xmlns="http://www.w3.org/1999/xhtml"><h2>Related Artifacts</h2><table class="grid"><tr><td>depends-on</td><td>FHIR model information</td><td><code>http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1</code></td></tr><tr><td>depends-on</td><td>Library FHIRHelpers</td><td><code>http://smart.who.int/ig/smart-immunizations/Library/FHIRHelpers|4.0.1</code></td></tr><tr><td>depends-on</td><td>Library IMMZCom</td><td><a href="Library-IMMZCommon.html">IMMZCommon</a></td></tr><tr><td>depends-on</td><td>Library IMMZc</td><td><a href="Library-IMMZConcepts.html">IMMZConcepts</a></td></tr><tr><td>depends-on</td><td>Library IMMZCon</td><td><a href="Library-IMMZConfig.html">IMMZConfig</a></td></tr><tr><td>depends-on</td><td>Library IMMZvl</td><td><a href="Library-IMMZVaccineLibrary.html">IMMZVaccineLibrary</a></td></tr><tr><td>depends-on</td><td>Library FC</td><td><a href="Library-FHIRCommon.html">FHIRCommon</a></td></tr><tr><td>depends-on</td><td>Library input</td><td><a href="Library-IMMZD2DTMeaslesInput.html">IMMZD2DTMeaslesInput</a></td></tr><tr><td>depends-on</td><td>Value set MCV Vaccine</td><td><a href="ValueSet-IMMZ.Z.DE9.html">IMMZ.Z.DE9 ValueSet for Measles Vaccines</a></td></tr></table><h2>Parameters</h2><table class="grid"><tr><td>Patient</td><td>out</td><td>0</td><td>1</td><td>Patient</td></tr><tr><td>Measles MCV0 dose Expiration</td><td>out</td><td>0</td><td>1</td><td>date</td></tr><tr><td>Measles MCV0 dose</td><td>out</td><td>0</td><td>1</td><td>boolean</td></tr><tr><td>Measles MCV0 dose Due Date</td><td>out</td><td>0</td><td>1</td><td>date</td></tr><tr><td>Measles MCV0 dose Create</td><td>out</td><td>0</td><td>1</td><td>string</td></tr><tr><td>Measles MCV0 dose Overdue</td><td>out</td><td>0</td><td>1</td><td>Resource</td></tr></table><h2>Data Requirements</h2><table class="grid"><tr><td colspan="2"><b>Type</b>: <a href="http://hl7.org/fhir/R4/patient.html">Patient</a> (<a href="http://hl7.org/fhir/R4/patient.html">Patient</a>)</td></tr></table><table class="grid"><tr><td colspan="2"><b>Type</b>: <a href="http://hl7.org/fhir/R4/immunization.html">Immunization</a> (<a href="http://hl7.org/fhir/R4/immunization.html">Immunization</a>)</td></tr></table><h2>Contents</h2><p><code>text/cql</code></p><pre><code class="language-sql">/*
 * Library: IMMZD18SMeaslesDose0LowTx (IMMZ.D18.S.Measles.MCV dose 0 schedule.LowTx)
 * Schedule Table: MCV dose 0 (MCV0) schedule
 */
library IMMZD18SMeaslesDose0LowTx
// Start Skeleton CQL
using FHIR version '4.0.1'
include FHIRHelpers version '4.0.1'
include IMMZCommon called IMMZCom
include IMMZConcepts called IMMZc
include IMMZConfig called IMMZCon
include IMMZVaccineLibrary called IMMZvl
include FHIRCommon called FC
include IMMZD2DTMeaslesInput called input

// End Skeleton CQL
context Patient


/*
@output: Measles MCV0 dose
@trigger: Child's birth
*/
define &quot;Measles MCV0 dose&quot;:
	Count(input.&quot;MCV Doses Administered to Patient&quot;) = 0 and Now() &lt;= &quot;Measles MCV0 dose Expiration&quot;

/*
@output: Measles MCV0 dose Create
@create: In the following situations, a supplementary dose of MCV should be given to infants from 6 months of age: 
-	(1) during a measles outbreak as part of intensified service delivery;
-	(2) during campaigns in settings where the risk of measles among infants &lt; 9 months of age remains high (e.g. in endemic countries experiencing regular outbreaks);
-	(3) for internally displaced populations and refugees, and populations in conflict zones;
-	(4) for individual infants at high risk of contracting measles (e.g. contacts of known measles cases or in settings with increased risk of exposure during outbreaks such as day-care facilities);
-	(5) for infants travelling to countries experiencing measles outbreaks;
-	(6) for infants known to be HIV-infected or exposed (i.e. born to an HIV-infected woman).
*/
define &quot;Measles MCV0 dose Create&quot;:
	if &quot;Measles MCV0 dose&quot; then 	'In the following situations, a supplementary dose of MCV should be given to infants from 6 months of age: \n-	(1) during a measles outbreak as part of intensified service delivery;\n-	(2) during campaigns in settings where the risk of measles among infants &lt; 9 months of age remains high (e.g. in endemic countries experiencing regular outbreaks);\n-	(3) for internally displaced populations and refugees, and populations in conflict zones;\n-	(4) for individual infants at high risk of contracting measles (e.g. contacts of known measles cases or in settings with increased risk of exposure during outbreaks such as day-care facilities);\n-	(5) for infants travelling to countries experiencing measles outbreaks;\n-	(6) for infants known to be HIV-infected or exposed (i.e. born to an HIV-infected woman).\nDue Date is '
		+ ToString(&quot;Measles MCV0 dose Due Date&quot;)
	else ''

/*
@dynamicValue: Measles MCV0 dose Due Date
@pseudocode: &quot;Date of birth&quot; + 6 'month'
*/
define &quot;Measles MCV0 dose Due Date&quot;:
	if &quot;Measles MCV0 dose&quot; then Patient.birthDate + 6 months
	else null

/*
@dynamicValue: Measles MCV0 dose Overdue
@pseudocode: To be determined by Member States however there is no recommended overdue date and individuals are always eligible to be vaccinated
*/
define &quot;Measles MCV0 dose Overdue&quot;:
	null

/*
@dynamicValue: Measles MCV0 dose Expiration
@pseudocode: &quot;Date of birth&quot; + 9 'month' for countries with ongoing transmission in which the risk of measles mortality remains high OR &quot;Date of birth&quot; + 12 'month' for countries with low levels of measles transmission
*/
define &quot;Measles MCV0 dose Expiration&quot;:
	Patient.birthDate + 12 months</code></pre><p><code>Content not shown - (</code><code>application/elm+xml</code>, size = 16Kb)</p><p><code>Content not shown - (</code><code>application/elm+json</code>, size = 26Kb)</p></div>
  </text>
  <extension url="http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem">
    <valueReference>
      <reference value="Device/cqf-tooling"/>
    </valueReference>
  </extension>
  <url value="http://smart.who.int/ig/smart-immunizations/Library/IMMZD18SMeaslesDose0LowTx"/>
  <version value="0.1.0"/>
  <name value="IMMZD18SMeaslesDose0LowTx"/>
  <status value="draft"/>
  <date value="2024-03-22T16:39:50+00:00"/>
  <publisher value="World Health Organization (WHO)"/>
  <contact>
    <name value="World Health Organization (WHO)"/>
    <telecom>
      <system value="url"/>
      <value value="https://www.who.int"/>
    </telecom>
  </contact>
  <jurisdiction>
    <coding>
      <system value="http://unstats.un.org/unsd/methods/m49/m49.htm"/>
      <code value="001"/>
    </coding>
  </jurisdiction>
  <relatedArtifact>
    <type value="depends-on"/>
    <display value="FHIR model information"/>
    <resource value="http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1"/>
  </relatedArtifact>
  <relatedArtifact>
    <type value="depends-on"/>
    <display value="Library FHIRHelpers"/>
    <resource value="http://smart.who.int/ig/smart-immunizations/Library/FHIRHelpers|4.0.1"/>
  </relatedArtifact>
  <relatedArtifact>
    <type value="depends-on"/>
    <display value="Library IMMZCom"/>
    <resource value="http://smart.who.int/ig/smart-immunizations/Library/IMMZCommon"/>
  </relatedArtifact>
  <relatedArtifact>
    <type value="depends-on"/>
    <display value="Library IMMZc"/>
    <resource value="http://smart.who.int/ig/smart-immunizations/Library/IMMZConcepts"/>
  </relatedArtifact>
  <relatedArtifact>
    <type value="depends-on"/>
    <display value="Library IMMZCon"/>
    <resource value="http://smart.who.int/ig/smart-immunizations/Library/IMMZConfig"/>
  </relatedArtifact>
  <relatedArtifact>
    <type value="depends-on"/>
    <display value="Library IMMZvl"/>
    <resource value="http://smart.who.int/ig/smart-immunizations/Library/IMMZVaccineLibrary"/>
  </relatedArtifact>
  <relatedArtifact>
    <type value="depends-on"/>
    <display value="Library FC"/>
    <resource value="http://smart.who.int/ig/smart-immunizations/Library/FHIRCommon"/>
  </relatedArtifact>
  <relatedArtifact>
    <type value="depends-on"/>
    <display value="Library input"/>
    <resource value="http://smart.who.int/ig/smart-immunizations/Library/IMMZD2DTMeaslesInput"/>
  </relatedArtifact>
  <relatedArtifact>
    <type value="depends-on"/>
    <display value="Value set MCV Vaccine"/>
    <resource value="http://smart.who.int/ig/smart-immunizations/ValueSet/IMMZ.Z.DE9"/>
  </relatedArtifact>
  <parameter>
    <name value="Patient"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="Patient"/>
  </parameter>
  <parameter>
    <name value="Measles MCV0 dose Expiration"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="date"/>
  </parameter>
  <parameter>
    <name value="Measles MCV0 dose"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Measles MCV0 dose Due Date"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="date"/>
  </parameter>
  <parameter>
    <name value="Measles MCV0 dose Create"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="string"/>
  </parameter>
  <parameter>
    <name value="Measles MCV0 dose Overdue"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="Resource"/>
  </parameter>
  <dataRequirement>
    <type value="Patient"/>
    <profile value="http://hl7.org/fhir/StructureDefinition/Patient"/>
  </dataRequirement>
  <dataRequirement>
    <type value="Immunization"/>
    <profile value="http://hl7.org/fhir/StructureDefinition/Immunization"/>
    <mustSupport value="status"/>
    <mustSupport value="vaccineCode"/>
  </dataRequirement>
  <content>
    <contentType value="text/cql"/>
    <data value="LyoKICogTGlicmFyeTogSU1NWkQxOFNNZWFzbGVzRG9zZTBMb3dUeCAoSU1NWi5EMTguUy5NZWFzbGVzLk1DViBkb3NlIDAgc2NoZWR1bGUuTG93VHgpCiAqIFNjaGVkdWxlIFRhYmxlOiBNQ1YgZG9zZSAwIChNQ1YwKSBzY2hlZHVsZQogKi8KbGlicmFyeSBJTU1aRDE4U01lYXNsZXNEb3NlMExvd1R4Ci8vIFN0YXJ0IFNrZWxldG9uIENRTAp1c2luZyBGSElSIHZlcnNpb24gJzQuMC4xJwppbmNsdWRlIEZISVJIZWxwZXJzIHZlcnNpb24gJzQuMC4xJwppbmNsdWRlIElNTVpDb21tb24gY2FsbGVkIElNTVpDb20KaW5jbHVkZSBJTU1aQ29uY2VwdHMgY2FsbGVkIElNTVpjCmluY2x1ZGUgSU1NWkNvbmZpZyBjYWxsZWQgSU1NWkNvbgppbmNsdWRlIElNTVpWYWNjaW5lTGlicmFyeSBjYWxsZWQgSU1NWnZsCmluY2x1ZGUgRkhJUkNvbW1vbiBjYWxsZWQgRkMKaW5jbHVkZSBJTU1aRDJEVE1lYXNsZXNJbnB1dCBjYWxsZWQgaW5wdXQKCi8vIEVuZCBTa2VsZXRvbiBDUUwKY29udGV4dCBQYXRpZW50CgoKLyoKQG91dHB1dDogTWVhc2xlcyBNQ1YwIGRvc2UKQHRyaWdnZXI6IENoaWxkJ3MgYmlydGgKKi8KZGVmaW5lICJNZWFzbGVzIE1DVjAgZG9zZSI6CglDb3VudChpbnB1dC4iTUNWIERvc2VzIEFkbWluaXN0ZXJlZCB0byBQYXRpZW50IikgPSAwIGFuZCBOb3coKSA8PSAiTWVhc2xlcyBNQ1YwIGRvc2UgRXhwaXJhdGlvbiIKCi8qCkBvdXRwdXQ6IE1lYXNsZXMgTUNWMCBkb3NlIENyZWF0ZQpAY3JlYXRlOiBJbiB0aGUgZm9sbG93aW5nIHNpdHVhdGlvbnMsIGEgc3VwcGxlbWVudGFyeSBkb3NlIG9mIE1DViBzaG91bGQgYmUgZ2l2ZW4gdG8gaW5mYW50cyBmcm9tIDYgbW9udGhzIG9mIGFnZTogCi0JKDEpIGR1cmluZyBhIG1lYXNsZXMgb3V0YnJlYWsgYXMgcGFydCBvZiBpbnRlbnNpZmllZCBzZXJ2aWNlIGRlbGl2ZXJ5OwotCSgyKSBkdXJpbmcgY2FtcGFpZ25zIGluIHNldHRpbmdzIHdoZXJlIHRoZSByaXNrIG9mIG1lYXNsZXMgYW1vbmcgaW5mYW50cyA8IDkgbW9udGhzIG9mIGFnZSByZW1haW5zIGhpZ2ggKGUuZy4gaW4gZW5kZW1pYyBjb3VudHJpZXMgZXhwZXJpZW5jaW5nIHJlZ3VsYXIgb3V0YnJlYWtzKTsKLQkoMykgZm9yIGludGVybmFsbHkgZGlzcGxhY2VkIHBvcHVsYXRpb25zIGFuZCByZWZ1Z2VlcywgYW5kIHBvcHVsYXRpb25zIGluIGNvbmZsaWN0IHpvbmVzOwotCSg0KSBmb3IgaW5kaXZpZHVhbCBpbmZhbnRzIGF0IGhpZ2ggcmlzayBvZiBjb250cmFjdGluZyBtZWFzbGVzIChlLmcuIGNvbnRhY3RzIG9mIGtub3duIG1lYXNsZXMgY2FzZXMgb3IgaW4gc2V0dGluZ3Mgd2l0aCBpbmNyZWFzZWQgcmlzayBvZiBleHBvc3VyZSBkdXJpbmcgb3V0YnJlYWtzIHN1Y2ggYXMgZGF5LWNhcmUgZmFjaWxpdGllcyk7Ci0JKDUpIGZvciBpbmZhbnRzIHRyYXZlbGxpbmcgdG8gY291bnRyaWVzIGV4cGVyaWVuY2luZyBtZWFzbGVzIG91dGJyZWFrczsKLQkoNikgZm9yIGluZmFudHMga25vd24gdG8gYmUgSElWLWluZmVjdGVkIG9yIGV4cG9zZWQgKGkuZS4gYm9ybiB0byBhbiBISVYtaW5mZWN0ZWQgd29tYW4pLgoqLwpkZWZpbmUgIk1lYXNsZXMgTUNWMCBkb3NlIENyZWF0ZSI6CglpZiAiTWVhc2xlcyBNQ1YwIGRvc2UiIHRoZW4gCSdJbiB0aGUgZm9sbG93aW5nIHNpdHVhdGlvbnMsIGEgc3VwcGxlbWVudGFyeSBkb3NlIG9mIE1DViBzaG91bGQgYmUgZ2l2ZW4gdG8gaW5mYW50cyBmcm9tIDYgbW9udGhzIG9mIGFnZTogXG4tCSgxKSBkdXJpbmcgYSBtZWFzbGVzIG91dGJyZWFrIGFzIHBhcnQgb2YgaW50ZW5zaWZpZWQgc2VydmljZSBkZWxpdmVyeTtcbi0JKDIpIGR1cmluZyBjYW1wYWlnbnMgaW4gc2V0dGluZ3Mgd2hlcmUgdGhlIHJpc2sgb2YgbWVhc2xlcyBhbW9uZyBpbmZhbnRzIDwgOSBtb250aHMgb2YgYWdlIHJlbWFpbnMgaGlnaCAoZS5nLiBpbiBlbmRlbWljIGNvdW50cmllcyBleHBlcmllbmNpbmcgcmVndWxhciBvdXRicmVha3MpO1xuLQkoMykgZm9yIGludGVybmFsbHkgZGlzcGxhY2VkIHBvcHVsYXRpb25zIGFuZCByZWZ1Z2VlcywgYW5kIHBvcHVsYXRpb25zIGluIGNvbmZsaWN0IHpvbmVzO1xuLQkoNCkgZm9yIGluZGl2aWR1YWwgaW5mYW50cyBhdCBoaWdoIHJpc2sgb2YgY29udHJhY3RpbmcgbWVhc2xlcyAoZS5nLiBjb250YWN0cyBvZiBrbm93biBtZWFzbGVzIGNhc2VzIG9yIGluIHNldHRpbmdzIHdpdGggaW5jcmVhc2VkIHJpc2sgb2YgZXhwb3N1cmUgZHVyaW5nIG91dGJyZWFrcyBzdWNoIGFzIGRheS1jYXJlIGZhY2lsaXRpZXMpO1xuLQkoNSkgZm9yIGluZmFudHMgdHJhdmVsbGluZyB0byBjb3VudHJpZXMgZXhwZXJpZW5jaW5nIG1lYXNsZXMgb3V0YnJlYWtzO1xuLQkoNikgZm9yIGluZmFudHMga25vd24gdG8gYmUgSElWLWluZmVjdGVkIG9yIGV4cG9zZWQgKGkuZS4gYm9ybiB0byBhbiBISVYtaW5mZWN0ZWQgd29tYW4pLlxuRHVlIERhdGUgaXMgJwoJCSsgVG9TdHJpbmcoIk1lYXNsZXMgTUNWMCBkb3NlIER1ZSBEYXRlIikKCWVsc2UgJycKCi8qCkBkeW5hbWljVmFsdWU6IE1lYXNsZXMgTUNWMCBkb3NlIER1ZSBEYXRlCkBwc2V1ZG9jb2RlOiAiRGF0ZSBvZiBiaXJ0aCIgKyA2ICdtb250aCcKKi8KZGVmaW5lICJNZWFzbGVzIE1DVjAgZG9zZSBEdWUgRGF0ZSI6CglpZiAiTWVhc2xlcyBNQ1YwIGRvc2UiIHRoZW4gUGF0aWVudC5iaXJ0aERhdGUgKyA2IG1vbnRocwoJZWxzZSBudWxsCgovKgpAZHluYW1pY1ZhbHVlOiBNZWFzbGVzIE1DVjAgZG9zZSBPdmVyZHVlCkBwc2V1ZG9jb2RlOiBUbyBiZSBkZXRlcm1pbmVkIGJ5IE1lbWJlciBTdGF0ZXMgaG93ZXZlciB0aGVyZSBpcyBubyByZWNvbW1lbmRlZCBvdmVyZHVlIGRhdGUgYW5kIGluZGl2aWR1YWxzIGFyZSBhbHdheXMgZWxpZ2libGUgdG8gYmUgdmFjY2luYXRlZAoqLwpkZWZpbmUgIk1lYXNsZXMgTUNWMCBkb3NlIE92ZXJkdWUiOgoJbnVsbAoKLyoKQGR5bmFtaWNWYWx1ZTogTWVhc2xlcyBNQ1YwIGRvc2UgRXhwaXJhdGlvbgpAcHNldWRvY29kZTogIkRhdGUgb2YgYmlydGgiICsgOSAnbW9udGgnIGZvciBjb3VudHJpZXMgd2l0aCBvbmdvaW5nIHRyYW5zbWlzc2lvbiBpbiB3aGljaCB0aGUgcmlzayBvZiBtZWFzbGVzIG1vcnRhbGl0eSByZW1haW5zIGhpZ2ggT1IgIkRhdGUgb2YgYmlydGgiICsgMTIgJ21vbnRoJyBmb3IgY291bnRyaWVzIHdpdGggbG93IGxldmVscyBvZiBtZWFzbGVzIHRyYW5zbWlzc2lvbgoqLwpkZWZpbmUgIk1lYXNsZXMgTUNWMCBkb3NlIEV4cGlyYXRpb24iOgoJUGF0aWVudC5iaXJ0aERhdGUgKyAxMiBtb250aHM="/>
  </content>
  <content>
    <contentType value="application/elm+xml"/>
    <data value=""/>
  </content>
  <content>
    <contentType value="application/elm+json"/>
    <data value=""/>
  </content>
</Library>