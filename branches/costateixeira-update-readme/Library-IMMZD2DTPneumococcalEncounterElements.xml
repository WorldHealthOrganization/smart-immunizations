<?xml version="1.0" encoding="UTF-8"?>

<Library xmlns="http://hl7.org/fhir">
  <id value="IMMZD2DTPneumococcalEncounterElements"/>
  <meta>
    <profile value="http://hl7.org/fhir/uv/crmi/StructureDefinition/crmi-shareablelibrary"/>
    <profile value="http://hl7.org/fhir/uv/crmi/StructureDefinition/crmi-publishablelibrary"/>
    <profile value="http://hl7.org/fhir/uv/cql/StructureDefinition/cql-library"/>
    <profile value="http://hl7.org/fhir/uv/cql/StructureDefinition/cql-module"/>
  </meta>
  <text>
    <status value="extensions"/><div xmlns="http://www.w3.org/1999/xhtml">
<div>
    <table class="grid dict">
        
        
        <tr>
            <th scope="row"><b>Title: </b></th>
            <td style="padding-left: 4px;">IMMZD2DTPneumococcalEncounterElements</td>
        </tr>
        

        
        
        <tr>
            <th scope="row"><b>Id: </b></th>
            <td style="padding-left: 4px;">IMMZD2DTPneumococcalEncounterElements</td>
        </tr>
        

        
        
        <tr>
            <th scope="row"><b>Version: </b></th>
            <td style="padding-left: 4px;">0.2.0</td>
        </tr>
        

        
        <tr>
            <th scope="row"><b>Url: </b></th>
            <td style="padding-left: 4px;"><a href="Library-IMMZD2DTPneumococcalEncounterElements.html">IMMZD2DTPneumococcalEncounterElements</a></td>
        </tr>
        

        

        

        
        <tr>
            <th scope="row"><b>Status: </b></th>
            <td style="padding-left: 4px;">draft</td>
        </tr>
        

        
        <tr>
            <th scope="row"><b>Experimental: </b></th>
            <td style="padding-left: 4px;">true</td>
        </tr>
        

        
        <tr>
            <th scope="row"><b>Type: </b></th>
            <td style="padding-left: 4px;">
                
                    
                        
                        <p style="margin-bottom: 5px;">
                            <b>system: </b> <span><a href="http://terminology.hl7.org/6.0.2/CodeSystem-library-type.html">http://terminology.hl7.org/CodeSystem/library-type</a></span>
                        </p>
                        
                        
                        <p style="margin-bottom: 5px;">
                            <b>code: </b> <span>logic-library</span>
                        </p>
                        
                        
                    
                
                
            </td>
        </tr>
        

        

        
        <tr>
            <th scope="row"><b>Date: </b></th>
            <td style="padding-left: 4px;">2025-07-02 07:24:46+0000</td>
        </tr>
        

        
        <tr>
            <th scope="row"><b>Publisher: </b></th>
            <td style="padding-left: 4px;">WHO</td>
        </tr>
        

        
        <tr>
            <th scope="row"><b>Description: </b></th>
            <td style="padding-left: 4px;"><div><p>This library defines encounter-based elements for Pneumococcal used throughout the Immunization CPG</p>
</div></td>
        </tr>
        

        

        

        

        

        

        

        

        

        

        

        
        <tr>
            <th scope="row"><b>Related Artifacts: </b></th>
            <td style="padding-left: 4px;">
                
                
                
                <p><b>Dependencies</b></p>
                <ul>
                  
                    <li><a href="Library-WHOConcepts.html">WHOConcepts</a></li>
                  
                    <li><a href="Library-WHOCommon.html">WHOCommon</a></li>
                  
                    <li><a href="Library-WHOElements.html">WHOElements</a></li>
                  
                    <li><a href="Library-IMMZCommon.html">IMMZCommon</a></li>
                  
                    <li><a href="Library-IMMZConcepts.html">IMMZConcepts</a></li>
                  
                    <li><a href="Library-IMMZEncounterElements.html">IMMZEncounterElements</a></li>
                  
                    <li><a href="Library-IMMZD2DTPneumococcalElements.html">IMMZD2DTPneumococcalElements</a></li>
                  
                </ul>
                
                
                
                
                
            </td>
        </tr>
        

        
        <tr>
          <th scope="row"><b>Parameters: </b></th>
          <td style="padding-left: 4px;">
            <table class="grid-dict">
              <tr><th><b>Name</b></th><th><b>Type</b></th><th><b>Min</b></th><th><b>Max</b></th><th><b>In/Out</b></th></tr>
              
                <tr><th>Today</th><th>date</th><th>0</th><th>1</th><th>In</th></tr>
              
                <tr><th>EncounterId</th><th>string</th><th>0</th><th>1</th><th>In</th></tr>
              
                <tr><th>Patient</th><th>Patient</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Pneumococcal Doses Administered to Patient</th><th>Immunization</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>Date of First Pneumococcal Dose</th><th>date</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Date of Latest Pneumococcal Dose</th><th>date</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Pneumococcal Primary Series Doses Administered to Patient</th><th>Immunization</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>Number of Pneumococcal Primary Series Doses Administered</th><th>integer</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>No pneumococcal primary series doses were administered</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>One pneumococcal primary series dose was administered</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Two pneumococcal primary series doses were administered</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Three pneumococcal primary series doses were administered</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Pneumococcal Booster Series Doses Administered to Patient</th><th>Immunization</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>Number of Pneumococcal Booster Series Doses Administered</th><th>integer</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>No pneumococcal booster dose was administered</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>One pneumococcal booster dose was administered</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Two pneumococcal booster doses were administered</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>The client's age is less than 6 weeks</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>The client's age is between 6 weeks and 5 years</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>The client's age is less than or equal to 5 years</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>The client's age is less than or equal to five years</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>The client's age is less than 12 months</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>The client's age is more than or equal to 12 months and less than 24 months</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>The client's age is less than 24 months</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>The client's age is more than or equal to 24 months</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>The client's age is more than 5 years</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>The first pneumococcal dose was administered within 24 months post birth</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>The first pneumococcal dose was administered after 24 months post birth</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>The first pneumococcal dose was administered within 12 months post birth</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>The first pneumococcal dose was administered after 12 months post birth</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>The first pneumococcal dose was administered at 12â€“24 months post birth</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>The latest pneumococcal dose was administered within 12 months post birth</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>The latest pneumococcal dose was administered after 12 months post birth</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>The latest pneumococcal dose was administered less than 4 weeks ago</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>The latest pneumococcal dose was administered more than 4 weeks ago</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>The latest pneumococcal dose was administered less than 8 weeks ago</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>The latest pneumococcal dose was administered more than 8 weeks ago</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Client is at high risk for pneumococcal infection</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Client is not at high risk for pneumococcal infection</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Client's HIV status is positive</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Client's HIV status is negative or unknown</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Client had preterm birth</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Client did not have preterm birth</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
            </table>
          </td>
        </tr>
        

        

        
        
        <tr>
          <td colspan="2">
            <table>
              <tr><th><a id="cql-content"><b>Content: </b></a> text/cql</th></tr>
              <tr><td><pre><code class="language-cql">
/*
  * Library: IMMZD2DTPneumococcalEncounterElements
  */
library IMMZD2DTPneumococcalEncounterElements

using FHIR version '4.0.1'
include FHIRHelpers version '4.0.1'

include WHOConcepts
include WHOCommon called WC
include WHOElements called WE

include IMMZCommon called Common
include IMMZConcepts called Concepts

include IMMZEncounterElements called Encounter

include IMMZD2DTPneumococcalElements called PneumococcalElements

parameter Today Date default Today()
parameter EncounterId String

context Patient

/*
@internal: Pneumococcal containing Doses Administered to Patient
*/
define &quot;Pneumococcal Doses Administered to Patient&quot;:
  Encounter.&quot;Doses Administered to Patient&quot; I
  where
    I.vaccineCode in Concepts.&quot;Pneumococcal vaccines&quot;

/*
@internal: Date and time of first Pneumococcal dose
*/
define &quot;Date of First Pneumococcal Dose&quot;:
  date from start of &quot;Pneumococcal Doses Administered to Patient&quot;.earliest().occurrence.toInterval()

/*
@internal: Date and time of last Pneumococcal dose
*/
define &quot;Date of Latest Pneumococcal Dose&quot;:
  date from start of &quot;Pneumococcal Doses Administered to Patient&quot;.mostRecent().occurrence.toInterval()

/*
@internal: Pneumococcal containing Doses Administered to Patient that are in the Primary series
*/
define &quot;Pneumococcal Primary Series Doses Administered to Patient&quot;:
  &quot;Pneumococcal Doses Administered to Patient&quot;.seriesPrimary()

/*
@internal: Number of Pneumococcal Primary Series doses
*/
define &quot;Number of Pneumococcal Primary Series Doses Administered&quot;:
  Count(&quot;Pneumococcal Primary Series Doses Administered to Patient&quot;)

/*
@input: No pneumococcal primary series doses were administered
@pseudocode: Count of vaccines administered (where &quot;Vaccine type&quot; = &quot;Pneumococcal vaccines&quot; and &quot;Type of dose&quot; = &quot;Primary series&quot;) = 0
@decision: 2 primary doses with a booster dose (2p+1)
@decision: 3 primary doses (3p+0)
*/
define &quot;No pneumococcal primary series doses were administered&quot;:
  &quot;Number of Pneumococcal Primary Series Doses Administered&quot; = 0

/*
@input: One pneumococcal primary series dose was administered
@pseudocode: Count of vaccines administered (where &quot;Vaccine type&quot; = &quot;Pneumococcal vaccines&quot; and &quot;Type of dose&quot; = &quot;Primary series&quot;) = 1
@decision: 2 primary doses with a booster dose (2p+1)
@decision: 3 primary doses (3p+0)
*/
define &quot;One pneumococcal primary series dose was administered&quot;:
  &quot;Number of Pneumococcal Primary Series Doses Administered&quot; = 1

/*
@input: Two pneumococcal primary series doses were administered
@pseudocode: Count of vaccines administered (where &quot;Vaccine type&quot; = &quot;Pneumococcal vaccines&quot; and &quot;Type of dose&quot; = &quot;Primary series&quot;) = 2
@decision: 2 primary doses with a booster dose (2p+1)
@decision: 3 primary doses (3p+0)
*/
define &quot;Two pneumococcal primary series doses were administered&quot;:
  &quot;Number of Pneumococcal Primary Series Doses Administered&quot; = 2

/*
@input: Three pneumococcal primary series doses were administered
@pseudocode: Count of vaccines administered (where &quot;Vaccine type&quot; = &quot;Pneumococcal vaccines&quot; and &quot;Type of dose&quot; = &quot;Primary series&quot;) = 3
@decision: 3 primary doses (3p+0)
*/
define &quot;Three pneumococcal primary series doses were administered&quot;:
  &quot;Number of Pneumococcal Primary Series Doses Administered&quot; = 3

/*
@internal: Pneumococcal containing Doses Administered to Patient that are in the Booster series
*/
define &quot;Pneumococcal Booster Series Doses Administered to Patient&quot;:
  &quot;Pneumococcal Doses Administered to Patient&quot;.seriesBooster()

/*
@internal: Number of Pneumococcal Booster Series doses
*/
define &quot;Number of Pneumococcal Booster Series Doses Administered&quot;:
  Count(&quot;Pneumococcal Booster Series Doses Administered to Patient&quot;)

/*
@input: No pneumococcal booster dose was administered
@pseudocode: Count of vaccines administered (where &quot;Vaccine type&quot; = &quot;Pneumococcal vaccines&quot; and &quot;Type of dose&quot; = &quot;Booster dose&quot;) = 0
@decision: 2 primary doses with a booster dose (2p+1)
@decision: 3 primary doses (3p+0)
*/
define &quot;No pneumococcal booster dose was administered&quot;:
  &quot;Number of Pneumococcal Booster Series Doses Administered&quot; = 0

/*
@input: One pneumococcal booster dose was administered
@pseudocode: Count of vaccines administered (where &quot;Vaccine type&quot; = &quot;Pneumococcal vaccines&quot; and &quot;Type of dose&quot; = &quot;Booster dose&quot;) = 1
@decision: 2 primary doses with a booster dose (2p+1)
@decision: 3 primary doses (3p+0)
*/
define &quot;One pneumococcal booster dose was administered&quot;:
  &quot;Number of Pneumococcal Booster Series Doses Administered&quot; = 1

/*
@input: Two pneumococcal booster doses were administered
@pseudocode: Count of vaccines administered (where &quot;Vaccine type&quot; = &quot;Pneumococcal vaccines&quot; and &quot;Type of dose&quot; = &quot;Booster dose&quot;) = 2
@decision: 2 primary doses with a booster dose (2p+1)
*/
define &quot;Two pneumococcal booster doses were administered&quot;:
  &quot;Number of Pneumococcal Booster Series Doses Administered&quot; = 2

/*
@input: The client's age is less than 6 weeks
@pseudocode: Today's date âˆ’ &quot;Date of birth&quot; &lt; 6 weeks
@decision: 2 primary doses with a booster dose (2p+1)
@decision: 3 primary doses (3p+0)
*/
define &quot;The client's age is less than 6 weeks&quot;:
  Encounter.&quot;Current Patient Age In Weeks&quot; &lt; 6

/*
@input: The client's age is between 6 weeks and 5 years
@pseudocode: 6 weeks â‰¤ Today's date âˆ’ &quot;Date of birth&quot; â‰¤ 5 years
@decision: 2 primary doses with a booster dose (2p+1)
@decision: 3 primary doses (3p+0)
*/
define &quot;The client's age is between 6 weeks and 5 years&quot;:
  6 &lt;= Encounter.&quot;Current Patient Age In Weeks&quot; 
  and Encounter.&quot;Current Patient Age In Years&quot; &lt;= 5

/*
@input: The client's age is less than or equal to 5 years
@pseudocode: 'Today's date âˆ’ &quot;Date of birth&quot; â‰¤ 5 years
@decision: 2 primary doses with a booster dose (2p+1)
@decision: 3 primary doses (3p+0)
*/
define &quot;The client's age is less than or equal to 5 years&quot;:
  Encounter.&quot;Current Patient Age In Years&quot; &lt;= 5

/*
@input: The client's age is less than or equal to five years
@pseudocode: Today's date âˆ’ &quot;Date of birth&quot; â‰¤ 5 years
@decision: 3 primary doses (3p+0)
*/
define &quot;The client's age is less than or equal to five years&quot;:
  &quot;The client's age is less than or equal to 5 years&quot;

/*
@input: The client's age is less than 12 months
@pseudocode: Today's date âˆ’ &quot;Date of birth&quot; &lt; 12 months
@decision: 2 primary doses with a booster dose (2p+1)
*/
define &quot;The client's age is less than 12 months&quot;:
  Encounter.&quot;Current Patient Age In Months&quot; &lt; 12

/*
@input: The client's age is more than or equal to 12 months and less than 24 months
@pseudocode: 12 months â‰¤ Today's date âˆ’ &quot;Date of birth&quot; &lt; 24 months
@decision: 2 primary doses with a booster dose (2p+1)
*/
define &quot;The client's age is more than or equal to 12 months and less than 24 months&quot;:
  12 &lt;= Encounter.&quot;Current Patient Age In Months&quot; 
  and Encounter.&quot;Current Patient Age In Months&quot; &lt; 24

/*
@input: The client's age is less than 24 months
@pseudocode: Today's date âˆ’ &quot;Date of birth&quot; &lt; 24 months
@decision: 3 primary doses (3p+0)
*/
define &quot;The client's age is less than 24 months&quot;:
  Encounter.&quot;Current Patient Age In Months&quot; &lt; 24

/*
@input: The client's age is more than or equal to 24 months
@pseudocode: Today's date âˆ’ &quot;Date of birth&quot; â‰¥ 24 months
@decision: 2 primary doses with a booster dose (2p+1)
*/
define &quot;The client's age is more than or equal to 24 months&quot;:
  Encounter.&quot;Current Patient Age In Months&quot; &gt;= 24

/*
@input: The client's age is more than 5 years
@pseudocode: Today's date âˆ’ &quot;Date of birth&quot; &gt; 5 years
@decision: 2 primary doses with a booster dose (2p+1)
@decision: 3 primary doses (3p+0)

*/
define &quot;The client's age is more than 5 years&quot;:
  Encounter.&quot;Current Patient Age In Months&quot; &gt; 5
  
/*
@input: The first pneumococcal dose was administered within 24 months post birth
@pseudocode: &quot;Date and time of vaccination&quot; (where &quot;Vaccine type&quot; = &quot;Pneumococcal vaccines&quot;) âˆ’ &quot;Date of birth&quot; &lt; 24 months
@decision: 2 primary doses with a booster dose (2p+1)
*/
define &quot;The first pneumococcal dose was administered within 24 months post birth&quot;:
  AgeInMonthsAt(&quot;Date of First Pneumococcal Dose&quot;) &lt; 24

/*
@input: The first pneumococcal dose was administered after 24 months post birth
@pseudocode: &quot;Date and time of vaccination&quot; (where &quot;Vaccine type&quot; = &quot;Pneumococcal vaccines&quot;) âˆ’ &quot;Date of birth&quot; â‰¥ 24 months
@decision: 2 primary doses with a booster dose (2p+1)
@decision: 3 primary doses (3p+0)
*/
define &quot;The first pneumococcal dose was administered after 24 months post birth&quot;:
  AgeInMonthsAt(&quot;Date of First Pneumococcal Dose&quot;) &gt;= 24

/*
@input: The first pneumococcal dose was administered within 12 months post birth
@pseudocode: &quot;Date and time of vaccination&quot; (where &quot;Vaccine type&quot; = &quot;Pneumococcal vaccines&quot; AND &quot;Dose number&quot; = 1) âˆ’ &quot;Date of birth&quot; &lt; 12 months
@decision: 2 primary doses with a booster dose (2p+1)
@decision: 3 primary doses (3p+0)
*/
define &quot;The first pneumococcal dose was administered within 12 months post birth&quot;:
  AgeInMonthsAt(&quot;Date of First Pneumococcal Dose&quot;) &lt; 12

/*
@input: The first pneumococcal dose was administered after 12 months post birth
@pseudocode: &quot;Date and time of vaccination&quot; (where &quot;Vaccine type&quot; = &quot;Pneumococcal vaccines&quot; AND &quot;Dose number&quot; = 1) âˆ’ &quot;Date of birth&quot; â‰¥ 12 months
@decision: 2 primary doses with a booster dose (2p+1)
@decision: 3 primary doses (3p+0)
*/
define &quot;The first pneumococcal dose was administered after 12 months post birth&quot;:
  AgeInMonthsAt(&quot;Date of First Pneumococcal Dose&quot;) &gt;= 12

/*
@input: The first pneumococcal dose was administered at 12â€“24 months post birth
@pseudocode: 12 months â‰¤ &quot;Date and time of vaccination&quot; (where &quot;Vaccine type&quot; = &quot;Pneumococcal vaccines&quot;) âˆ’ &quot;Date of birth&quot; &lt; 24 months
@decision: 3 primary doses (3p+0)
*/
define &quot;The first pneumococcal dose was administered at 12â€“24 months post birth&quot;:
  AgeInMonthsAt(&quot;Date of First Pneumococcal Dose&quot;) &gt;= 12
  and AgeInMonthsAt(&quot;Date of First Pneumococcal Dose&quot;) &lt; 24

/*
@input: The latest pneumococcal dose was administered within 12 months post birth
@pseudocode: Latest &quot;Date and time of vaccination&quot; (where &quot;Vaccine type&quot; = &quot;Pneumococcal vaccines&quot;) âˆ’ &quot;Date of birth&quot; &lt; 12 months
@decision: 2 primary doses with a booster dose (2p+1)
@decision: 3 primary doses (3p+0)
*/
define &quot;The latest pneumococcal dose was administered within 12 months post birth&quot;:
  AgeInMonthsAt(&quot;Date of Latest Pneumococcal Dose&quot;) &lt; 12

/*
@input: The latest pneumococcal dose was administered after 12 months post birth
@pseudocode: Latest &quot;Date and time of vaccination&quot; (where &quot;Vaccine type&quot; = &quot;Pneumococcal vaccines&quot;) âˆ’ &quot;Date of birth&quot; â‰¥ 12 months
@decision: 2 primary doses with a booster dose (2p+1)
@decision: 3 primary doses (3p+0)
*/
define &quot;The latest pneumococcal dose was administered after 12 months post birth&quot;:
  AgeInMonthsAt(&quot;Date of Latest Pneumococcal Dose&quot;) &gt;= 12

/*
@input: The latest pneumococcal dose was administered less than 4 weeks ago
@pseudocode: Today's date âˆ’ &quot;Date and time of vaccination&quot; (where &quot;Vaccine type&quot; = &quot;Pneumococcal vaccines&quot;) &lt; 4 weeks
@decision: 3 primary doses (3p+0)
*/
define &quot;The latest pneumococcal dose was administered less than 4 weeks ago&quot;:
  &quot;Date of Latest Pneumococcal Dose&quot; is not null
    and duration in weeks between &quot;Date of Latest Pneumococcal Dose&quot; and Today &lt; 4

/*
@input: The latest pneumococcal dose was administered more than 4 weeks ago
@pseudocode: Today's date âˆ’ &quot;Date and time of vaccination&quot; (where &quot;Vaccine type&quot; = &quot;Pneumococcal vaccines&quot;) â‰¥ 4 weeks
@decision: 3 primary doses (3p+0)
*/
define &quot;The latest pneumococcal dose was administered more than 4 weeks ago&quot;:
  not &quot;The latest pneumococcal dose was administered less than 4 weeks ago&quot;

/*
@input: The latest pneumococcal dose was administered less than 8 weeks ago
@pseudocode: Today's date âˆ’ &quot;Date and time of vaccination&quot; (where &quot;Vaccine type&quot; = &quot;Pneumococcal vaccines&quot;) &lt; 8 weeks
@decision: 2 primary doses with a booster dose (2p+1)
@decision: 3 primary doses (3p+0)
*/
define &quot;The latest pneumococcal dose was administered less than 8 weeks ago&quot;:
  &quot;Date of Latest Pneumococcal Dose&quot; is not null
    and duration in weeks between &quot;Date of Latest Pneumococcal Dose&quot; and Today &lt; 8

/*
@input: The latest pneumococcal dose was administered more than 8 weeks ago
@pseudocode: Today's date âˆ’ &quot;Date and time of vaccination&quot; (where &quot;Vaccine type&quot; = &quot;Pneumococcal vaccines&quot;) â‰¥ 8 weeks
@decision: 2 primary doses with a booster dose (2p+1)
@decision: 3 primary doses (3p+0)
*/
define &quot;The latest pneumococcal dose was administered more than 8 weeks ago&quot;:
  not &quot;The latest pneumococcal dose was administered less than 8 weeks ago&quot;


/*
@input: Client is at high risk for pneumococcal infection
@pseudocode: &quot;At high risk for pneumococcal infection&quot; = TRUE
@decision: 2 primary doses with a booster dose (2p+1)
@decision: 3 primary doses (3p+0)
*/
define &quot;Client is at high risk for pneumococcal infection&quot;:
  Encounter.&quot;Client is at high risk for pneumococcal infection&quot;

/*
@input: Client is not at high risk for pneumococcal infection
@pseudocode: &quot;At high risk for pneumococcal infection&quot; = FALSE
@decision: 2 primary doses with a booster dose (2p+1)
@decision: 3 primary doses (3p+0)
*/
define &quot;Client is not at high risk for pneumococcal infection&quot;:
  Encounter.&quot;Client is not at high risk for pneumococcal infection&quot;

/*
@input: Client's HIV status is positive
@pseudocode: &quot;HIV status&quot; = &quot;HIV-positive&quot;
@decision: 2 primary doses with a booster dose (2p+1)
@decision: 3 primary doses (3p+0)
*/
define &quot;Client's HIV status is positive&quot;:
  Encounter.&quot;Client's HIV status is positive&quot;

/*
@input: Client's HIV status is negative or unknown
@pseudocode: &quot;HIV status&quot; â‰  &quot;HIV-positive&quot;
@decision: 2 primary doses with a booster dose (2p+1)
@decision: 3 primary doses (3p+0)
*/
define &quot;Client's HIV status is negative or unknown&quot;:
  Encounter.&quot;Client's HIV status is negative or unknown&quot;

/*
@input: Client had preterm birth
@pseudocode: &quot;Preterm birth&quot; = TRUE
@decision: 2 primary doses with a booster dose (2p+1)
@decision: 3 primary doses (3p+0)
*/
define &quot;Client had preterm birth&quot;:
  Encounter.&quot;Client was a premature infant at birth&quot;

/*
@input: Client did not have preterm birth
@pseudocode: &quot;Preterm birth&quot; â‰  TRUE
@decision: 2 primary doses with a booster dose (2p+1)
@decision: 3 primary doses (3p+0)
*/
define &quot;Client did not have preterm birth&quot;:
  Encounter.&quot;Client was not a premature infant at birth&quot;

</code></pre></td></tr>
            </table>
          </td>
        </tr>
        
        
        
        
        
        <tr>
          <td colspan="2">
            <table>
              <tr><th><b>Content: </b> application/elm+xml</th></tr>
              <tr><td><pre><code>Encoded data (117884 characters)</code></pre></td></tr>
            </table>
          </td>
        </tr>
        
        
    </table>
</div>
</div>
  </text>
  <extension url="http://hl7.org/fhir/StructureDefinition/cqf-knowledgeCapability">
    <valueCode value="computable"/>
  </extension>
  <url value="http://smart.who.int/immunizations/Library/IMMZD2DTPneumococcalEncounterElements"/>
  <version value="0.2.0"/>
  <name value="IMMZD2DTPneumococcalEncounterElements"/>
  <title value="IMMZD2DTPneumococcalEncounterElements"/>
  <status value="draft"/>
  <experimental value="true"/>
  <type>
    <coding>
      <system value="http://terminology.hl7.org/CodeSystem/library-type"/>
      <code value="logic-library"/>
    </coding>
  </type>
  <date value="2025-07-02T07:24:46+00:00"/>
  <publisher value="WHO"/>
  <contact>
    <name value="WHO"/>
    <telecom>
      <system value="url"/>
      <value value="http://who.int"/>
    </telecom>
  </contact>
  <description value="This library defines encounter-based elements for Pneumococcal used throughout the Immunization CPG"/>
  <relatedArtifact>
    <type value="depends-on"/>
    <display value="Library WHOConcepts"/>
    <resource value="http://smart.who.int/immunizations/Library/WHOConcepts"/>
  </relatedArtifact>
  <relatedArtifact>
    <type value="depends-on"/>
    <display value="Library WC"/>
    <resource value="http://smart.who.int/immunizations/Library/WHOCommon"/>
  </relatedArtifact>
  <relatedArtifact>
    <type value="depends-on"/>
    <display value="Library WE"/>
    <resource value="http://smart.who.int/immunizations/Library/WHOElements"/>
  </relatedArtifact>
  <relatedArtifact>
    <type value="depends-on"/>
    <display value="Library Common"/>
    <resource value="http://smart.who.int/immunizations/Library/IMMZCommon"/>
  </relatedArtifact>
  <relatedArtifact>
    <type value="depends-on"/>
    <display value="Library Concepts"/>
    <resource value="http://smart.who.int/immunizations/Library/IMMZConcepts"/>
  </relatedArtifact>
  <relatedArtifact>
    <type value="depends-on"/>
    <display value="Library Encounter"/>
    <resource value="http://smart.who.int/immunizations/Library/IMMZEncounterElements"/>
  </relatedArtifact>
  <relatedArtifact>
    <type value="depends-on"/>
    <display value="Library PneumococcalElements"/>
    <resource value="http://smart.who.int/immunizations/Library/IMMZD2DTPneumococcalElements"/>
  </relatedArtifact>
  <parameter>
    <name value="Today"/>
    <use value="in"/>
    <min value="0"/>
    <max value="1"/>
    <type value="date"/>
  </parameter>
  <parameter>
    <name value="EncounterId"/>
    <use value="in"/>
    <min value="0"/>
    <max value="1"/>
    <type value="string"/>
  </parameter>
  <parameter>
    <name value="Patient"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="Patient"/>
  </parameter>
  <parameter>
    <name value="Pneumococcal Doses Administered to Patient"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Immunization"/>
  </parameter>
  <parameter>
    <name value="Date of First Pneumococcal Dose"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="date"/>
  </parameter>
  <parameter>
    <name value="Date of Latest Pneumococcal Dose"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="date"/>
  </parameter>
  <parameter>
    <name value="Pneumococcal Primary Series Doses Administered to Patient"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Immunization"/>
  </parameter>
  <parameter>
    <name value="Number of Pneumococcal Primary Series Doses Administered"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="integer"/>
  </parameter>
  <parameter>
    <name value="No pneumococcal primary series doses were administered"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="One pneumococcal primary series dose was administered"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Two pneumococcal primary series doses were administered"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Three pneumococcal primary series doses were administered"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Pneumococcal Booster Series Doses Administered to Patient"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Immunization"/>
  </parameter>
  <parameter>
    <name value="Number of Pneumococcal Booster Series Doses Administered"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="integer"/>
  </parameter>
  <parameter>
    <name value="No pneumococcal booster dose was administered"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="One pneumococcal booster dose was administered"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Two pneumococcal booster doses were administered"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="The client's age is less than 6 weeks"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="The client's age is between 6 weeks and 5 years"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="The client's age is less than or equal to 5 years"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="The client's age is less than or equal to five years"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="The client's age is less than 12 months"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="The client's age is more than or equal to 12 months and less than 24 months"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="The client's age is less than 24 months"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="The client's age is more than or equal to 24 months"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="The client's age is more than 5 years"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="The first pneumococcal dose was administered within 24 months post birth"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="The first pneumococcal dose was administered after 24 months post birth"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="The first pneumococcal dose was administered within 12 months post birth"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="The first pneumococcal dose was administered after 12 months post birth"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="The first pneumococcal dose was administered at 12â€“24 months post birth"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="The latest pneumococcal dose was administered within 12 months post birth"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="The latest pneumococcal dose was administered after 12 months post birth"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="The latest pneumococcal dose was administered less than 4 weeks ago"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="The latest pneumococcal dose was administered more than 4 weeks ago"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="The latest pneumococcal dose was administered less than 8 weeks ago"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="The latest pneumococcal dose was administered more than 8 weeks ago"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Client is at high risk for pneumococcal infection"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Client is not at high risk for pneumococcal infection"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Client's HIV status is positive"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Client's HIV status is negative or unknown"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Client had preterm birth"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Client did not have preterm birth"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <content>
    <contentType value="text/cql"/>
    <data value=""/>
  </content>
  <content>
    <contentType value="application/elm+xml"/>
    <data value=""/>
  </content>
</Library>