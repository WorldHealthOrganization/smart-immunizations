<?xml version="1.0" encoding="UTF-8"?>

<Library xmlns="http://hl7.org/fhir">
  <id value="IMMZElements"/>
  <meta>
    <profile value="http://hl7.org/fhir/uv/crmi/StructureDefinition/crmi-shareablelibrary"/>
    <profile value="http://hl7.org/fhir/uv/crmi/StructureDefinition/crmi-publishablelibrary"/>
    <profile value="http://hl7.org/fhir/uv/cql/StructureDefinition/cql-library"/>
    <profile value="http://hl7.org/fhir/uv/cql/StructureDefinition/cql-module"/>
  </meta>
  <text>
    <status value="extensions"/><div xmlns="http://www.w3.org/1999/xhtml">
<div>
    <table class="grid dict">
        
        
        <tr>
            <th scope="row"><b>Title: </b></th>
            <td style="padding-left: 4px;">IMMZElements</td>
        </tr>
        

        
        
        <tr>
            <th scope="row"><b>Id: </b></th>
            <td style="padding-left: 4px;">IMMZElements</td>
        </tr>
        

        
        
        <tr>
            <th scope="row"><b>Version: </b></th>
            <td style="padding-left: 4px;">0.2.0</td>
        </tr>
        

        
        <tr>
            <th scope="row"><b>Url: </b></th>
            <td style="padding-left: 4px;"><a href="Library-IMMZElements.html">IMMZElements</a></td>
        </tr>
        

        

        

        
        <tr>
            <th scope="row"><b>Status: </b></th>
            <td style="padding-left: 4px;">draft</td>
        </tr>
        

        
        <tr>
            <th scope="row"><b>Experimental: </b></th>
            <td style="padding-left: 4px;">true</td>
        </tr>
        

        
        <tr>
            <th scope="row"><b>Type: </b></th>
            <td style="padding-left: 4px;">
                
                    
                        
                        <p style="margin-bottom: 5px;">
                            <b>system: </b> <span><a href="http://terminology.hl7.org/6.0.2/CodeSystem-library-type.html">http://terminology.hl7.org/CodeSystem/library-type</a></span>
                        </p>
                        
                        
                        <p style="margin-bottom: 5px;">
                            <b>code: </b> <span>logic-library</span>
                        </p>
                        
                        
                    
                
                
            </td>
        </tr>
        

        

        
        <tr>
            <th scope="row"><b>Date: </b></th>
            <td style="padding-left: 4px;">2025-07-02 07:24:46+0000</td>
        </tr>
        

        
        <tr>
            <th scope="row"><b>Publisher: </b></th>
            <td style="padding-left: 4px;">WHO</td>
        </tr>
        

        
        <tr>
            <th scope="row"><b>Description: </b></th>
            <td style="padding-left: 4px;"><div><p>This library defines context-independent elements used throughout the Immunization CPG</p>
</div></td>
        </tr>
        

        

        

        

        

        

        

        

        

        

        

        
        <tr>
            <th scope="row"><b>Related Artifacts: </b></th>
            <td style="padding-left: 4px;">
                
                
                
                <p><b>Dependencies</b></p>
                <ul>
                  
                    <li><a href="Library-WHOConcepts.html">WHOConcepts</a></li>
                  
                    <li><a href="Library-WHOCommon.html">WHOCommon</a></li>
                  
                    <li><a href="Library-WHOElements.html">WHOElements</a></li>
                  
                    <li><a href="Library-IMMZConcepts.html">IMMZConcepts</a></li>
                  
                    <li><a href="Library-IMMZCommon.html">IMMZCommon</a></li>
                  
                </ul>
                
                
                
                
                
            </td>
        </tr>
        

        
        <tr>
          <th scope="row"><b>Parameters: </b></th>
          <td style="padding-left: 4px;">
            <table class="grid-dict">
              <tr><th><b>Name</b></th><th><b>Type</b></th><th><b>Min</b></th><th><b>Max</b></th><th><b>In/Out</b></th></tr>
              
                <tr><th>Patient</th><th>Patient</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Doses Administered to Patient</th><th>Immunization</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>Draft Medication Request for Patient</th><th>MedicationRequest</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>Live Attenuated Vaccines</th><th>Immunization</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>Date of Latest Live Attenuated Vaccine</th><th>date</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Current Patient Age In Years</th><th>integer</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Current Patient Age In Months</th><th>integer</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Current Patient Age In Weeks</th><th>integer</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Current Patient Age In Days</th><th>integer</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>No live vaccine was administered</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Live vaccine was administered in the last 4 weeks</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>No live vaccine was administered in the last 4 weeks</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Potential contraindications</th><th>Observation</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>CI Currently pregnant Observation</th><th>Observation</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>CI Currently pregnant Condition</th><th>Condition</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>The client is pregnant</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>CI History of anaphylactic reactions Observation</th><th>Observation</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>CI History of anaphylactic reactions Condition</th><th>Condition</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>The client has history of anaphylactic reactions</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>CI Severe allergic reactions Observation</th><th>Observation</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>CI Severe allergic reactions Condition</th><th>Condition</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>The client has history of severe allergic reactions</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>CI Severely immunocompromised Observation</th><th>Observation</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>CI Severely immunocompromised Condition</th><th>Condition</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>The client is severely immunocompromised</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>CI Severely immunosuppressed Observation</th><th>Observation</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>CI Severely immunosuppressed Condition</th><th>Condition</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>The client is severely immunosuppressed</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>CI Symptomatic HIV infection Observation</th><th>Observation</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>CI Symptomatic HIV infection Condition</th><th>Condition</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>The client has a symptomatic HIV infection</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>CI Immunodeficiency syndromes Observation</th><th>Observation</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>CI Immunodeficiency syndromes Condition</th><th>Condition</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>The client has immunodeficiency syndromes</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>CI Exposed to immunosuppressive treatment Observation</th><th>Observation</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>CI Exposed to immunosuppressive treatment Condition</th><th>Condition</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>The client is exposed to immunosuppressive treatment</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>CI Severe acute illness Observation</th><th>Observation</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>CI Severe acute illness Condition</th><th>Condition</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>The client currently has a severe acute illness</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>CI Prior history of intussusception Observation</th><th>Observation</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>CI Prior history of intussusception Condition</th><th>Condition</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>The client has prior history of intussusception</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>CI Altered immunocompetence Observation</th><th>Observation</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>CI Altered immunocompetence Condition</th><th>Condition</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>The client has altered immunocompetence</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>CI Spina bifida Observation</th><th>Observation</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>CI Spina bifida Condition</th><th>Condition</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>The client has spina bifida</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>CI Bladder exstrophy Observation</th><th>Observation</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>CI Bladder exstrophy Condition</th><th>Condition</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>The client has bladder exstrophy</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Immunocompromised Observation</th><th>Observation</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>Client is immunocompromised</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>CI Immunocompromised Observation</th><th>Observation</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>CI Immunocompromised Condition</th><th>Condition</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>The client is immunocompromised</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>CI Planning to get pregnant in the next month Observation</th><th>Observation</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>CI Planning to get pregnant in the next month Condition</th><th>Condition</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>The client is planning to get pregnant in next month</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>CI Receiving blood products Observation</th><th>Observation</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>CI Receiving blood products Condition</th><th>Condition</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>The client is receiving blood products</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>CI TB disease Observation</th><th>Observation</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>CI TB disease Condition</th><th>Condition</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>The client has TB disease</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>CI Breastfeeding Observation</th><th>Observation</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>CI Breastfeeding Condition</th><th>Condition</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>The client is lactating</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>CI Acute gastroenteritis Observation</th><th>Observation</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>CI Acute gastroenteritis Condition</th><th>Condition</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>The client has acute gastroenteritis</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>CI Moderate to severe fever Observation</th><th>Observation</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>CI Moderate to severe fever Condition</th><th>Condition</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>The client has moderate to severe fever</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>CI Hypersensitivity to vaccine components Observation</th><th>Observation</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>CI Hypersensitivity to vaccine components Condition</th><th>Condition</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>The client has hypersensitivity to any component of the vaccine</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>CI Taking antibiotics Observation</th><th>Observation</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>CI Taking antibiotics Condition</th><th>Condition</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>The client is currently taking antibiotics</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>CI Chronic gastrointestinal disease Observation</th><th>Observation</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>CI Chronic gastrointestinal disease Condition</th><th>Condition</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>The client has chronic gastrointestinal disease</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>HIV status Observation</th><th>Observation</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>Client's HIV status is positive</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Client's HIV status is negative or unknown</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Currently on ART Observation</th><th>Observation</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>Client is currently receiving antiretroviral therapy</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Client is currently not receiving antiretroviral therapy</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Immunologically stable Observation</th><th>Observation</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>Client is immunologically stable</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Client is not immunologically stable</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>TB infection test result Observation</th><th>Observation</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>Client's TB infection test result is negative</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Client's TB infection test result is positive</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Client's TB infection test result is unknown (test not done or no result yet)</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Clinically well Observation</th><th>Observation</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>Client is not clinically well</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Client is clinically well</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Client is not immunocompromised</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Birth weight in grams Observation</th><th>Observation</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>Birth weight in grams Value</th><th>Quantity</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Birth weight in grams</th><th>decimal</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Client's weight at birth was over 2000 g</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Client's weight at birth was below 2000 g</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Preterm birth Observation</th><th>Observation</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>Client was a premature infant at birth</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Client was not a premature infant at birth</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Completed the primary vaccination series Observation</th><th>Observation</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>At high risk for pneumococcal infection Observation</th><th>Observation</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>Client is at high risk for pneumococcal infection</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Client is not at high risk for pneumococcal infection</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Date when primary vaccination series was completed Observation</th><th>Observation</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>Completed the booster series Observation</th><th>Observation</th><th>0</th><th>*</th><th>Out</th></tr>
              
            </table>
          </td>
        </tr>
        

        

        
        
        <tr>
          <td colspan="2">
            <table>
              <tr><th><a id="cql-content"><b>Content: </b></a> text/cql</th></tr>
              <tr><td><pre><code class="language-cql">library IMMZElements

using FHIR version '4.0.1'

include FHIRHelpers version '4.0.1'

include WHOConcepts
include WHOCommon called WC
include WHOElements called WE

include IMMZConcepts called Concepts
include IMMZCommon called Common

context Patient

/**
 * @dataElement All Doses Administered to Patient
 */
define &quot;Doses Administered to Patient&quot;:
  [Immunization] I
    where I.status = 'completed'
    and I.isSubpotent is not true

/*
@dataElement: Draft Medication Request for Patient
*/
define &quot;Draft Medication Request for Patient&quot;:
	[MedicationRequest] MR where MR.status = 'draft' and MR.intent = 'proposal'
	sort by date from (authoredOn as FHIR.dateTime) desc

/*
  @dataElement: Live attenuated vaccines
*/
define &quot;Live Attenuated Vaccines&quot;:
  &quot;Doses Administered to Patient&quot; I 
    where I.vaccineCode in Concepts.&quot;Live Attenuated&quot;

/*
  @dataElement: Date and time of last live attenuated vaccine
*/
define &quot;Date of Latest Live Attenuated Vaccine&quot;:
  date from start of &quot;Live Attenuated Vaccines&quot;.mostRecent().occurrence.toInterval()

/** 
 * @dataElement Patient age in years
 */
define &quot;Current Patient Age In Years&quot;:
  AgeInYearsAt(Today())

/** 
 * @dataElement Patient age in months
 */
define &quot;Current Patient Age In Months&quot;:
  AgeInMonthsAt(Today())

/** 
 * @dataElement Patient age in weeks
 */
define &quot;Current Patient Age In Weeks&quot;:
  AgeInWeeksAt(Today())

/** 
 * @dataElement Patient age in days
 */
define &quot;Current Patient Age In Days&quot;:
  AgeInDaysAt(Today())

/*
@input: No live vaccine was administered
@pseudocode: Today's date − latest &quot;Date and time of vaccination&quot; (where &quot;Live vaccine&quot; = TRUE) IS NULL
*/
define &quot;No live vaccine was administered&quot;:
  not exists(&quot;Live Attenuated Vaccines&quot;)

/*
@input: Live vaccine was administered in the last 4 weeks
@pseudocode: Today's date − latest &quot;Date and time of vaccination&quot; (where &quot;Live vaccine&quot; = TRUE) &lt; 4 weeks
*/
define &quot;Live vaccine was administered in the last 4 weeks&quot;:
	&quot;Date of Latest Live Attenuated Vaccine&quot; is not null 
    and duration in weeks between &quot;Date of Latest Live Attenuated Vaccine&quot; and Now() &lt; 4

/*
@input: No live vaccine was administered in the last 4 weeks
@pseudocode: Today's date − latest &quot;Date and time of vaccination&quot; (where &quot;Live vaccine&quot; = TRUE) ≥ 4 weeks
*/
define &quot;No live vaccine was administered in the last 4 weeks&quot;:
  not(&quot;Live vaccine was administered in the last 4 weeks&quot;)

/*
@internal: Potential contraindications observations
*/
define &quot;Potential contraindications&quot;:
  ([Observation: Concepts.&quot;Potential contraindications&quot;]).complete()

/*
@input: The client is pregnant
@pseudocode: &quot;Potential contraindications&quot; = &quot;Currently pregnant&quot;
*/
define &quot;The client is pregnant&quot;:
  exists &quot;CI Currently pregnant Observation&quot;
  or exists &quot;CI Currently pregnant Condition&quot;
  or exists WE.&quot;Pregnant Observation&quot;

/*
@internal: Observation for currently pregnant
*/
define &quot;CI Currently pregnant Observation&quot;:
  &quot;Potential contraindications&quot; O
    where O.value ~ Concepts.&quot;CI-Currently pregnant&quot;

/*
@internal: Condition for currently pregnant
*/
define &quot;CI Currently pregnant Condition&quot;:
  [Condition: Concepts.&quot;CI-Currently pregnant&quot;]

/*
@input: The client has history of anaphylactic reactions
@pseudocode: &quot;Potential contraindications&quot; = &quot;History of anaphylactic reactions&quot;
*/
define &quot;The client has history of anaphylactic reactions&quot;:
  exists &quot;CI History of anaphylactic reactions Observation&quot;
    or exists &quot;CI History of anaphylactic reactions Condition&quot;

/*
@internal: Observation for History of anaphylactic reactions
*/
define &quot;CI History of anaphylactic reactions Observation&quot;:
  &quot;Potential contraindications&quot; O
    where O.value ~ Concepts.&quot;CI-History of anaphylactic reactions&quot;

/*
@internal: Condition for History of anaphylactic reactions
*/
define &quot;CI History of anaphylactic reactions Condition&quot;:
  [Condition: Concepts.&quot;CI-History of anaphylactic reactions&quot;]


/*
@input: The client has history of severe allergic reactions
@pseudocode: &quot;Potential contraindications&quot; = &quot;Severe allergic reactions&quot;
*/
define &quot;The client has history of severe allergic reactions&quot;:
  exists &quot;CI Severe allergic reactions Observation&quot;
    or exists &quot;CI Severe allergic reactions Condition&quot;
    
/*
@internal: Observation for Severe allergic reactions
*/
define &quot;CI Severe allergic reactions Observation&quot;:
  &quot;Potential contraindications&quot; O
    where O.value ~ Concepts.&quot;CI-Severe allergic reactions&quot;

/*
@internal: Condition for Severe allergic reactions
*/
define &quot;CI Severe allergic reactions Condition&quot;:
  [Condition: Concepts.&quot;CI-Severe allergic reactions&quot;]

/*
@input: The client is severely immunocompromised
@pseudocode: &quot;Potential contraindications&quot; = &quot;Severely immunocompromised&quot;
*/
define &quot;The client is severely immunocompromised&quot;:
  exists &quot;CI Severely immunocompromised Observation&quot;
    or exists &quot;CI Severely immunocompromised Condition&quot;
    
/*
@internal: Observation for Severely immunocompromised
*/
define &quot;CI Severely immunocompromised Observation&quot;:
  &quot;Potential contraindications&quot; O
    where O.value ~ Concepts.&quot;CI-Severely immunocompromised&quot;

/*
@internal: Condition for Severely immunocompromised
*/
define &quot;CI Severely immunocompromised Condition&quot;:
  [Condition: Concepts.&quot;CI-Severely immunocompromised&quot;]

/*
@input: The client is severely immunosuppressed
@pseudocode: &quot;Potential contraindications&quot; = &quot;Severely immunosuppressed&quot;
*/
define &quot;The client is severely immunosuppressed&quot;:
  exists &quot;CI Severely immunosuppressed Observation&quot;
    or exists &quot;CI Severely immunosuppressed Condition&quot;
    
/*
@internal: Observation for Severely immunosuppressed
*/
define &quot;CI Severely immunosuppressed Observation&quot;:
  &quot;Potential contraindications&quot; O
    where O.value ~ Concepts.&quot;CI-Severely immunosuppressed&quot;

/*
@internal: Condition for Severely immunosuppressed
*/
define &quot;CI Severely immunosuppressed Condition&quot;:
  [Condition: Concepts.&quot;CI-Severely immunosuppressed&quot;]

/*
@input: The client has a symptomatic HIV infection
@pseudocode: &quot;Potential contraindications&quot; = &quot;Symptomatic HIV infection&quot;
*/
define &quot;The client has a symptomatic HIV infection&quot;:
  exists &quot;CI Symptomatic HIV infection Observation&quot;
    or exists &quot;CI Symptomatic HIV infection Condition&quot;
    
/*
@internal: Observation for Symptomatic HIV infection
*/
define &quot;CI Symptomatic HIV infection Observation&quot;:
  &quot;Potential contraindications&quot; O
    where O.value ~ Concepts.&quot;CI-Symptomatic HIV infection&quot;

/*
@internal: Condition for Symptomatic HIV infection
*/
define &quot;CI Symptomatic HIV infection Condition&quot;:
  [Condition: Concepts.&quot;CI-Symptomatic HIV infection&quot;]

/*
@input: The client has immunodeficiency syndromes
@pseudocode: &quot;Potential contraindications&quot; = &quot;Immunodeficiency syndromes&quot;
*/
define &quot;The client has immunodeficiency syndromes&quot;:
  exists &quot;CI Immunodeficiency syndromes Observation&quot;
    or exists &quot;CI Immunodeficiency syndromes Condition&quot;
    
/*
@internal: Observation for Immunodeficiency syndromes
*/
define &quot;CI Immunodeficiency syndromes Observation&quot;:
  &quot;Potential contraindications&quot; O
    where O.value ~ Concepts.&quot;CI-Immunodeficiency syndromes&quot;

/*
@internal: Condition for Immunodeficiency syndromes
*/
define &quot;CI Immunodeficiency syndromes Condition&quot;:
  [Condition: Concepts.&quot;CI-Immunodeficiency syndromes&quot;]

/*
@input: The client is exposed to immunosuppressive treatment
@pseudocode: &quot;Potential contraindications&quot; = &quot;Exposed to immunosuppressive treatment&quot;
*/
define &quot;The client is exposed to immunosuppressive treatment&quot;:
  exists &quot;CI Exposed to immunosuppressive treatment Observation&quot;
    or exists &quot;CI Exposed to immunosuppressive treatment Condition&quot;
    
/*
@internal: Observation for Exposed to immunosuppressive treatment
*/
define &quot;CI Exposed to immunosuppressive treatment Observation&quot;:
  &quot;Potential contraindications&quot; O
    where O.value ~ Concepts.&quot;CI-Exposed to immunosuppressive treatment&quot;

/*
@internal: Condition for Exposed to immunosuppressive treatment
*/
define &quot;CI Exposed to immunosuppressive treatment Condition&quot;:
  [Condition: Concepts.&quot;CI-Exposed to immunosuppressive treatment&quot;]

/*
@input: The client currently has a severe acute illness
@pseudocode: &quot;Potential contraindications&quot; = &quot;Severe acute illness&quot;
*/
define &quot;The client currently has a severe acute illness&quot;:
  exists &quot;CI Severe acute illness Observation&quot;
    or exists &quot;CI Severe acute illness Condition&quot;
    
/*
@internal: Observation for Severe acute illness
*/
define &quot;CI Severe acute illness Observation&quot;:
  &quot;Potential contraindications&quot; O
    where O.value ~ Concepts.&quot;CI-Severe acute illness&quot;

/*
@internal: Condition for Severe acute illness
*/
define &quot;CI Severe acute illness Condition&quot;:
  [Condition: Concepts.&quot;CI-Severe acute illness&quot;]

/*
@input: The client has prior history of intussusception
@pseudocode: &quot;Potential contraindications&quot; = &quot;Prior history of intussusception&quot;
*/
define &quot;The client has prior history of intussusception&quot;:
  exists &quot;CI Prior history of intussusception Observation&quot;
    or exists &quot;CI Prior history of intussusception Condition&quot;
    
/*
@internal: Observation for Prior history of intussusception
*/
define &quot;CI Prior history of intussusception Observation&quot;:
  &quot;Potential contraindications&quot; O
    where O.value ~ Concepts.&quot;CI-Prior history of intussusception&quot;

/*
@internal: Condition for Prior history of intussusception
*/
define &quot;CI Prior history of intussusception Condition&quot;:
  [Condition: Concepts.&quot;CI-Prior history of intussusception&quot;]

/*
@input: The client has altered immunocompetence
@pseudocode: &quot;Potential contraindications&quot; = &quot;Altered immunocompetence&quot;
*/
define &quot;The client has altered immunocompetence&quot;:
  exists &quot;CI Altered immunocompetence Observation&quot;
    or exists &quot;CI Altered immunocompetence Condition&quot;
    
/*
@internal: Observation for Altered immunocompetence
*/
define &quot;CI Altered immunocompetence Observation&quot;:
  &quot;Potential contraindications&quot; O
    where O.value ~ Concepts.&quot;CI-Altered immunocompetence&quot;

/*
@internal: Condition for Altered immunocompetence
*/
define &quot;CI Altered immunocompetence Condition&quot;:
  [Condition: Concepts.&quot;CI-Altered immunocompetence&quot;]

/*
@input: The client has spina bifida
@pseudocode: &quot;Potential contraindications&quot; = &quot;Spina bifida&quot;
*/
define &quot;The client has spina bifida&quot;:
  exists &quot;CI Spina bifida Observation&quot;
    or exists &quot;CI Spina bifida Condition&quot;
    
/*
@internal: Observation for Spina bifida
*/
define &quot;CI Spina bifida Observation&quot;:
  &quot;Potential contraindications&quot; O
    where O.value ~ Concepts.&quot;CI-Spina bifida&quot;

/*
@internal: Condition for Spina bifida
*/
define &quot;CI Spina bifida Condition&quot;:
  [Condition: Concepts.&quot;CI-Spina bifida&quot;]

/*
@input: The client has bladder exstrophy
@pseudocode: &quot;Potential contraindications&quot; = &quot;Bladder exstrophy&quot;
*/
define &quot;The client has bladder exstrophy&quot;:
  exists &quot;CI Bladder exstrophy Observation&quot;
    or exists &quot;CI Bladder exstrophy Condition&quot;
    
/*
@internal: Observation for Bladder exstrophy
*/
define &quot;CI Bladder exstrophy Observation&quot;:
  &quot;Potential contraindications&quot; O
    where O.value ~ Concepts.&quot;CI-Bladder exstrophy&quot;

/*
@internal: Condition for Bladder exstrophy
*/
define &quot;CI Bladder exstrophy Condition&quot;:
  [Condition: Concepts.&quot;CI-Bladder exstrophy&quot;]

/*
@input: The client is immunocompromised
@pseudocode: &quot;Potential contraindications&quot; = &quot;Immunocompromised&quot;
*/
define &quot;The client is immunocompromised&quot;:
  &quot;Client is immunocompromised&quot;
    or exists &quot;CI Immunocompromised Observation&quot;
    or exists &quot;CI Immunocompromised Condition&quot;

/*
@internal: Observation for Immunocompromised
*/
define &quot;CI Immunocompromised Observation&quot;:
  &quot;Potential contraindications&quot; O
    where O.value ~ Concepts.&quot;CI-Immunocompromised&quot;

/*
@internal: Condition for Immunocompromised
*/
define &quot;CI Immunocompromised Condition&quot;:
  [Condition: Concepts.&quot;CI-Immunocompromised&quot;]


/*
@input: The client is planning to get pregnant in next month
@pseudocode: &quot;Potential contraindications&quot; = &quot;Planning to get pregnant in the next month&quot;
*/
define &quot;The client is planning to get pregnant in next month&quot;:
  exists &quot;CI Planning to get pregnant in the next month Observation&quot;
    or exists &quot;CI Planning to get pregnant in the next month Condition&quot;

/*
@internal: Observation for Planning to get pregnant in the next month
*/
define &quot;CI Planning to get pregnant in the next month Observation&quot;:
  &quot;Potential contraindications&quot; O
    where O.value ~ Concepts.&quot;CI-Planning to get pregnant in the next month&quot;

/*
@internal: Condition for Planning to get pregnant in the next month
*/
define &quot;CI Planning to get pregnant in the next month Condition&quot;:
  [Condition: Concepts.&quot;CI-Planning to get pregnant in the next month&quot;]


/*
@input: The client is receiving blood products
@pseudocode: &quot;Potential contraindications&quot; = &quot;Receiving blood products&quot;
*/
define &quot;The client is receiving blood products&quot;:
  exists &quot;CI Receiving blood products Observation&quot;
    or exists &quot;CI Receiving blood products Condition&quot;

/*
@internal: Observation for Receiving blood products
*/
define &quot;CI Receiving blood products Observation&quot;:
  &quot;Potential contraindications&quot; O
    where O.value ~ Concepts.&quot;CI-Receiving blood products&quot;

/*
@internal: Condition for Receiving blood products
*/
define &quot;CI Receiving blood products Condition&quot;:
  [Condition: Concepts.&quot;CI-Receiving blood products&quot;]


/*
@input: The client has TB disease
@pseudocode: &quot;Potential contraindications&quot; = &quot;TB disease&quot;
*/
define &quot;The client has TB disease&quot;:
  exists &quot;CI TB disease Observation&quot;
    or exists &quot;CI TB disease Condition&quot;

/*
@internal: Observation for TB disease
*/
define &quot;CI TB disease Observation&quot;:
  &quot;Potential contraindications&quot; O
    where O.value ~ Concepts.&quot;CI-TB disease&quot;

/*
@internal: Condition for TB disease
*/
define &quot;CI TB disease Condition&quot;:
  [Condition: Concepts.&quot;CI-TB disease&quot;]


/*
@input: The client is lactating
@pseudocode: &quot;Potential contraindications&quot; = &quot;Breastfeeding&quot;
*/
define &quot;The client is lactating&quot;:
  exists &quot;CI Breastfeeding Observation&quot;
    or exists &quot;CI Breastfeeding Condition&quot;

/*
@internal: Observation for Breastfeeding
*/
define &quot;CI Breastfeeding Observation&quot;:
  &quot;Potential contraindications&quot; O
    where O.value ~ Concepts.&quot;CI-Breastfeeding&quot;

/*
@internal: Condition for Breastfeeding
*/
define &quot;CI Breastfeeding Condition&quot;:
  [Condition: Concepts.&quot;CI-Breastfeeding&quot;]


/*
@input: The client has acute gastroenteritis
@pseudocode: &quot;Potential contraindications&quot; = &quot;Acute gastroenteritis&quot;
*/
define &quot;The client has acute gastroenteritis&quot;:
  exists &quot;CI Acute gastroenteritis Observation&quot;
    or exists &quot;CI Acute gastroenteritis Condition&quot;

/*
@internal: Observation for Acute gastroenteritis
*/
define &quot;CI Acute gastroenteritis Observation&quot;:
  &quot;Potential contraindications&quot; O
    where O.value ~ Concepts.&quot;CI-Acute gastroenteritis&quot;

/*
@internal: Condition for Acute gastroenteritis
*/
define &quot;CI Acute gastroenteritis Condition&quot;:
  [Condition: Concepts.&quot;CI-Acute gastroenteritis&quot;]


/*
@input: The client has moderate to severe fever
@pseudocode: &quot;Potential contraindications&quot; = &quot;Moderate to severe fever&quot;
*/
define &quot;The client has moderate to severe fever&quot;:
  exists &quot;CI Moderate to severe fever Observation&quot;
    or exists &quot;CI Moderate to severe fever Condition&quot;

/*
@internal: Observation for Moderate to severe fever
*/
define &quot;CI Moderate to severe fever Observation&quot;:
  &quot;Potential contraindications&quot; O
    where O.value ~ Concepts.&quot;CI-Moderate to severe fever&quot;

/*
@internal: Condition for Moderate to severe fever
*/
define &quot;CI Moderate to severe fever Condition&quot;:
  [Condition: Concepts.&quot;CI-Moderate to severe fever&quot;]


/*
@input: The client has hypersensitivity to any component of the vaccine
@pseudocode: &quot;Potential contraindications&quot; = &quot;Hypersensitivity to vaccine components&quot;
*/
define &quot;The client has hypersensitivity to any component of the vaccine&quot;:
  exists &quot;CI Hypersensitivity to vaccine components Observation&quot;
    or exists &quot;CI Hypersensitivity to vaccine components Condition&quot;

/*
@internal: Observation for Hypersensitivity to vaccine components
*/
define &quot;CI Hypersensitivity to vaccine components Observation&quot;:
  &quot;Potential contraindications&quot; O
    where O.value ~ Concepts.&quot;CI-Hypersensitivity to vaccine components&quot;

/*
@internal: Condition for Hypersensitivity to vaccine components
*/
define &quot;CI Hypersensitivity to vaccine components Condition&quot;:
  [Condition: Concepts.&quot;CI-Hypersensitivity to vaccine components&quot;]


/*
@input: The client is currently taking antibiotics
@pseudocode: &quot;Potential contraindications&quot; = &quot;Taking antibiotics&quot;
*/
define &quot;The client is currently taking antibiotics&quot;:
  exists &quot;CI Taking antibiotics Observation&quot;
    or exists &quot;CI Taking antibiotics Condition&quot;

/*
@internal: Observation for Taking antibiotics
*/
define &quot;CI Taking antibiotics Observation&quot;:
  &quot;Potential contraindications&quot; O
    where O.value ~ Concepts.&quot;CI-Taking antibiotics&quot;

/*
@internal: Condition for Taking antibiotics
*/
define &quot;CI Taking antibiotics Condition&quot;:
  [Condition: Concepts.&quot;CI-Taking antibiotics&quot;]

/*
@input: The client has chronic gastrointestinal disease
@pseudocode: &quot;Potential contraindications&quot; = &quot;Chronic gastrointestinal disease&quot;
*/
define &quot;The client has chronic gastrointestinal disease&quot;:
  exists &quot;CI Chronic gastrointestinal disease Observation&quot;
    or exists &quot;CI Chronic gastrointestinal disease Condition&quot;

/*
@internal: Observation for Chronic gastrointestinal disease
*/
define &quot;CI Chronic gastrointestinal disease Observation&quot;:
  &quot;Potential contraindications&quot; O
    where O.value ~ Concepts.&quot;CI-Chronic gastrointestinal disease&quot;

/*
@internal: Condition for Chronic gastrointestinal disease
*/
define &quot;CI Chronic gastrointestinal disease Condition&quot;:
  [Condition: Concepts.&quot;CI-Chronic gastrointestinal disease&quot;]



/*
@internal: HIV Status Observation
*/
define &quot;HIV status Observation&quot;:
  ([Observation: Concepts.&quot;HIV status&quot;]).complete()

/*
@input: Client's HIV status is negative or unknown
@pseudocode: &quot;HIV status&quot; ≠ &quot;HIV-positive&quot;
*/
define &quot;Client's HIV status is negative or unknown&quot;:
  not &quot;Client's HIV status is positive&quot;

/*
@input: Client's HIV status is positive
@pseudocode: &quot;HIV status&quot; = &quot;HIV-positive&quot;
*/
define &quot;Client's HIV status is positive&quot;:
  exists( &quot;HIV status Observation&quot; O
    where O.value ~ Concepts.&quot;HIV-positive&quot; )

/*
@internal: Currently on ART Observation
*/
define &quot;Currently on ART Observation&quot;:
  ([Observation: Concepts.&quot;Currently on ART&quot;] O
    sort by end of effective.toInterval() desc).complete()

/*
@input: Client is currently receiving antiretroviral therapy
@pseudocode: &quot;Currently on ART&quot; = TRUE
*/
define &quot;Client is currently receiving antiretroviral therapy&quot;:
  First(&quot;Currently on ART Observation&quot;).value = true

/*
@input: Client is currently not receiving antiretroviral therapy
@pseudocode: &quot;Currently on ART&quot; = FALSE
*/
define &quot;Client is currently not receiving antiretroviral therapy&quot;:
  not &quot;Client is currently receiving antiretroviral therapy&quot;

/*
@internal: Immunologically stable Observation
*/
define &quot;Immunologically stable Observation&quot;:
  ([Observation: Concepts.&quot;Immunologically stable&quot;] O
    sort by end of effective.toInterval() desc).complete()

/*
@input: Client is immunologically stable
@pseudocode: &quot;Immunologically stable&quot; = TRUE
*/
define &quot;Client is immunologically stable&quot;:
  First(&quot;Immunologically stable Observation&quot;).value = true

/*
@input: Client is not immunologically stable
@pseudocode: &quot;Immunologically stable&quot; = FALSE
*/
define &quot;Client is not immunologically stable&quot;:
  First(&quot;Immunologically stable Observation&quot;).value = false

/*
@internal: TB infection test result Observation
*/
define &quot;TB infection test result Observation&quot;:
  ([Observation: Concepts.&quot;TB infection test result&quot;] O
    sort by end of effective.toInterval() desc).complete()

/*
@input: Client's TB infection test result is negative
@pseudocode: &quot;TB infection test result&quot; = &quot;Negative&quot;
*/
define &quot;Client's TB infection test result is negative&quot;:
  First( &quot;TB infection test result Observation&quot; ).value ~ Concepts.&quot;TB-Negative&quot;
/*
@input: Client's TB infection test result is unknown (test not done or no result yet)
@pseudocode: &quot;TB infection test result&quot; IS NULL
*/
define &quot;Client's TB infection test result is unknown (test not done or no result yet)&quot;:
  not exists( &quot;TB infection test result Observation&quot; ) or (
    not (&quot;Client's TB infection test result is negative&quot;) and not (&quot;Client's TB infection test result is positive&quot;)
  )
/*
@input: Client's TB infection test result is positive
@pseudocode: &quot;TB infection test result&quot; = &quot;Positive&quot;
*/
define &quot;Client's TB infection test result is positive&quot;:
  First( &quot;TB infection test result Observation&quot; ).value ~ Concepts.&quot;TB-Positive&quot;

/*
@internal: Clinically well Observation
*/
define &quot;Clinically well Observation&quot;:
  ([Observation: Concepts.&quot;Clinically well&quot;] O
    sort by end of effective.toInterval() desc).complete()

/*
@input: Client is not clinically well
@pseudocode: &quot;Clinically well&quot; = FALSE
*/
define &quot;Client is not clinically well&quot;:
  First( &quot;Clinically well Observation&quot; ).value = false 

/*
@input: Client is clinically well
@pseudocode: &quot;Clinically well&quot; = TRUE
*/
define &quot;Client is clinically well&quot;:
  First( &quot;Clinically well Observation&quot; ).value = true 

/*
@internal: Immunocompromised Observation
*/
define &quot;Immunocompromised Observation&quot;:
  ([Observation: Concepts.&quot;Immunocompromised&quot;] O
    sort by end of effective.toInterval() desc).complete()

/*
@input: Client is immunocompromised
@pseudocode: &quot;Immunocompromised&quot; = TRUE
*/
define &quot;Client is immunocompromised&quot;:
  exists( &quot;Immunocompromised Observation&quot; ) and
  First( &quot;Immunocompromised Observation&quot; ).value = true 

/*
@input: Client is not immunocompromised
@pseudocode: &quot;Immunocompromised&quot; ≠ TRUE
*/
define &quot;Client is not immunocompromised&quot;:
  not &quot;Client is immunocompromised&quot;

/*
@internal: Birth weight in grams Observation
*/
define &quot;Birth weight in grams Observation&quot;:
  ([Observation: Concepts.&quot;Birth weight in grams&quot;] O
    sort by end of effective.toInterval() desc).complete()

define &quot;Birth weight in grams Value&quot;:
  First(&quot;Birth weight in grams Observation&quot; O).value as FHIR.Quantity

define &quot;Birth weight in grams&quot;:
  &quot;Birth weight in grams Value&quot;.value as FHIR.decimal

/*
@input: Client's weight at birth was over 2000 g
@pseudocode: &quot;Birth weight in grams&quot;  ≥ 2000
*/
define &quot;Client's weight at birth was over 2000 g&quot;:
  &quot;Birth weight in grams&quot; &gt;= 2000

/*
@input: Client's weight at birth was below 2000 g
@pseudocode: &quot;Birth weight in grams&quot; &lt; 2000
*/
define &quot;Client's weight at birth was below 2000 g&quot;:
  &quot;Birth weight in grams&quot; &lt; 2000

/*
@internal: Preterm birth Observation
*/
define &quot;Preterm birth Observation&quot;:
  ([Observation: Concepts.&quot;Preterm birth&quot;]).complete()

/*
@input: Client was not a premature infant at birth
@pseudocode: &quot;Preterm birth&quot; ≠  TRUE
*/
define &quot;Client was not a premature infant at birth&quot;:
  not &quot;Client was a premature infant at birth&quot;

/*
@input: Client was a premature infant at birth
@pseudocode: &quot;Preterm birth&quot; =  TRUE
*/
define &quot;Client was a premature infant at birth&quot;:
  exists( &quot;Preterm birth Observation&quot; O where O.value = true )

/*
@internal: Completed the primary vaccination series Observation
*/
define &quot;Completed the primary vaccination series Observation&quot;:
  ([Observation: Concepts.&quot;Completed the primary vaccination series&quot;]).complete()

/*
@internal: At high risk for pneumococcal infection Observation
*/
define &quot;At high risk for pneumococcal infection Observation&quot;:
  ([Observation: Concepts.&quot;At high risk for pneumococcal infection&quot;]).complete()

/*
@input: Client is at high risk for pneumococcal infection
@pseudocode: &quot;At high risk for pneumococcal infection&quot; = TRUE
*/
define &quot;Client is at high risk for pneumococcal infection&quot;:
  exists( &quot;At high risk for pneumococcal infection Observation&quot; O where O.value = true )

/*
@input: Client is not at high risk for pneumococcal infection
@pseudocode: &quot;At high risk for pneumococcal infection&quot; = FALSE
*/
define &quot;Client is not at high risk for pneumococcal infection&quot;:
  exists( &quot;At high risk for pneumococcal infection Observation&quot; O where O.value = false )

/*
@internal: Date when primary vaccination series was completed Observation
*/
define &quot;Date when primary vaccination series was completed Observation&quot;:
  ([Observation: Concepts.&quot;Date when primary vaccination series was completed&quot;] O
    sort by end of effective.toInterval() desc).complete()

/*
@internal: Completed the booster series Observation
*/
define &quot;Completed the booster series Observation&quot;:
  ([Observation: Concepts.&quot;Completed the booster series&quot;]).complete()</code></pre></td></tr>
            </table>
          </td>
        </tr>
        
        
        
        
        
        <tr>
          <td colspan="2">
            <table>
              <tr><th><b>Content: </b> application/elm+xml</th></tr>
              <tr><td><pre><code>Encoded data (360780 characters)</code></pre></td></tr>
            </table>
          </td>
        </tr>
        
        
    </table>
</div>
</div>
  </text>
  <extension url="http://hl7.org/fhir/StructureDefinition/cqf-knowledgeCapability">
    <valueCode value="computable"/>
  </extension>
  <url value="http://smart.who.int/immunizations/Library/IMMZElements"/>
  <version value="0.2.0"/>
  <name value="IMMZElements"/>
  <title value="IMMZElements"/>
  <status value="draft"/>
  <experimental value="true"/>
  <type>
    <coding>
      <system value="http://terminology.hl7.org/CodeSystem/library-type"/>
      <code value="logic-library"/>
    </coding>
  </type>
  <date value="2025-07-02T07:24:46+00:00"/>
  <publisher value="WHO"/>
  <contact>
    <name value="WHO"/>
    <telecom>
      <system value="url"/>
      <value value="http://who.int"/>
    </telecom>
  </contact>
  <description value="This library defines context-independent elements used throughout the Immunization CPG"/>
  <relatedArtifact>
    <type value="depends-on"/>
    <display value="Library WHOConcepts"/>
    <resource value="http://smart.who.int/immunizations/Library/WHOConcepts"/>
  </relatedArtifact>
  <relatedArtifact>
    <type value="depends-on"/>
    <display value="Library WC"/>
    <resource value="http://smart.who.int/immunizations/Library/WHOCommon"/>
  </relatedArtifact>
  <relatedArtifact>
    <type value="depends-on"/>
    <display value="Library WE"/>
    <resource value="http://smart.who.int/immunizations/Library/WHOElements"/>
  </relatedArtifact>
  <relatedArtifact>
    <type value="depends-on"/>
    <display value="Library Concepts"/>
    <resource value="http://smart.who.int/immunizations/Library/IMMZConcepts"/>
  </relatedArtifact>
  <relatedArtifact>
    <type value="depends-on"/>
    <display value="Library Common"/>
    <resource value="http://smart.who.int/immunizations/Library/IMMZCommon"/>
  </relatedArtifact>
  <parameter>
    <name value="Patient"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="Patient"/>
  </parameter>
  <parameter>
    <name value="Doses Administered to Patient"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Immunization"/>
  </parameter>
  <parameter>
    <name value="Draft Medication Request for Patient"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="MedicationRequest"/>
  </parameter>
  <parameter>
    <name value="Live Attenuated Vaccines"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Immunization"/>
  </parameter>
  <parameter>
    <name value="Date of Latest Live Attenuated Vaccine"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="date"/>
  </parameter>
  <parameter>
    <name value="Current Patient Age In Years"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="integer"/>
  </parameter>
  <parameter>
    <name value="Current Patient Age In Months"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="integer"/>
  </parameter>
  <parameter>
    <name value="Current Patient Age In Weeks"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="integer"/>
  </parameter>
  <parameter>
    <name value="Current Patient Age In Days"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="integer"/>
  </parameter>
  <parameter>
    <name value="No live vaccine was administered"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Live vaccine was administered in the last 4 weeks"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="No live vaccine was administered in the last 4 weeks"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Potential contraindications"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Observation"/>
  </parameter>
  <parameter>
    <name value="CI Currently pregnant Observation"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Observation"/>
  </parameter>
  <parameter>
    <name value="CI Currently pregnant Condition"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Condition"/>
  </parameter>
  <parameter>
    <name value="The client is pregnant"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="CI History of anaphylactic reactions Observation"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Observation"/>
  </parameter>
  <parameter>
    <name value="CI History of anaphylactic reactions Condition"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Condition"/>
  </parameter>
  <parameter>
    <name value="The client has history of anaphylactic reactions"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="CI Severe allergic reactions Observation"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Observation"/>
  </parameter>
  <parameter>
    <name value="CI Severe allergic reactions Condition"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Condition"/>
  </parameter>
  <parameter>
    <name value="The client has history of severe allergic reactions"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="CI Severely immunocompromised Observation"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Observation"/>
  </parameter>
  <parameter>
    <name value="CI Severely immunocompromised Condition"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Condition"/>
  </parameter>
  <parameter>
    <name value="The client is severely immunocompromised"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="CI Severely immunosuppressed Observation"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Observation"/>
  </parameter>
  <parameter>
    <name value="CI Severely immunosuppressed Condition"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Condition"/>
  </parameter>
  <parameter>
    <name value="The client is severely immunosuppressed"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="CI Symptomatic HIV infection Observation"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Observation"/>
  </parameter>
  <parameter>
    <name value="CI Symptomatic HIV infection Condition"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Condition"/>
  </parameter>
  <parameter>
    <name value="The client has a symptomatic HIV infection"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="CI Immunodeficiency syndromes Observation"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Observation"/>
  </parameter>
  <parameter>
    <name value="CI Immunodeficiency syndromes Condition"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Condition"/>
  </parameter>
  <parameter>
    <name value="The client has immunodeficiency syndromes"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="CI Exposed to immunosuppressive treatment Observation"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Observation"/>
  </parameter>
  <parameter>
    <name value="CI Exposed to immunosuppressive treatment Condition"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Condition"/>
  </parameter>
  <parameter>
    <name value="The client is exposed to immunosuppressive treatment"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="CI Severe acute illness Observation"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Observation"/>
  </parameter>
  <parameter>
    <name value="CI Severe acute illness Condition"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Condition"/>
  </parameter>
  <parameter>
    <name value="The client currently has a severe acute illness"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="CI Prior history of intussusception Observation"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Observation"/>
  </parameter>
  <parameter>
    <name value="CI Prior history of intussusception Condition"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Condition"/>
  </parameter>
  <parameter>
    <name value="The client has prior history of intussusception"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="CI Altered immunocompetence Observation"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Observation"/>
  </parameter>
  <parameter>
    <name value="CI Altered immunocompetence Condition"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Condition"/>
  </parameter>
  <parameter>
    <name value="The client has altered immunocompetence"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="CI Spina bifida Observation"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Observation"/>
  </parameter>
  <parameter>
    <name value="CI Spina bifida Condition"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Condition"/>
  </parameter>
  <parameter>
    <name value="The client has spina bifida"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="CI Bladder exstrophy Observation"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Observation"/>
  </parameter>
  <parameter>
    <name value="CI Bladder exstrophy Condition"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Condition"/>
  </parameter>
  <parameter>
    <name value="The client has bladder exstrophy"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Immunocompromised Observation"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Observation"/>
  </parameter>
  <parameter>
    <name value="Client is immunocompromised"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="CI Immunocompromised Observation"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Observation"/>
  </parameter>
  <parameter>
    <name value="CI Immunocompromised Condition"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Condition"/>
  </parameter>
  <parameter>
    <name value="The client is immunocompromised"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="CI Planning to get pregnant in the next month Observation"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Observation"/>
  </parameter>
  <parameter>
    <name value="CI Planning to get pregnant in the next month Condition"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Condition"/>
  </parameter>
  <parameter>
    <name value="The client is planning to get pregnant in next month"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="CI Receiving blood products Observation"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Observation"/>
  </parameter>
  <parameter>
    <name value="CI Receiving blood products Condition"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Condition"/>
  </parameter>
  <parameter>
    <name value="The client is receiving blood products"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="CI TB disease Observation"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Observation"/>
  </parameter>
  <parameter>
    <name value="CI TB disease Condition"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Condition"/>
  </parameter>
  <parameter>
    <name value="The client has TB disease"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="CI Breastfeeding Observation"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Observation"/>
  </parameter>
  <parameter>
    <name value="CI Breastfeeding Condition"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Condition"/>
  </parameter>
  <parameter>
    <name value="The client is lactating"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="CI Acute gastroenteritis Observation"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Observation"/>
  </parameter>
  <parameter>
    <name value="CI Acute gastroenteritis Condition"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Condition"/>
  </parameter>
  <parameter>
    <name value="The client has acute gastroenteritis"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="CI Moderate to severe fever Observation"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Observation"/>
  </parameter>
  <parameter>
    <name value="CI Moderate to severe fever Condition"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Condition"/>
  </parameter>
  <parameter>
    <name value="The client has moderate to severe fever"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="CI Hypersensitivity to vaccine components Observation"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Observation"/>
  </parameter>
  <parameter>
    <name value="CI Hypersensitivity to vaccine components Condition"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Condition"/>
  </parameter>
  <parameter>
    <name value="The client has hypersensitivity to any component of the vaccine"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="CI Taking antibiotics Observation"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Observation"/>
  </parameter>
  <parameter>
    <name value="CI Taking antibiotics Condition"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Condition"/>
  </parameter>
  <parameter>
    <name value="The client is currently taking antibiotics"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="CI Chronic gastrointestinal disease Observation"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Observation"/>
  </parameter>
  <parameter>
    <name value="CI Chronic gastrointestinal disease Condition"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Condition"/>
  </parameter>
  <parameter>
    <name value="The client has chronic gastrointestinal disease"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="HIV status Observation"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Observation"/>
  </parameter>
  <parameter>
    <name value="Client's HIV status is positive"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Client's HIV status is negative or unknown"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Currently on ART Observation"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Observation"/>
  </parameter>
  <parameter>
    <name value="Client is currently receiving antiretroviral therapy"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Client is currently not receiving antiretroviral therapy"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Immunologically stable Observation"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Observation"/>
  </parameter>
  <parameter>
    <name value="Client is immunologically stable"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Client is not immunologically stable"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="TB infection test result Observation"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Observation"/>
  </parameter>
  <parameter>
    <name value="Client's TB infection test result is negative"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Client's TB infection test result is positive"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Client's TB infection test result is unknown (test not done or no result yet)"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Clinically well Observation"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Observation"/>
  </parameter>
  <parameter>
    <name value="Client is not clinically well"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Client is clinically well"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Client is not immunocompromised"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Birth weight in grams Observation"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Observation"/>
  </parameter>
  <parameter>
    <name value="Birth weight in grams Value"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="Quantity"/>
  </parameter>
  <parameter>
    <name value="Birth weight in grams"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="decimal"/>
  </parameter>
  <parameter>
    <name value="Client's weight at birth was over 2000 g"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Client's weight at birth was below 2000 g"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Preterm birth Observation"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Observation"/>
  </parameter>
  <parameter>
    <name value="Client was a premature infant at birth"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Client was not a premature infant at birth"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Completed the primary vaccination series Observation"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Observation"/>
  </parameter>
  <parameter>
    <name value="At high risk for pneumococcal infection Observation"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Observation"/>
  </parameter>
  <parameter>
    <name value="Client is at high risk for pneumococcal infection"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Client is not at high risk for pneumococcal infection"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Date when primary vaccination series was completed Observation"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Observation"/>
  </parameter>
  <parameter>
    <name value="Completed the booster series Observation"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Observation"/>
  </parameter>
  <content>
    <contentType value="text/cql"/>
    <data value=""/>
  </content>
  <content>
    <contentType value="application/elm+xml"/>
    <data value=""/>
  </content>
</Library>