<?xml version="1.0" encoding="UTF-8"?>

<Library xmlns="http://hl7.org/fhir">
  <id value="IMMZD2DTMeningococcalEncounterElements"/>
  <meta>
    <profile value="http://hl7.org/fhir/uv/crmi/StructureDefinition/crmi-shareablelibrary"/>
    <profile value="http://hl7.org/fhir/uv/crmi/StructureDefinition/crmi-publishablelibrary"/>
    <profile value="http://hl7.org/fhir/uv/cql/StructureDefinition/cql-library"/>
    <profile value="http://hl7.org/fhir/uv/cql/StructureDefinition/cql-module"/>
  </meta>
  <text>
    <status value="extensions"/><div xmlns="http://www.w3.org/1999/xhtml">
<div>
    <table class="grid dict">
        
        
        <tr>
            <th scope="row"><b>Title: </b></th>
            <td style="padding-left: 4px;">IMMZD2DTMeningococcalEncounterElements</td>
        </tr>
        

        
        
        <tr>
            <th scope="row"><b>Id: </b></th>
            <td style="padding-left: 4px;">IMMZD2DTMeningococcalEncounterElements</td>
        </tr>
        

        
        
        <tr>
            <th scope="row"><b>Version: </b></th>
            <td style="padding-left: 4px;">0.2.0</td>
        </tr>
        

        
        <tr>
            <th scope="row"><b>Url: </b></th>
            <td style="padding-left: 4px;"><a href="Library-IMMZD2DTMeningococcalEncounterElements.html">IMMZD2DTMeningococcalEncounterElements</a></td>
        </tr>
        

        

        

        
        <tr>
            <th scope="row"><b>Status: </b></th>
            <td style="padding-left: 4px;">draft</td>
        </tr>
        

        
        <tr>
            <th scope="row"><b>Experimental: </b></th>
            <td style="padding-left: 4px;">true</td>
        </tr>
        

        
        <tr>
            <th scope="row"><b>Type: </b></th>
            <td style="padding-left: 4px;">
                
                    
                        
                        <p style="margin-bottom: 5px;">
                            <b>system: </b> <span><a href="http://terminology.hl7.org/6.0.2/CodeSystem-library-type.html">http://terminology.hl7.org/CodeSystem/library-type</a></span>
                        </p>
                        
                        
                        <p style="margin-bottom: 5px;">
                            <b>code: </b> <span>logic-library</span>
                        </p>
                        
                        
                    
                
                
            </td>
        </tr>
        

        

        
        <tr>
            <th scope="row"><b>Date: </b></th>
            <td style="padding-left: 4px;">2025-06-25 20:08:00+0000</td>
        </tr>
        

        
        <tr>
            <th scope="row"><b>Publisher: </b></th>
            <td style="padding-left: 4px;">WHO</td>
        </tr>
        

        
        <tr>
            <th scope="row"><b>Description: </b></th>
            <td style="padding-left: 4px;"><div><p>This library defines encounter-based elements for Meningococcal used throughout the Immunization CPG</p>
</div></td>
        </tr>
        

        

        

        

        

        

        

        

        

        

        

        
        <tr>
            <th scope="row"><b>Related Artifacts: </b></th>
            <td style="padding-left: 4px;">
                
                
                
                <p><b>Dependencies</b></p>
                <ul>
                  
                    <li><a href="Library-WHOConcepts.html">WHOConcepts</a></li>
                  
                    <li><a href="Library-WHOCommon.html">WHOCommon</a></li>
                  
                    <li><a href="Library-WHOElements.html">WHOElements</a></li>
                  
                    <li><a href="Library-IMMZCommon.html">IMMZCommon</a></li>
                  
                    <li><a href="Library-IMMZConcepts.html">IMMZConcepts</a></li>
                  
                    <li><a href="Library-IMMZEncounterElements.html">IMMZEncounterElements</a></li>
                  
                    <li><a href="Library-IMMZD2DTMeningococcalElements.html">IMMZD2DTMeningococcalElements</a></li>
                  
                </ul>
                
                
                
                
                
            </td>
        </tr>
        

        
        <tr>
          <th scope="row"><b>Parameters: </b></th>
          <td style="padding-left: 4px;">
            <table class="grid-dict">
              <tr><th><b>Name</b></th><th><b>Type</b></th><th><b>Min</b></th><th><b>Max</b></th><th><b>In/Out</b></th></tr>
              
                <tr><th>Today</th><th>date</th><th>0</th><th>1</th><th>In</th></tr>
              
                <tr><th>EncounterId</th><th>string</th><th>0</th><th>1</th><th>In</th></tr>
              
                <tr><th>Patient</th><th>Patient</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Meningococcal Doses Administered to Patient</th><th>Immunization</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>Date of Latest Meningococcal Dose</th><th>date</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Meningococcal Primary Series Doses Administered to Patient</th><th>Immunization</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>Number of Meningococcal Primary Series Doses Administered</th><th>integer</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Date of First Primary Series Meningococcal Dose</th><th>date</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Meningococcal Booster Series Doses Administered to Patient</th><th>Immunization</th><th>0</th><th>*</th><th>Out</th></tr>
              
                <tr><th>Number of Meningococcal Booster Series Doses Administered</th><th>integer</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>No meningococcal primary series dose was administered</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>One meningococcal primary series dose was administered</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Two meningococcal primary series doses were administered</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Client's age is less than 2 months</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Client's age is more than or equal to 2 months</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Client's age is less than 3 months</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Client's age is more than or equal to 3 months</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Client's age is less than 9 months</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Client's age is more than 9 months</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Client's age is more than or equal to 9 months</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Client's age is less than 2 years</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Client's age is more than or equal to 2 years</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Client's age is more than 2 years</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Client's age was less than or equal to 11 months when the primary series was started</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Client's age was more than 11 months when the primary series was started</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Client's age was less than or equal to 23 months when the primary series was started</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Client's age was more than 23 months when the primary series was started</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>The latest meningococcal dose was administered less than 8 weeks ago</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>The latest meningococcal dose was administered more than 8 weeks ago</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>The latest meningococcal dose was administered less than 2 months ago</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>The latest meningococcal dose was administered more than 2 months ago</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>The latest meningococcal dose was administered less than 3 months ago</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>The latest meningococcal dose was administered more than 3 months ago</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>The latest meningococcal dose was administered less than 1 year ago</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>The latest meningococcal dose was administered more than 1 year ago</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>The latest meningococcal dose was administered less than 3 years ago</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>The latest meningococcal dose was administered more than 3 years ago</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>No meningococcal booster dose was administered</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Meningococcal booster dose was administered</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
            </table>
          </td>
        </tr>
        

        

        
        
        <tr>
          <td colspan="2">
            <table>
              <tr><th><a id="cql-content"><b>Content: </b></a> text/cql</th></tr>
              <tr><td><pre><code class="language-cql">
/*
  * Library: IMMZD2DTMeningococcalEncounterElements
  */
library IMMZD2DTMeningococcalEncounterElements

using FHIR version '4.0.1'
include FHIRHelpers version '4.0.1'

include WHOConcepts
include WHOCommon called WC
include WHOElements called WE

include IMMZCommon called Common
include IMMZConcepts called Concepts

include IMMZEncounterElements called Encounter

include IMMZD2DTMeningococcalElements called MeningococcalElements

parameter Today Date default Today()
parameter EncounterId String

context Patient

/*
@internal: Meningococcal containing Doses Administered to Patient
*/
define &quot;Meningococcal Doses Administered to Patient&quot;:
  Encounter.&quot;Doses Administered to Patient&quot; I
  where
    I.vaccineCode in Concepts.&quot;Meningococcal vaccines&quot;

/*
@internal: Date and time of last Meningococcal dose
*/
define &quot;Date of Latest Meningococcal Dose&quot;:
  date from start of &quot;Meningococcal Doses Administered to Patient&quot;.mostRecent().occurrence.toInterval()

/*
@internal: Meningococcal containing Doses Administered to Patient that are in the Primary series
*/
define &quot;Meningococcal Primary Series Doses Administered to Patient&quot;:
  &quot;Meningococcal Doses Administered to Patient&quot;.seriesPrimary()

/*
@internal: Number of Meningococcal Primary Series doses
*/
define &quot;Number of Meningococcal Primary Series Doses Administered&quot;:
  Count(&quot;Meningococcal Primary Series Doses Administered to Patient&quot;)

/*
@internal: Date of First Primary Series Meningococcal Dose
*/
define &quot;Date of First Primary Series Meningococcal Dose&quot;:
  date from start of &quot;Meningococcal Primary Series Doses Administered to Patient&quot;.earliest().occurrence.toInterval()

/*
@internal: Meningococcal containing Doses Administered to Patient that are in the Booster series
*/
define &quot;Meningococcal Booster Series Doses Administered to Patient&quot;:
  &quot;Meningococcal Doses Administered to Patient&quot;.seriesBooster()

/*
@internal: Number of Meningococcal Booster Series doses
*/
define &quot;Number of Meningococcal Booster Series Doses Administered&quot;:
  Count(&quot;Meningococcal Booster Series Doses Administered to Patient&quot;)

/*
@input: No meningococcal primary series dose was administered
@pseudocode: Count of vaccines administered (where &quot;Vaccine type&quot; = &quot;Meningococcal vaccines&quot; and &quot;Type of dose&quot; = &quot;Primary series&quot;) = 0
@decision: MenA conjugate vaccine, 1-dose schedule
@decision: MenA conjugate vaccine, 2-dose schedule (specific context where there is a compelling reason to vaccinate infants aged under 9 months)
@decision: Monovalent MenC conjugate vaccine schedule
@decision: Quadrivalent conjugate vaccines (A,C,W135,Y-CRM), 1-dose schedule
@decision: Quadrivalent conjugate vaccines (A,C,W135,Y-D), 2-dose schedule
@decision: Polysaccharide vaccines schedule
*/
define &quot;No meningococcal primary series dose was administered&quot;:
  &quot;Number of Meningococcal Primary Series Doses Administered&quot; = 0

/*
@input: One meningococcal primary series dose was administered
@pseudocode: Count of vaccines administered (where &quot;Vaccine type&quot; = &quot;Meningococcal vaccines&quot; and &quot;Type of dose&quot; = &quot;Primary series&quot;) = 1
@decision: MenA conjugate vaccine, 1-dose schedule
@decision: MenA conjugate vaccine, 2-dose schedule (specific context where there is a compelling reason to vaccinate infants aged under 9 months)
@decision: Monovalent MenC conjugate vaccine schedule
@decision: Quadrivalent conjugate vaccines (A,C,W135,Y-CRM), 1-dose schedule
@decision: Quadrivalent conjugate vaccines (A,C,W135,Y-D), 2-dose schedule
@decision: Polysaccharide vaccines schedule
*/
define &quot;One meningococcal primary series dose was administered&quot;:
  &quot;Number of Meningococcal Primary Series Doses Administered&quot; = 1

/*
@input: Two meningococcal primary series doses were administered
@pseudocode: Count of vaccines administered (where &quot;Vaccine type&quot; = &quot;Meningococcal vaccines&quot; and &quot;Type of dose&quot; = &quot;Primary series&quot;) = 2
@decision: MenA conjugate vaccine, 2-dose schedule (specific context where there is a compelling reason to vaccinate infants aged under 9 months)
@decision: Monovalent MenC conjugate vaccine schedule
@decision: Quadrivalent conjugate vaccines (A,C,W135,Y-D), 2-dose schedule
*/
define &quot;Two meningococcal primary series doses were administered&quot;:
  &quot;Number of Meningococcal Primary Series Doses Administered&quot; = 2

/*
@input: Client's age is less than 2 months
@pseudocode: Today's date − &quot;Date of birth&quot; &lt; 2 months
@decision: Monovalent MenC conjugate vaccine schedule
*/
define &quot;Client's age is less than 2 months&quot;:
  Encounter.&quot;Current Patient Age In Months&quot; &lt; 2

/*
@input: Client's age is more than or equal to 2 months
@pseudocode: Today's date − &quot;Date of birth&quot; ≥ 2 months
@decision: Monovalent MenC conjugate vaccine schedule
*/
define &quot;Client's age is more than or equal to 2 months&quot;:
  Encounter.&quot;Current Patient Age In Months&quot; &gt;= 2

/*
@input: Client's age is less than 3 months
@pseudocode: Today's date − &quot;Date of birth&quot; &lt; 3 months
@decision: MenA conjugate vaccine, 2-dose schedule (specific context where there is a compelling reason to vaccinate infants aged under 9 months)
*/
define &quot;Client's age is less than 3 months&quot;:
  Encounter.&quot;Current Patient Age In Months&quot; &lt; 3

/*
@input: Client's age is more than or equal to 3 months
@pseudocode: Today's date − &quot;Date of birth&quot; ≥ 3 months
@decision: MenA conjugate vaccine, 2-dose schedule (specific context where there is a compelling reason to vaccinate infants aged under 9 months)
*/
define &quot;Client's age is more than or equal to 3 months&quot;:
  Encounter.&quot;Current Patient Age In Months&quot; &gt;= 3

/*
@input: Client's age is less than 9 months
@pseudocode: Today's date − &quot;Date of birth&quot; &lt; 9 months
@decision: MenA conjugate vaccine, 1-dose schedule
@decision: Quadrivalent conjugate vaccines (A,C,W135,Y-D), 2-dose schedule
*/
define &quot;Client's age is less than 9 months&quot;:
  Encounter.&quot;Current Patient Age In Months&quot; &lt; 9

/*
@input: Client's age is more than 9 months
@pseudocode: Today's date − &quot;Date of birth&quot; ≥ 9 months
@decision: MenA conjugate vaccine, 1-dose schedule
*/
define &quot;Client's age is more than 9 months&quot;:
  Encounter.&quot;Current Patient Age In Months&quot; &gt;= 9

/*
@input: Client's age is more than or equal to 9 months
@pseudocode: Today's date − &quot;Date of birth&quot; ≥ 9 months
@decision: Quadrivalent conjugate vaccines (A,C,W135,Y-D), 2-dose schedule
*/
define &quot;Client's age is more than or equal to 9 months&quot;:
  &quot;Client's age is more than 9 months&quot;
  
/*
@input: Client's age is less than 2 years
@pseudocode: Today's date − &quot;Date of birth&quot; &lt; 2 years
@decision: Quadrivalent conjugate vaccines (A,C,W135,Y-CRM), 1-dose schedule
@decision: Polysaccharide vaccines schedule
*/
define &quot;Client's age is less than 2 years&quot;:
  Encounter.&quot;Current Patient Age In Years&quot; &lt; 2

/*
@input: Client's age is more than or equal to 2 years
@pseudocode: Today's date − &quot;Date of birth&quot; ≥ 2 years
@decision: Quadrivalent conjugate vaccines (A,C,W135,Y-CRM), 1-dose schedule
*/
define &quot;Client's age is more than or equal to 2 years&quot;:
  Encounter.&quot;Current Patient Age In Years&quot; &gt;= 2

/*
@input: Client's age is more than 2 years
@pseudocode: Today's date − &quot;Date of birth&quot; ≥ 2 years
@decision: Polysaccharide vaccines schedule
(Polysaccharide vaccines can be used to control outbreaks in countries where limited economic resources or insufficient supply restrict the use of meningococcal conjugate vaccine
s)
*/
define &quot;Client's age is more than 2 years&quot;:
  &quot;Client's age is more than or equal to 2 years&quot;

/*
@input: Client's age was less than or equal to 11 months when the primary series was started
@pseudocode: &quot;Date and time of vaccination&quot; (where &quot;Vaccine type&quot; = &quot;Meningococcal vaccines&quot;) - &quot;Date of birth&quot; ≤ 11 months
@decision: Monovalent MenC conjugate vaccine schedule
*/
define &quot;Client's age was less than or equal to 11 months when the primary series was started&quot;:
  AgeInMonthsAt(&quot;Date of First Primary Series Meningococcal Dose&quot;) &lt;= 11

/*
@input: Client's age was more than 11 months when the primary series was started
@pseudocode: &quot;Date and time of vaccination&quot; (where &quot;Vaccine type&quot; = &quot;Meningococcal vaccines&quot;) - &quot;Date of birth&quot; &gt; 11 months
@decision: Monovalent MenC conjugate vaccine schedule
*/
define &quot;Client's age was more than 11 months when the primary series was started&quot;:
  AgeInMonthsAt(&quot;Date of First Primary Series Meningococcal Dose&quot;) &gt; 11

/*
@input: Client's age was less than or equal to 23 months when the primary series was started
@pseudocode: &quot;Date and time of vaccination&quot; (where &quot;Vaccine type&quot; = &quot;Meningococcal vaccines&quot;) - &quot;Date of birth&quot; ≤ 23 months
@decision: Quadrivalent conjugate vaccines (A,C,W135,Y-D), 2-dose schedule
*/
define &quot;Client's age was less than or equal to 23 months when the primary series was started&quot;:
  AgeInMonthsAt(&quot;Date of First Primary Series Meningococcal Dose&quot;) &lt;= 23

/*
@input: Client's age was more than 23 months when the primary series was started
@pseudocode: &quot;Date and time of vaccination&quot; (where &quot;Vaccine type&quot; = &quot;Meningococcal vaccines&quot;) - &quot;Date of birth&quot; &gt; 23 months
@decision: Quadrivalent conjugate vaccines (A,C,W135,Y-D), 2-dose schedule
*/
define &quot;Client's age was more than 23 months when the primary series was started&quot;:
  AgeInMonthsAt(&quot;Date of First Primary Series Meningococcal Dose&quot;) &gt; 23

/*
@input: The latest meningococcal dose was administered less than 8 weeks ago
@pseudocode: Today's date − &quot;Date and time of vaccination&quot; (where &quot;Vaccine type&quot; = &quot;Meningococcal vaccines&quot;) &lt; 8 weeks
@decision: MenA conjugate vaccine, 2-dose schedule (specific context where there is a compelling reason to vaccinate infants aged under 9 months)
*/
define &quot;The latest meningococcal dose was administered less than 8 weeks ago&quot;:
  &quot;Date of Latest Meningococcal Dose&quot; is not null
  and duration in weeks between &quot;Date of Latest Meningococcal Dose&quot; and Today &lt; 8

/*
@input: The latest meningococcal dose was administered more than 8 weeks ago
@pseudocode: Today's date − &quot;Date and time of vaccination&quot; (where &quot;Vaccine type&quot; = &quot;Meningococcal vaccines&quot;) ≥ 8 weeks
@decision: MenA conjugate vaccine, 2-dose schedule (specific context where there is a compelling reason to vaccinate infants aged under 9 months)
*/
define &quot;The latest meningococcal dose was administered more than 8 weeks ago&quot;:
  not &quot;The latest meningococcal dose was administered less than 8 weeks ago&quot;

/*
@input: The latest meningococcal dose was administered less than 2 months ago
@pseudocode: Today's date − &quot;Date and time of vaccination&quot; (where &quot;Vaccine type&quot; = &quot;Meningococcal vaccines&quot;) &lt; 2 months
@decision: Monovalent MenC conjugate vaccine schedule
*/
define &quot;The latest meningococcal dose was administered less than 2 months ago&quot;:
  &quot;Date of Latest Meningococcal Dose&quot; is not null
  and duration in months between &quot;Date of Latest Meningococcal Dose&quot; and Today &lt; 2

/*
@input: The latest meningococcal dose was administered more than 2 months ago
@pseudocode: Today's date − &quot;Date and time of vaccination&quot; (where &quot;Vaccine type&quot; = &quot;Meningococcal vaccines&quot;) ≥ 2 months
@decision: Monovalent MenC conjugate vaccine schedule
*/
define &quot;The latest meningococcal dose was administered more than 2 months ago&quot;:
  not &quot;The latest meningococcal dose was administered less than 2 months ago&quot;

/*
@input: The latest meningococcal dose was administered less than 3 months ago
@pseudocode: Today's date − &quot;Date and time of vaccination&quot; (where &quot;Vaccine type&quot; = &quot;Meningococcal vaccines&quot;) &lt; 3 months
@decision: Quadrivalent conjugate vaccines (A,C,W135,Y-D), 2-dose schedule
*/
define &quot;The latest meningococcal dose was administered less than 3 months ago&quot;:
  &quot;Date of Latest Meningococcal Dose&quot; is not null
  and duration in months between &quot;Date of Latest Meningococcal Dose&quot; and Today &lt; 3
/*
@input: The latest meningococcal dose was administered more than 3 months ago
@pseudocode: Today's date − &quot;Date and time of vaccination&quot; (where &quot;Vaccine type&quot; = &quot;Meningococcal vaccines&quot;) ≥ 3 months
@decision: Quadrivalent conjugate vaccines (A,C,W135,Y-D), 2-dose schedule
*/
define &quot;The latest meningococcal dose was administered more than 3 months ago&quot;:
  not &quot;The latest meningococcal dose was administered less than 3 months ago&quot;

/*
@input: The latest meningococcal dose was administered less than 1 year ago
@pseudocode: Today's date − latest &quot;Date and time of vaccination&quot; (where &quot;Vaccine type&quot; = &quot;Meningococcal vaccines&quot;) &lt; 1 year
@decision: Monovalent MenC conjugate vaccine schedule
*/
define &quot;The latest meningococcal dose was administered less than 1 year ago&quot;:
  &quot;Date of Latest Meningococcal Dose&quot; is not null
  and duration in years between &quot;Date of Latest Meningococcal Dose&quot; and Today &lt; 1

/*
@input: The latest meningococcal dose was administered more than 1 year ago
@pseudocode: Today's date − latest &quot;Date and time of vaccination&quot; (where &quot;Vaccine type&quot; = &quot;Meningococcal vaccines&quot;) ≥ 1 year
@decision: Monovalent MenC conjugate vaccine schedule
*/
define &quot;The latest meningococcal dose was administered more than 1 year ago&quot;:
  not &quot;The latest meningococcal dose was administered less than 1 year ago&quot;

/*
@input: The latest meningococcal dose was administered less than 3 years ago
@pseudocode: Today's date − &quot;Date and time of vaccination&quot; (where &quot;Vaccine type&quot; = &quot;Meningococcal vaccines&quot;) &lt; 3 years
@decision: Polysaccharide vaccines schedule
(Polysaccharide vaccines can be used to control outbreaks in countries where limited economic resources or insufficient supply restrict the use of meningococcal conjugate vaccine
s)
*/
define &quot;The latest meningococcal dose was administered less than 3 years ago&quot;:
  &quot;Date of Latest Meningococcal Dose&quot; is not null
  and duration in years between &quot;Date of Latest Meningococcal Dose&quot; and Today &lt; 3
  
/*
@input: The latest meningococcal dose was administered more than 3 years ago
@pseudocode: Today's date − &quot;Date and time of vaccination&quot; (where &quot;Vaccine type&quot; = &quot;Meningococcal vaccines&quot;) ≥ 3 years
@decision: Polysaccharide vaccines schedule
(Polysaccharide vaccines can be used to control outbreaks in countries where limited economic resources or insufficient supply restrict the use of meningococcal conjugate vaccine
s)
*/
define &quot;The latest meningococcal dose was administered more than 3 years ago&quot;:
  not &quot;The latest meningococcal dose was administered less than 3 years ago&quot;

/*
@input: No meningococcal booster dose was administered
@pseudocode: Count of vaccines administered (where &quot;Vaccine type&quot; = &quot;Meningococcal vaccines&quot; and &quot;Type of dose&quot; = &quot;Booster dose&quot;) = 0
@decision: Monovalent MenC conjugate vaccine schedule
@decision: Polysaccharide vaccines schedule
*/
define &quot;No meningococcal booster dose was administered&quot;:
  &quot;Number of Meningococcal Booster Series Doses Administered&quot; = 0

/*
@input: Meningococcal booster dose was administered
@pseudocode: Count of vaccines administered (where &quot;Vaccine type&quot; = &quot;Meningococcal vaccines&quot; and &quot;Type of dose&quot; = &quot;Booster dose&quot;) = 1
@decision: Monovalent MenC conjugate vaccine schedule
@decision: Polysaccharide vaccines schedule
*/
define &quot;Meningococcal booster dose was administered&quot;:
  &quot;Number of Meningococcal Booster Series Doses Administered&quot; = 1
</code></pre></td></tr>
            </table>
          </td>
        </tr>
        
        
        
        
        
        <tr>
          <td colspan="2">
            <table>
              <tr><th><b>Content: </b> application/elm+xml</th></tr>
              <tr><td><pre><code>Encoded data (112168 characters)</code></pre></td></tr>
            </table>
          </td>
        </tr>
        
        
    </table>
</div>
</div>
  </text>
  <extension url="http://hl7.org/fhir/StructureDefinition/cqf-knowledgeCapability">
    <valueCode value="computable"/>
  </extension>
  <url value="http://smart.who.int/immunizations/Library/IMMZD2DTMeningococcalEncounterElements"/>
  <version value="0.2.0"/>
  <name value="IMMZD2DTMeningococcalEncounterElements"/>
  <title value="IMMZD2DTMeningococcalEncounterElements"/>
  <status value="draft"/>
  <experimental value="true"/>
  <type>
    <coding>
      <system value="http://terminology.hl7.org/CodeSystem/library-type"/>
      <code value="logic-library"/>
    </coding>
  </type>
  <date value="2025-06-25T20:08:00+00:00"/>
  <publisher value="WHO"/>
  <contact>
    <name value="WHO"/>
    <telecom>
      <system value="url"/>
      <value value="http://who.int"/>
    </telecom>
  </contact>
  <description value="This library defines encounter-based elements for Meningococcal used throughout the Immunization CPG"/>
  <relatedArtifact>
    <type value="depends-on"/>
    <display value="Library WHOConcepts"/>
    <resource value="http://smart.who.int/immunizations/Library/WHOConcepts"/>
  </relatedArtifact>
  <relatedArtifact>
    <type value="depends-on"/>
    <display value="Library WC"/>
    <resource value="http://smart.who.int/immunizations/Library/WHOCommon"/>
  </relatedArtifact>
  <relatedArtifact>
    <type value="depends-on"/>
    <display value="Library WE"/>
    <resource value="http://smart.who.int/immunizations/Library/WHOElements"/>
  </relatedArtifact>
  <relatedArtifact>
    <type value="depends-on"/>
    <display value="Library Common"/>
    <resource value="http://smart.who.int/immunizations/Library/IMMZCommon"/>
  </relatedArtifact>
  <relatedArtifact>
    <type value="depends-on"/>
    <display value="Library Concepts"/>
    <resource value="http://smart.who.int/immunizations/Library/IMMZConcepts"/>
  </relatedArtifact>
  <relatedArtifact>
    <type value="depends-on"/>
    <display value="Library Encounter"/>
    <resource value="http://smart.who.int/immunizations/Library/IMMZEncounterElements"/>
  </relatedArtifact>
  <relatedArtifact>
    <type value="depends-on"/>
    <display value="Library MeningococcalElements"/>
    <resource value="http://smart.who.int/immunizations/Library/IMMZD2DTMeningococcalElements"/>
  </relatedArtifact>
  <parameter>
    <name value="Today"/>
    <use value="in"/>
    <min value="0"/>
    <max value="1"/>
    <type value="date"/>
  </parameter>
  <parameter>
    <name value="EncounterId"/>
    <use value="in"/>
    <min value="0"/>
    <max value="1"/>
    <type value="string"/>
  </parameter>
  <parameter>
    <name value="Patient"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="Patient"/>
  </parameter>
  <parameter>
    <name value="Meningococcal Doses Administered to Patient"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Immunization"/>
  </parameter>
  <parameter>
    <name value="Date of Latest Meningococcal Dose"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="date"/>
  </parameter>
  <parameter>
    <name value="Meningococcal Primary Series Doses Administered to Patient"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Immunization"/>
  </parameter>
  <parameter>
    <name value="Number of Meningococcal Primary Series Doses Administered"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="integer"/>
  </parameter>
  <parameter>
    <name value="Date of First Primary Series Meningococcal Dose"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="date"/>
  </parameter>
  <parameter>
    <name value="Meningococcal Booster Series Doses Administered to Patient"/>
    <use value="out"/>
    <min value="0"/>
    <max value="*"/>
    <type value="Immunization"/>
  </parameter>
  <parameter>
    <name value="Number of Meningococcal Booster Series Doses Administered"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="integer"/>
  </parameter>
  <parameter>
    <name value="No meningococcal primary series dose was administered"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="One meningococcal primary series dose was administered"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Two meningococcal primary series doses were administered"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Client's age is less than 2 months"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Client's age is more than or equal to 2 months"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Client's age is less than 3 months"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Client's age is more than or equal to 3 months"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Client's age is less than 9 months"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Client's age is more than 9 months"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Client's age is more than or equal to 9 months"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Client's age is less than 2 years"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Client's age is more than or equal to 2 years"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Client's age is more than 2 years"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Client's age was less than or equal to 11 months when the primary series was started"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Client's age was more than 11 months when the primary series was started"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Client's age was less than or equal to 23 months when the primary series was started"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Client's age was more than 23 months when the primary series was started"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="The latest meningococcal dose was administered less than 8 weeks ago"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="The latest meningococcal dose was administered more than 8 weeks ago"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="The latest meningococcal dose was administered less than 2 months ago"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="The latest meningococcal dose was administered more than 2 months ago"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="The latest meningococcal dose was administered less than 3 months ago"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="The latest meningococcal dose was administered more than 3 months ago"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="The latest meningococcal dose was administered less than 1 year ago"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="The latest meningococcal dose was administered more than 1 year ago"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="The latest meningococcal dose was administered less than 3 years ago"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="The latest meningococcal dose was administered more than 3 years ago"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="No meningococcal booster dose was administered"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Meningococcal booster dose was administered"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <content>
    <contentType value="text/cql"/>
    <data value=""/>
  </content>
  <content>
    <contentType value="application/elm+xml"/>
    <data value=""/>
  </content>
</Library>