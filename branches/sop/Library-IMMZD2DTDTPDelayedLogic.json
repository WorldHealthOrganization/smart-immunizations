{
  "resourceType" : "Library",
  "id" : "IMMZD2DTDTPDelayedLogic",
  "meta" : {
    "profile" : ["http://hl7.org/fhir/uv/crmi/StructureDefinition/crmi-shareablelibrary",
    "http://hl7.org/fhir/uv/crmi/StructureDefinition/crmi-publishablelibrary",
    "http://hl7.org/fhir/uv/cql/StructureDefinition/cql-library",
    "http://hl7.org/fhir/uv/cql/StructureDefinition/cql-module"]
  },
  "text" : {
    "status" : "extensions",
    "div" : "<div xmlns=\"http://www.w3.org/1999/xhtml\">\n<div>\n    <table class=\"grid dict\">\n        \n        \n        <tr>\n            <th scope=\"row\"><b>Title: </b></th>\n            <td style=\"padding-left: 4px;\">IMMZD2DTDTPDelayedLogic</td>\n        </tr>\n        \n\n        \n        \n        <tr>\n            <th scope=\"row\"><b>Id: </b></th>\n            <td style=\"padding-left: 4px;\">IMMZD2DTDTPDelayedLogic</td>\n        </tr>\n        \n\n        \n        \n        <tr>\n            <th scope=\"row\"><b>Version: </b></th>\n            <td style=\"padding-left: 4px;\">0.2.0</td>\n        </tr>\n        \n\n        \n        <tr>\n            <th scope=\"row\"><b>Url: </b></th>\n            <td style=\"padding-left: 4px;\"><a href=\"Library-IMMZD2DTDTPDelayedLogic.html\">IMMZD2DTDTPDelayedLogic</a></td>\n        </tr>\n        \n\n        \n\n        \n\n        \n        <tr>\n            <th scope=\"row\"><b>Status: </b></th>\n            <td style=\"padding-left: 4px;\">draft</td>\n        </tr>\n        \n\n        \n        <tr>\n            <th scope=\"row\"><b>Experimental: </b></th>\n            <td style=\"padding-left: 4px;\">true</td>\n        </tr>\n        \n\n        \n        <tr>\n            <th scope=\"row\"><b>Type: </b></th>\n            <td style=\"padding-left: 4px;\">\n                \n                    \n                        \n                        <p style=\"margin-bottom: 5px;\">\n                            <b>system: </b> <span><a href=\"http://terminology.hl7.org/6.0.2/CodeSystem-library-type.html\">http://terminology.hl7.org/CodeSystem/library-type</a></span>\n                        </p>\n                        \n                        \n                        <p style=\"margin-bottom: 5px;\">\n                            <b>code: </b> <span>logic-library</span>\n                        </p>\n                        \n                        \n                    \n                \n                \n            </td>\n        </tr>\n        \n\n        \n\n        \n        <tr>\n            <th scope=\"row\"><b>Date: </b></th>\n            <td style=\"padding-left: 4px;\">2025-06-25 20:08:00+0000</td>\n        </tr>\n        \n\n        \n        <tr>\n            <th scope=\"row\"><b>Publisher: </b></th>\n            <td style=\"padding-left: 4px;\">WHO</td>\n        </tr>\n        \n\n        \n        <tr>\n            <th scope=\"row\"><b>Description: </b></th>\n            <td style=\"padding-left: 4px;\"><div><p>This library defines decision support logic for the IMMZ.D2.DT.DTP.Delayed or interrupted series decision table in the Immunization CPG</p>\n</div></td>\n        </tr>\n        \n\n        \n\n        \n\n        \n\n        \n\n        \n\n        \n\n        \n\n        \n\n        \n\n        \n\n        \n        <tr>\n            <th scope=\"row\"><b>Related Artifacts: </b></th>\n            <td style=\"padding-left: 4px;\">\n                \n                \n                \n                <p><b>Dependencies</b></p>\n                <ul>\n                  \n                    <li><a href=\"Library-IMMZD2DTDTPEncounterElements.html\">IMMZD2DTDTPEncounterElements</a></li>\n                  \n                </ul>\n                \n                \n                \n                \n                \n            </td>\n        </tr>\n        \n\n        \n        <tr>\n          <th scope=\"row\"><b>Parameters: </b></th>\n          <td style=\"padding-left: 4px;\">\n            <table class=\"grid-dict\">\n              <tr><th><b>Name</b></th><th><b>Type</b></th><th><b>Min</b></th><th><b>Max</b></th><th><b>In/Out</b></th></tr>\n              \n                <tr><th>Today</th><th>date</th><th>0</th><th>1</th><th>In</th></tr>\n              \n                <tr><th>Patient</th><th>Patient</th><th>0</th><th>1</th><th>Out</th></tr>\n              \n                <tr><th>Primary DTP series is complete. Client is not due for tetanus and diphtheria booster dose</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>\n              \n                <tr><th>Primary DTP series is complete. Client is not due for pertussis booster dose</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>\n              \n                <tr><th>Primary DTP series is complete. Client is not due for tetanus and diphtheria booster dose Guidance</th><th>string</th><th>0</th><th>1</th><th>Out</th></tr>\n              \n                <tr><th>Primary DTP series is complete. Client is not due for pertussis booster dose Guidance</th><th>string</th><th>0</th><th>1</th><th>Out</th></tr>\n              \n                <tr><th>Primary DTP series is complete. Client is due for pertussis booster dose</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>\n              \n                <tr><th>Primary DTP series is complete. Client is due for pertussis booster dose Guidance</th><th>string</th><th>0</th><th>1</th><th>Out</th></tr>\n              \n                <tr><th>Pertussis immunization schedule is complete Case 1</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>\n              \n                <tr><th>Pertussis immunization schedule is complete Case 2</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>\n              \n                <tr><th>Pertussis immunization schedule is complete</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>\n              \n                <tr><th>Pertussis immunization schedule is complete Guidance</th><th>string</th><th>0</th><th>1</th><th>Out</th></tr>\n              \n                <tr><th>Primary DTP series is complete. Client is due for tetanus and diphtheria booster dose</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>\n              \n                <tr><th>Primary DTP series is complete. Client is due for tetanus and diphtheria booster dose Guidance</th><th>string</th><th>0</th><th>1</th><th>Out</th></tr>\n              \n                <tr><th>Client is not due for tetanus and diphtheria booster dose</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>\n              \n                <tr><th>Client is not due for tetanus and diphtheria booster dose Guidance</th><th>string</th><th>0</th><th>1</th><th>Out</th></tr>\n              \n                <tr><th>Client is due for tetanus and diphtheria booster dose</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>\n              \n                <tr><th>Client is due for tetanus and diphtheria booster dose Guidance</th><th>string</th><th>0</th><th>1</th><th>Out</th></tr>\n              \n                <tr><th>Tetanus and diphtheria immunization schedule is complete</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>\n              \n                <tr><th>Tetanus and diphtheria immunization schedule is complete Guidance</th><th>string</th><th>0</th><th>1</th><th>Out</th></tr>\n              \n                <tr><th>Client is due for DTP vaccination Case 1</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>\n              \n                <tr><th>Client is due for DTP vaccination Case 2</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>\n              \n                <tr><th>Client is due for DTP vaccination Case 3</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>\n              \n                <tr><th>Client is due for DTP vaccination</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>\n              \n                <tr><th>Client is due for DTP vaccination Guidance</th><th>string</th><th>0</th><th>1</th><th>Out</th></tr>\n              \n                <tr><th>Client is not due for DTP vaccination Case 1</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>\n              \n                <tr><th>Client is not due for DTP vaccination Case 2</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>\n              \n                <tr><th>Client is not due for DTP vaccination</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>\n              \n                <tr><th>Client is not due for DTP vaccination Guidance</th><th>string</th><th>0</th><th>1</th><th>Out</th></tr>\n              \n                <tr><th>Guidance</th><th>string</th><th>0</th><th>1</th><th>Out</th></tr>\n              \n                <tr><th>Has Guidance</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>\n              \n                <tr><th>Test Validation</th><th>Resource</th><th>0</th><th>1</th><th>Out</th></tr>\n              \n            </table>\n          </td>\n        </tr>\n        \n\n        \n\n        \n        \n        <tr>\n          <td colspan=\"2\">\n            <table>\n              <tr><th><a id=\"cql-content\"><b>Content: </b></a> text/cql</th></tr>\n              <tr><td><pre><code class=\"language-cql\">\n/*\n * Library: IMMZD2DTDTPDelayedLogic (IMMZ.D2.DT.DTP.Delayed or interrupted series)\n * Rule: Determine if the client is due for a diphtheria–tetanus–pertussis (DTP) vaccination according to the national immunization schedule\n * Decision Table: DTP vaccination schedule for the following groups: children ≥ 1 year of age with no previous immunization, adolescents and adults with no previous immunization (including pregnant women) and supplementary immunization activities in high-risk areas, for women of reproductive age\n * Trigger: IMMZ.D2 Determine required vaccination(s) if any\n */\nlibrary IMMZD2DTDTPDelayedLogic\n\nusing FHIR version'4.0.1'\ninclude FHIRHelpers version'4.0.1'\n\ninclude IMMZD2DTDTPEncounterElements called Encounter\n\nparameter Today Date default Today()\n\ncontext Patient\n\n\n/*\n@dynamicValue: Guidance\n*/\ndefine &quot;Guidance&quot;:\n  case\n\n    // Handling overlaps for Pertussis and Td boosters.\n    when &quot;Primary DTP series is complete. Client is not due for tetanus and diphtheria booster dose&quot; and &quot;Primary DTP series is complete. Client is not due for pertussis booster dose&quot; \n      then &quot;Primary DTP series is complete. Client is not due for tetanus and diphtheria booster dose Guidance&quot; + '\\n' + &quot;Primary DTP series is complete. Client is not due for pertussis booster dose Guidance&quot;\n    when &quot;Primary DTP series is complete. Client is not due for tetanus and diphtheria booster dose&quot; and &quot;Primary DTP series is complete. Client is due for pertussis booster dose&quot; \n      then &quot;Primary DTP series is complete. Client is not due for tetanus and diphtheria booster dose Guidance&quot; + '\\n' + &quot;Primary DTP series is complete. Client is due for pertussis booster dose Guidance&quot;\n    when &quot;Primary DTP series is complete. Client is not due for tetanus and diphtheria booster dose&quot; and &quot;Pertussis immunization schedule is complete&quot; \n      then &quot;Primary DTP series is complete. Client is not due for tetanus and diphtheria booster dose Guidance&quot; + '\\n' + &quot;Pertussis immunization schedule is complete Guidance&quot;\n    when &quot;Primary DTP series is complete. Client is due for tetanus and diphtheria booster dose&quot; and &quot;Primary DTP series is complete. Client is not due for pertussis booster dose&quot; \n      then &quot;Primary DTP series is complete. Client is due for tetanus and diphtheria booster dose Guidance&quot; + '\\n' + &quot;Primary DTP series is complete. Client is not due for pertussis booster dose Guidance&quot;\n    when &quot;Primary DTP series is complete. Client is due for tetanus and diphtheria booster dose&quot; and &quot;Primary DTP series is complete. Client is due for pertussis booster dose&quot; \n      then &quot;Primary DTP series is complete. Client is due for tetanus and diphtheria booster dose Guidance&quot; + '\\n' + &quot;Primary DTP series is complete. Client is due for pertussis booster dose Guidance&quot;\n    when &quot;Primary DTP series is complete. Client is due for tetanus and diphtheria booster dose&quot; and &quot;Pertussis immunization schedule is complete&quot; \n      then &quot;Primary DTP series is complete. Client is due for tetanus and diphtheria booster dose Guidance&quot; + '\\n' + &quot;Pertussis immunization schedule is complete Guidance&quot;\n    when &quot;Client is not due for tetanus and diphtheria booster dose&quot; and &quot;Primary DTP series is complete. Client is not due for pertussis booster dose&quot; \n      then &quot;Client is not due for tetanus and diphtheria booster dose Guidance&quot; + '\\n' + &quot;Primary DTP series is complete. Client is not due for pertussis booster dose Guidance&quot;\n    when &quot;Client is not due for tetanus and diphtheria booster dose&quot; and &quot;Primary DTP series is complete. Client is due for pertussis booster dose&quot; \n      then &quot;Client is not due for tetanus and diphtheria booster dose Guidance&quot; + '\\n' + &quot;Primary DTP series is complete. Client is due for pertussis booster dose Guidance&quot;\n    when &quot;Client is not due for tetanus and diphtheria booster dose&quot; and &quot;Pertussis immunization schedule is complete&quot; \n      then &quot;Client is not due for tetanus and diphtheria booster dose Guidance&quot; + '\\n' + &quot;Pertussis immunization schedule is complete Guidance&quot;\n    when &quot;Client is due for tetanus and diphtheria booster dose&quot; and &quot;Primary DTP series is complete. Client is not due for pertussis booster dose&quot; \n      then &quot;Client is due for tetanus and diphtheria booster dose Guidance&quot; + '\\n' + &quot;Primary DTP series is complete. Client is not due for pertussis booster dose Guidance&quot;\n    when &quot;Client is due for tetanus and diphtheria booster dose&quot; and &quot;Primary DTP series is complete. Client is due for pertussis booster dose&quot; \n      then &quot;Client is due for tetanus and diphtheria booster dose Guidance&quot; + '\\n' + &quot;Primary DTP series is complete. Client is due for pertussis booster dose Guidance&quot;\n    when &quot;Client is due for tetanus and diphtheria booster dose&quot; and &quot;Pertussis immunization schedule is complete&quot; \n      then &quot;Client is due for tetanus and diphtheria booster dose Guidance&quot; + '\\n' + &quot;Pertussis immunization schedule is complete Guidance&quot;\n    when &quot;Tetanus and diphtheria immunization schedule is complete&quot; and &quot;Primary DTP series is complete. Client is not due for pertussis booster dose&quot; \n      then &quot;Tetanus and diphtheria immunization schedule is complete Guidance&quot; + '\\n' + &quot;Primary DTP series is complete. Client is not due for pertussis booster dose Guidance&quot;\n    when &quot;Tetanus and diphtheria immunization schedule is complete&quot; and &quot;Primary DTP series is complete. Client is due for pertussis booster dose&quot; \n      then &quot;Tetanus and diphtheria immunization schedule is complete Guidance&quot; + '\\n' + &quot;Primary DTP series is complete. Client is due for pertussis booster dose Guidance&quot;\n    when &quot;Tetanus and diphtheria immunization schedule is complete&quot; and &quot;Pertussis immunization schedule is complete&quot; \n      then &quot;Tetanus and diphtheria immunization schedule is complete Guidance&quot; + '\\n' + &quot;Pertussis immunization schedule is complete Guidance&quot;\n\n    when &quot;Client is due for DTP vaccination&quot; then &quot;Client is due for DTP vaccination Guidance&quot;\n    when &quot;Client is not due for DTP vaccination&quot; then &quot;Client is not due for DTP vaccination Guidance&quot;\n    when &quot;Primary DTP series is complete. Client is not due for tetanus and diphtheria booster dose&quot; then &quot;Primary DTP series is complete. Client is not due for tetanus and diphtheria booster dose Guidance&quot;\n    when &quot;Primary DTP series is complete. Client is due for tetanus and diphtheria booster dose&quot; then &quot;Primary DTP series is complete. Client is due for tetanus and diphtheria booster dose Guidance&quot;\n    when &quot;Client is not due for tetanus and diphtheria booster dose&quot; then &quot;Client is not due for tetanus and diphtheria booster dose Guidance&quot;\n    when &quot;Client is due for tetanus and diphtheria booster dose&quot; then &quot;Client is due for tetanus and diphtheria booster dose Guidance&quot;\n    when &quot;Tetanus and diphtheria immunization schedule is complete&quot; then &quot;Tetanus and diphtheria immunization schedule is complete Guidance&quot;\n    when &quot;Primary DTP series is complete. Client is not due for pertussis booster dose&quot; then &quot;Primary DTP series is complete. Client is not due for pertussis booster dose Guidance&quot;\n    when &quot;Primary DTP series is complete. Client is due for pertussis booster dose&quot; then &quot;Primary DTP series is complete. Client is due for pertussis booster dose Guidance&quot;\n    when &quot;Pertussis immunization schedule is complete&quot; then &quot;Pertussis immunization schedule is complete Guidance&quot;\n    else ''\n  end\n\ndefine &quot;Has Guidance&quot;:\n  &quot;Guidance&quot; is not null and &quot;Guidance&quot; != ''\n\n/*\n@output: Client is due for DTP vaccination Case 1\n@pseudocode: &quot;Immunization recommendation status&quot; = &quot;Due&quot; (where &quot;Vaccine type&quot; = &quot;DTP-containing vaccines&quot;)\n*/\ndefine &quot;Client is due for DTP vaccination Case 1&quot;:\n  Encounter.&quot;No DTP primary series doses were administered&quot;\n    and Encounter.&quot;Client's age is more than 1 year&quot;\n\n/*\n@output: Client is due for DTP vaccination Case 2\n@pseudocode: &quot;Immunization recommendation status&quot; = &quot;Due&quot; (where &quot;Vaccine type&quot; = &quot;DTP-containing vaccines&quot;)\n*/\ndefine &quot;Client is due for DTP vaccination Case 2&quot;:\n  Encounter.&quot;One DTP primary series dose was administered&quot;\n    and Encounter.&quot;The latest DTP dose was administered more than 4 weeks ago&quot;\n\n/*\n@output: Client is due for DTP vaccination Case 3\n@pseudocode: &quot;Immunization recommendation status&quot; = &quot;Due&quot; (where &quot;Vaccine type&quot; = &quot;DTP-containing vaccines&quot;)\n*/\ndefine &quot;Client is due for DTP vaccination Case 3&quot;:\n  Encounter.&quot;Two DTP primary series doses were administered&quot;\n    and Encounter.&quot;The latest DTP dose was administered more than 6 months ago&quot;\n\n/*\n@output: Client is due for DTP vaccination\n@pseudocode: &quot;Immunization recommendation status&quot; = &quot;Due&quot; (where &quot;Vaccine type&quot; = &quot;DTP-containing vaccines&quot;)\n*/\ndefine &quot;Client is due for DTP vaccination&quot;:\n  &quot;Client is due for DTP vaccination Case 1&quot;\n    or &quot;Client is due for DTP vaccination Case 2&quot;\n    or &quot;Client is due for DTP vaccination Case 3&quot;\n\n/*\n@output: Client is due for DTP vaccination Guidance\n@guidance: Should vaccinate client with first DTP dose as no DTP doses were administered and client's age is more than 1 year. \nCheck for contraindications.\n@guidance: Should vaccinate client with second DTP dose as the latest DTP dose was administered more than 4 weeks ago.\nCheck for contraindications.\n@guidance: Should vaccinate client with third DTP dose as the latest DTP dose was administered more than 6 months ago. \nCheck for contraindications.\n*/\ndefine &quot;Client is due for DTP vaccination Guidance&quot;:\n  case\n    when &quot;Client is due for DTP vaccination Case 1&quot; then'Should vaccinate client with first DTP dose as no DTP doses were administered and client\\'s age is more than 1 year. \nCheck for contraindications.'\n    when &quot;Client is due for DTP vaccination Case 2&quot; then'Should vaccinate client with second DTP dose as the latest DTP dose was administered more than 4 weeks ago.\nCheck for contraindications.'\n    when &quot;Client is due for DTP vaccination Case 3&quot; then'Should vaccinate client with third DTP dose as the latest DTP dose was administered more than 6 months ago. \nCheck for contraindications.'\n    else ''\n  end\n\n/*\n@output: Client is not due for DTP vaccination Case 1\n@pseudocode: &quot;Immunization recommendation status&quot; = &quot;Not due&quot; (where &quot;Vaccine type&quot; = &quot;DTP-containing vaccines&quot;)\n*/\ndefine &quot;Client is not due for DTP vaccination Case 1&quot;:\n  Encounter.&quot;One DTP primary series dose was administered&quot;\n    and Encounter.&quot;The latest DTP dose was administered less than 4 weeks ago&quot;\n\n/*\n@output: Client is not due for DTP vaccination Case 2\n@pseudocode: &quot;Immunization recommendation status&quot; = &quot;Not due&quot; (where &quot;Vaccine type&quot; = &quot;DTP-containing vaccines&quot;)\n*/\ndefine &quot;Client is not due for DTP vaccination Case 2&quot;:\n  Encounter.&quot;Two DTP primary series doses were administered&quot;\n    and Encounter.&quot;The latest DTP dose was administered less than 6 months ago&quot;\n\n/*\n@output: Client is not due for DTP vaccination\n@pseudocode: &quot;Immunization recommendation status&quot; = &quot;Not due&quot; (where &quot;Vaccine type&quot; = &quot;DTP-containing vaccines&quot;)\n*/\ndefine &quot;Client is not due for DTP vaccination&quot;:\n  &quot;Client is not due for DTP vaccination Case 1&quot;\n    or &quot;Client is not due for DTP vaccination Case 2&quot;\n\n/*\n@output: Client is not due for DTP vaccination Guidance\n@guidance: Should not vaccinate client with second DTP dose as the latest DTP dose was administered less than 4 weeks ago. \nCheck for any other vaccines due and inform the caregiver of when to come back for second DTP dose\n@guidance: Should not vaccinate client with third DTP dose the latest DTP dose was administered less than 6 months ago. \nCheck for any other vaccines due and inform the caregiver of when to come back for third DTP dose.\n*/\ndefine &quot;Client is not due for DTP vaccination Guidance&quot;:\n  case\n    when &quot;Client is not due for DTP vaccination Case 1&quot; then'Should not vaccinate client with second DTP dose as the latest DTP dose was administered less than 4 weeks ago. \nCheck for any other vaccines due and inform the caregiver of when to come back for second DTP dose'\n    when &quot;Client is not due for DTP vaccination Case 2&quot; then'Should not vaccinate client with third DTP dose the latest DTP dose was administered less than 6 months ago. \nCheck for any other vaccines due and inform the caregiver of when to come back for third DTP dose.'\n    else ''\n  end\n\n/*\n@output: Primary DTP series is complete. Client is not due for tetanus and diphtheria booster dose\n@pseudocode: &quot;Immunization recommendation status&quot; = &quot;Not due&quot; (where &quot;Vaccine type&quot; = &quot;Tetanus and diphtheria-containing vaccines&quot;)\n*/\ndefine &quot;Primary DTP series is complete. Client is not due for tetanus and diphtheria booster dose&quot;:\n  Encounter.&quot;Three DTP primary series doses were administered&quot;\n    and Encounter.&quot;No tetanus and diphtheria booster doses were administered&quot;\n    and Encounter.&quot;The latest DTP dose was administered less than 1 year ago&quot;\n\n/*\n@output: Primary DTP series is complete. Client is not due for tetanus and diphtheria booster dose Guidance\n@guidance: Should not vaccinate client with first tetanus and diphtheria booster dose as the latest DTP dose was administered less than 1 year ago. \nCheck for any other vaccines due and inform the caregiver of when to come back for first tetanus and diphtheria booster dose.\n*/\ndefine &quot;Primary DTP series is complete. Client is not due for tetanus and diphtheria booster dose Guidance&quot;:\n 'Should not vaccinate client with first tetanus and diphtheria booster dose as the latest DTP dose was administered less than 1 year ago. \nCheck for any other vaccines due and inform the caregiver of when to come back for first tetanus and diphtheria booster dose.'\n\n/*\n@output: Primary DTP series is complete. Client is due for tetanus and diphtheria booster dose\n@pseudocode: &quot;Immunization recommendation status&quot; = &quot;Due&quot; (where &quot;Vaccine type&quot; = &quot;Tetanus and diphtheria-containing vaccines&quot;)\n*/\ndefine &quot;Primary DTP series is complete. Client is due for tetanus and diphtheria booster dose&quot;:\n  Encounter.&quot;Three DTP primary series doses were administered&quot;\n    and Encounter.&quot;No tetanus and diphtheria booster doses were administered&quot;\n    and Encounter.&quot;The latest DTP dose was administered more than 1 year ago&quot;\n\n/*\n@output: Primary DTP series is complete. Client is due for tetanus and diphtheria booster dose Guidance\n@guidance: Should vaccinate client with first tetanus and diphtheria booster dose as the latest DTP dose was administered more than 1 year ago. \nCheck for contraindications.\n*/\ndefine &quot;Primary DTP series is complete. Client is due for tetanus and diphtheria booster dose Guidance&quot;:\n 'Should vaccinate client with first tetanus and diphtheria booster dose as the latest DTP dose was administered more than 1 year ago. \nCheck for contraindications.'\n\n/*\n@output: Client is not due for tetanus and diphtheria booster dose\n@pseudocode: &quot;Immunization recommendation status&quot; = &quot;Not due&quot; (where &quot;Vaccine type&quot; = &quot;Tetanus and diphtheria-containing vaccines&quot;)\n*/\ndefine &quot;Client is not due for tetanus and diphtheria booster dose&quot;:\n  Encounter.&quot;Three DTP primary series doses were administered&quot;\n    and Encounter.&quot;One tetanus and diphtheria booster dose was administered&quot;\n    and Encounter.&quot;The latest tetanus and diphtheria dose was administered less than 1 year ago&quot;\n\n/*\n@output: Client is not due for tetanus and diphtheria booster dose Guidance\n@guidance: Should not vaccinate client with second tetanus and diphtheria booster dose as the latest tetanus and diphtheria dose was administered less than 1 year ago. \nCheck for any other vaccines due and inform the caregiver of when to come back for second tetanus and diphtheria booster dose.\n*/\ndefine &quot;Client is not due for tetanus and diphtheria booster dose Guidance&quot;:\n 'Should not vaccinate client with second tetanus and diphtheria booster dose as the latest tetanus and diphtheria dose was administered less than 1 year ago. \nCheck for any other vaccines due and inform the caregiver of when to come back for second tetanus and diphtheria booster dose.'\n\n/*\n@output: Client is due for tetanus and diphtheria booster dose\n@pseudocode: &quot;Immunization recommendation status&quot; = &quot;Due&quot; (where &quot;Vaccine type&quot; = &quot;Tetanus and diphtheria-containing vaccines&quot;)\n*/\ndefine &quot;Client is due for tetanus and diphtheria booster dose&quot;:\n  Encounter.&quot;Three DTP primary series doses were administered&quot;\n    and Encounter.&quot;One tetanus and diphtheria booster dose was administered&quot;\n    and Encounter.&quot;The latest tetanus and diphtheria dose was administered more than 1 year ago&quot;\n\n/*\n@output: Client is due for tetanus and diphtheria booster dose Guidance\n@guidance: Should vaccinate client with second tetanus and diphtheria booster dose as the latest tetanus and diphtheria dose was administered more than 1 year ago. \nCheck for contraindications.\n*/\ndefine &quot;Client is due for tetanus and diphtheria booster dose Guidance&quot;:\n 'Should vaccinate client with second tetanus and diphtheria booster dose as the latest tetanus and diphtheria dose was administered more than 1 year ago. \nCheck for contraindications.'\n\n/*\n@output: Tetanus and diphtheria immunization schedule is complete\n@pseudocode: &quot;Immunization recommendation status&quot; = &quot;Complete&quot; (where &quot;Vaccine type&quot; = &quot;Tetanus and diphtheria-containing vaccines&quot;)\n*/\ndefine &quot;Tetanus and diphtheria immunization schedule is complete&quot;:\n  Encounter.&quot;Three DTP primary series doses were administered&quot;\n    and Encounter.&quot;Two tetanus and diphtheria booster doses were administered&quot;\n\n/*\n@output: Tetanus and diphtheria immunization schedule is complete Guidance\n@guidance: Tetanus and diphtheria immunization schedule is complete. Three DTP primary series doses and two tetanus and diphtheria booster doses were administered.\nCheck for any other vaccines due.\n*/\ndefine &quot;Tetanus and diphtheria immunization schedule is complete Guidance&quot;:\n 'Tetanus and diphtheria immunization schedule is complete. Three DTP primary series doses and two tetanus and diphtheria booster doses were administered.\nCheck for any other vaccines due.'\n\n/*\n@output: Primary DTP series is complete. Client is not due for pertussis booster dose\n@pseudocode: &quot;Immunization recommendation status&quot; = &quot;Not due&quot; (where &quot;Vaccine type&quot; = &quot;Pertussis-containing vaccines&quot;)\n*/\ndefine &quot;Primary DTP series is complete. Client is not due for pertussis booster dose&quot;:\n  Encounter.&quot;Three DTP primary series doses were administered&quot;\n    and Encounter.&quot;No pertussis booster doses were administered&quot;\n    and Encounter.&quot;Client's age is between 1 year and 6 years&quot;\n    and Encounter.&quot;The latest DTP dose was administered less than 6 months ago&quot;\n\n/*\n@output: Primary DTP series is complete. Client is not due for pertussis booster dose Guidance\n@guidance: Should not vaccinate client with pertussis booster dose as the latest DTP dose was administered less than 6 months ago. \nCheck for any other vaccines due and inform the caregiver of when to come back for pertussis booster dose.\n*/\ndefine &quot;Primary DTP series is complete. Client is not due for pertussis booster dose Guidance&quot;:\n 'Should not vaccinate client with pertussis booster dose as the latest DTP dose was administered less than 6 months ago. \nCheck for any other vaccines due and inform the caregiver of when to come back for pertussis booster dose.'\n\n/*\n@output: Primary DTP series is complete. Client is due for pertussis booster dose\n@pseudocode: &quot;Immunization recommendation status&quot; = &quot;Due&quot; (where &quot;Vaccine type&quot; = &quot;Pertussis-containing vaccines&quot;)\n*/\ndefine &quot;Primary DTP series is complete. Client is due for pertussis booster dose&quot;:\n  Encounter.&quot;Three DTP primary series doses were administered&quot;\n    and Encounter.&quot;No pertussis booster doses were administered&quot;\n    and Encounter.&quot;Client's age is between 1 year and 6 years&quot;\n    and Encounter.&quot;The latest DTP dose was administered more than 6 months ago&quot;\n\n/*\n@output: Primary DTP series is complete. Client is due for pertussis booster dose Guidance\n@guidance: Should vaccinate client with pertussis booster dose as no pertussis booster doses were administered, client is within appropriate age range and the latest DTP dose was administered more than 6 months ago. \nCheck for contraindications.\n*/\ndefine &quot;Primary DTP series is complete. Client is due for pertussis booster dose Guidance&quot;:\n 'Should vaccinate client with pertussis booster dose as no pertussis booster doses were administered, client is within appropriate age range and the latest DTP dose was administered more than 6 months ago. \nCheck for contraindications.'\n\n/*\n@output: Pertussis immunization schedule is complete Case 1\n@pseudocode: &quot;Immunization recommendation status&quot; = &quot;Complete&quot; (where &quot;Vaccine type&quot; = &quot;Pertussis-containing vaccines&quot;)\n*/\ndefine &quot;Pertussis immunization schedule is complete Case 1&quot;:\n  Encounter.&quot;Three DTP primary series doses were administered&quot;\n    and Encounter.&quot;No pertussis booster doses were administered&quot;\n    and Encounter.&quot;Client's age is more than 6 years&quot;\n\n/*\n@output: Pertussis immunization schedule is complete Case 2\n@pseudocode: &quot;Immunization recommendation status&quot; = &quot;Complete&quot; (where &quot;Vaccine type&quot; = &quot;Pertussis-containing vaccines&quot;)\n*/\ndefine &quot;Pertussis immunization schedule is complete Case 2&quot;:\n  Encounter.&quot;Three DTP primary series doses were administered&quot;\n    and Encounter.&quot;One pertussis booster dose was administered&quot;\n\n/*\n@output: Pertussis immunization schedule is complete\n@pseudocode: &quot;Immunization recommendation status&quot; = &quot;Complete&quot; (where &quot;Vaccine type&quot; = &quot;Pertussis-containing vaccines&quot;)\n*/\ndefine &quot;Pertussis immunization schedule is complete&quot;:\n  &quot;Pertussis immunization schedule is complete Case 1&quot;\n    or &quot;Pertussis immunization schedule is complete Case 2&quot;\n\n/*\n@output: Pertussis immunization schedule is complete Guidance\n@guidance: Pertussis immunization schedule is complete. Three DTP primary series doses were administered.\nCheck for any other vaccines due.\n@guidance: Pertussis immunization schedule is complete. Three DTP primary series doses and one pertussis booster dose were administered.\nCheck for any other vaccines due.\n*/\ndefine &quot;Pertussis immunization schedule is complete Guidance&quot;:\n  case\n    when &quot;Pertussis immunization schedule is complete Case 1&quot; then'Pertussis immunization schedule is complete. Three DTP primary series doses were administered.\nCheck for any other vaccines due.'\n    when &quot;Pertussis immunization schedule is complete Case 2&quot; then'Pertussis immunization schedule is complete. Three DTP primary series doses and one pertussis booster dose were administered.\nCheck for any other vaccines due.'\n    else ''\n  end\n\n\n/*\n@test: Test expected results based on example patients\n*/\ndefine &quot;Test Validation&quot;:\n  case\n    when Patient.id = '33.Agt1y' then &quot;Client is due for DTP vaccination Case 1&quot; and &quot;Guidance&quot; = 'Should vaccinate client with first DTP dose as no DTP doses were administered and client\\'s age is more than 1 year. \nCheck for contraindications.'\n    when Patient.id = '34.DTP1Dlt4w' then &quot;Client is not due for DTP vaccination Case 1&quot; and &quot;Guidance&quot; = 'Should not vaccinate client with second DTP dose as the latest DTP dose was administered less than 4 weeks ago. \nCheck for any other vaccines due and inform the caregiver of when to come back for second DTP dose'\n    when Patient.id = '35.DTP1Dgt4w' then &quot;Client is due for DTP vaccination Case 2&quot; and &quot;Guidance&quot; = 'Should vaccinate client with second DTP dose as the latest DTP dose was administered more than 4 weeks ago.\nCheck for contraindications.'\n    when Patient.id = '36.DTP2Dlt6m' then &quot;Client is not due for DTP vaccination Case 2&quot; and &quot;Guidance&quot; = 'Should not vaccinate client with third DTP dose the latest DTP dose was administered less than 6 months ago. \nCheck for any other vaccines due and inform the caregiver of when to come back for third DTP dose.'\n    when Patient.id = '37.DTP2Dgt6m' then &quot;Client is due for DTP vaccination Case 3&quot; and &quot;Guidance&quot; = 'Should vaccinate client with third DTP dose as the latest DTP dose was administered more than 6 months ago. \nCheck for contraindications.'\n    when Patient.id = '38.DTP3Dlt1y' then &quot;Primary DTP series is complete. Client is not due for tetanus and diphtheria booster dose&quot; and &quot;Primary DTP series is complete. Client is not due for pertussis booster dose&quot; and &quot;Guidance&quot; = 'Should not vaccinate client with first tetanus and diphtheria booster dose as the latest DTP dose was administered less than 1 year ago. \nCheck for any other vaccines due and inform the caregiver of when to come back for first tetanus and diphtheria booster dose.\nShould not vaccinate client with pertussis booster dose as the latest DTP dose was administered less than 6 months ago. \nCheck for any other vaccines due and inform the caregiver of when to come back for pertussis booster dose.'\n    when Patient.id = '39.DTP3Dgt1y' then &quot;Primary DTP series is complete. Client is due for tetanus and diphtheria booster dose&quot; and &quot;Primary DTP series is complete. Client is due for pertussis booster dose&quot; and &quot;Guidance&quot; = 'Should vaccinate client with first tetanus and diphtheria booster dose as the latest DTP dose was administered more than 1 year ago. \nCheck for contraindications.\nShould vaccinate client with pertussis booster dose as no pertussis booster doses were administered, client is within appropriate age range and the latest DTP dose was administered more than 6 months ago. \nCheck for contraindications.'\n    when Patient.id = '40.DTP3Td1Dlt1y' then &quot;Client is not due for tetanus and diphtheria booster dose&quot; and &quot;Primary DTP series is complete. Client is due for pertussis booster dose&quot; and &quot;Guidance&quot; = 'Should not vaccinate client with second tetanus and diphtheria booster dose as the latest tetanus and diphtheria dose was administered less than 1 year ago. \nCheck for any other vaccines due and inform the caregiver of when to come back for second tetanus and diphtheria booster dose.\nShould vaccinate client with pertussis booster dose as no pertussis booster doses were administered, client is within appropriate age range and the latest DTP dose was administered more than 6 months ago. \nCheck for contraindications.'\n    when Patient.id = '41.DTP3Td1Dgt1y' then &quot;Client is due for tetanus and diphtheria booster dose&quot; and &quot;Primary DTP series is complete. Client is due for pertussis booster dose&quot; and &quot;Guidance&quot; = 'Should vaccinate client with second tetanus and diphtheria booster dose as the latest tetanus and diphtheria dose was administered more than 1 year ago. \nCheck for contraindications.\nShould vaccinate client with pertussis booster dose as no pertussis booster doses were administered, client is within appropriate age range and the latest DTP dose was administered more than 6 months ago. \nCheck for contraindications.'\n    when Patient.id = '42.DTP3Td2' then &quot;Tetanus and diphtheria immunization schedule is complete&quot; and &quot;Primary DTP series is complete. Client is not due for pertussis booster dose&quot; and &quot;Guidance&quot; = 'Tetanus and diphtheria immunization schedule is complete. Three DTP primary series doses and two tetanus and diphtheria booster doses were administered.\nCheck for any other vaccines due.\nShould not vaccinate client with pertussis booster dose as the latest DTP dose was administered less than 6 months ago. \nCheck for any other vaccines due and inform the caregiver of when to come back for pertussis booster dose.'\n    when Patient.id = '43.DTP3P0Abt1y6yDlt6m' then &quot;Primary DTP series is complete. Client is not due for pertussis booster dose&quot; and &quot;Primary DTP series is complete. Client is not due for tetanus and diphtheria booster dose&quot; and &quot;Guidance&quot; = 'Should not vaccinate client with first tetanus and diphtheria booster dose as the latest DTP dose was administered less than 1 year ago. \nCheck for any other vaccines due and inform the caregiver of when to come back for first tetanus and diphtheria booster dose.\nShould not vaccinate client with pertussis booster dose as the latest DTP dose was administered less than 6 months ago. \nCheck for any other vaccines due and inform the caregiver of when to come back for pertussis booster dose.'\n    when Patient.id = '44.DTP3P0Abt1y6yDgt6m' then &quot;Primary DTP series is complete. Client is due for pertussis booster dose&quot; and &quot;Primary DTP series is complete. Client is due for tetanus and diphtheria booster dose&quot; and &quot;Guidance&quot; = 'Should vaccinate client with first tetanus and diphtheria booster dose as the latest DTP dose was administered more than 1 year ago. \nCheck for contraindications.\nShould vaccinate client with pertussis booster dose as no pertussis booster doses were administered, client is within appropriate age range and the latest DTP dose was administered more than 6 months ago. \nCheck for contraindications.'\n    when Patient.id = '45.DTP3P0Agt6y' then &quot;Pertussis immunization schedule is complete Case 1&quot; and &quot;Primary DTP series is complete. Client is due for tetanus and diphtheria booster dose&quot; and &quot;Guidance&quot; = 'Should vaccinate client with first tetanus and diphtheria booster dose as the latest DTP dose was administered more than 1 year ago. \nCheck for contraindications.\nPertussis immunization schedule is complete. Three DTP primary series doses were administered.\nCheck for any other vaccines due.'\n    when Patient.id = '46.DTP3P1' then &quot;Pertussis immunization schedule is complete Case 2&quot; and &quot;Primary DTP series is complete. Client is due for tetanus and diphtheria booster dose&quot; and &quot;Guidance&quot; = 'Should vaccinate client with first tetanus and diphtheria booster dose as the latest DTP dose was administered more than 1 year ago. \nCheck for contraindications.\nPertussis immunization schedule is complete. Three DTP primary series doses and one pertussis booster dose were administered.\nCheck for any other vaccines due.'\n    else 'No test case set'\n  end\n</code></pre></td></tr>\n            </table>\n          </td>\n        </tr>\n        \n        \n        \n        \n        \n        <tr>\n          <td colspan=\"2\">\n            <table>\n              <tr><th><b>Content: </b> application/elm+xml</th></tr>\n              <tr><td><pre><code>Encoded data (252736 characters)</code></pre></td></tr>\n            </table>\n          </td>\n        </tr>\n        \n        \n    </table>\n</div>\n</div>"
  },
  "extension" : [{
    "url" : "http://hl7.org/fhir/StructureDefinition/cqf-knowledgeCapability",
    "valueCode" : "computable"
  }],
  "url" : "http://smart.who.int/immunizations/Library/IMMZD2DTDTPDelayedLogic",
  "version" : "0.2.0",
  "name" : "IMMZD2DTDTPDelayedLogic",
  "title" : "IMMZD2DTDTPDelayedLogic",
  "status" : "draft",
  "experimental" : true,
  "type" : {
    "coding" : [{
      "system" : "http://terminology.hl7.org/CodeSystem/library-type",
      "code" : "logic-library"
    }]
  },
  "date" : "2025-06-25T20:08:00+00:00",
  "publisher" : "WHO",
  "contact" : [{
    "name" : "WHO",
    "telecom" : [{
      "system" : "url",
      "value" : "http://who.int"
    }]
  }],
  "description" : "This library defines decision support logic for the IMMZ.D2.DT.DTP.Delayed or interrupted series decision table in the Immunization CPG",
  "relatedArtifact" : [{
    "type" : "depends-on",
    "display" : "Library Encounter",
    "resource" : "http://smart.who.int/immunizations/Library/IMMZD2DTDTPEncounterElements"
  }],
  "parameter" : [{
    "name" : "Today",
    "use" : "in",
    "min" : 0,
    "max" : "1",
    "type" : "date"
  },
  {
    "name" : "Patient",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "Patient"
  },
  {
    "name" : "Primary DTP series is complete. Client is not due for tetanus and diphtheria booster dose",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "boolean"
  },
  {
    "name" : "Primary DTP series is complete. Client is not due for pertussis booster dose",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "boolean"
  },
  {
    "name" : "Primary DTP series is complete. Client is not due for tetanus and diphtheria booster dose Guidance",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "string"
  },
  {
    "name" : "Primary DTP series is complete. Client is not due for pertussis booster dose Guidance",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "string"
  },
  {
    "name" : "Primary DTP series is complete. Client is due for pertussis booster dose",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "boolean"
  },
  {
    "name" : "Primary DTP series is complete. Client is due for pertussis booster dose Guidance",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "string"
  },
  {
    "name" : "Pertussis immunization schedule is complete Case 1",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "boolean"
  },
  {
    "name" : "Pertussis immunization schedule is complete Case 2",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "boolean"
  },
  {
    "name" : "Pertussis immunization schedule is complete",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "boolean"
  },
  {
    "name" : "Pertussis immunization schedule is complete Guidance",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "string"
  },
  {
    "name" : "Primary DTP series is complete. Client is due for tetanus and diphtheria booster dose",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "boolean"
  },
  {
    "name" : "Primary DTP series is complete. Client is due for tetanus and diphtheria booster dose Guidance",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "string"
  },
  {
    "name" : "Client is not due for tetanus and diphtheria booster dose",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "boolean"
  },
  {
    "name" : "Client is not due for tetanus and diphtheria booster dose Guidance",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "string"
  },
  {
    "name" : "Client is due for tetanus and diphtheria booster dose",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "boolean"
  },
  {
    "name" : "Client is due for tetanus and diphtheria booster dose Guidance",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "string"
  },
  {
    "name" : "Tetanus and diphtheria immunization schedule is complete",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "boolean"
  },
  {
    "name" : "Tetanus and diphtheria immunization schedule is complete Guidance",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "string"
  },
  {
    "name" : "Client is due for DTP vaccination Case 1",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "boolean"
  },
  {
    "name" : "Client is due for DTP vaccination Case 2",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "boolean"
  },
  {
    "name" : "Client is due for DTP vaccination Case 3",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "boolean"
  },
  {
    "name" : "Client is due for DTP vaccination",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "boolean"
  },
  {
    "name" : "Client is due for DTP vaccination Guidance",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "string"
  },
  {
    "name" : "Client is not due for DTP vaccination Case 1",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "boolean"
  },
  {
    "name" : "Client is not due for DTP vaccination Case 2",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "boolean"
  },
  {
    "name" : "Client is not due for DTP vaccination",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "boolean"
  },
  {
    "name" : "Client is not due for DTP vaccination Guidance",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "string"
  },
  {
    "name" : "Guidance",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "string"
  },
  {
    "name" : "Has Guidance",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "boolean"
  },
  {
    "name" : "Test Validation",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "Resource"
  }],
  "content" : [{
    "contentType" : "text/cql",
    "data" : ""
  },
  {
    "contentType" : "application/elm+xml",
    "data" : ""
  }]
}