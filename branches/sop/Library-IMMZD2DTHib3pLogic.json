{
  "resourceType" : "Library",
  "id" : "IMMZD2DTHib3pLogic",
  "meta" : {
    "profile" : ["http://hl7.org/fhir/uv/crmi/StructureDefinition/crmi-shareablelibrary",
    "http://hl7.org/fhir/uv/crmi/StructureDefinition/crmi-publishablelibrary",
    "http://hl7.org/fhir/uv/cql/StructureDefinition/cql-library",
    "http://hl7.org/fhir/uv/cql/StructureDefinition/cql-module"]
  },
  "text" : {
    "status" : "extensions",
    "div" : "<div xmlns=\"http://www.w3.org/1999/xhtml\">\n<div>\n    <table class=\"grid dict\">\n        \n        \n        <tr>\n            <th scope=\"row\"><b>Title: </b></th>\n            <td style=\"padding-left: 4px;\">IMMZD2DTHib3pLogic</td>\n        </tr>\n        \n\n        \n        \n        <tr>\n            <th scope=\"row\"><b>Id: </b></th>\n            <td style=\"padding-left: 4px;\">IMMZD2DTHib3pLogic</td>\n        </tr>\n        \n\n        \n        \n        <tr>\n            <th scope=\"row\"><b>Version: </b></th>\n            <td style=\"padding-left: 4px;\">0.2.0</td>\n        </tr>\n        \n\n        \n        <tr>\n            <th scope=\"row\"><b>Url: </b></th>\n            <td style=\"padding-left: 4px;\"><a href=\"Library-IMMZD2DTHib3pLogic.html\">IMMZD2DTHib3pLogic</a></td>\n        </tr>\n        \n\n        \n\n        \n\n        \n        <tr>\n            <th scope=\"row\"><b>Status: </b></th>\n            <td style=\"padding-left: 4px;\">draft</td>\n        </tr>\n        \n\n        \n        <tr>\n            <th scope=\"row\"><b>Experimental: </b></th>\n            <td style=\"padding-left: 4px;\">true</td>\n        </tr>\n        \n\n        \n        <tr>\n            <th scope=\"row\"><b>Type: </b></th>\n            <td style=\"padding-left: 4px;\">\n                \n                    \n                        \n                        <p style=\"margin-bottom: 5px;\">\n                            <b>system: </b> <span><a href=\"http://terminology.hl7.org/6.0.2/CodeSystem-library-type.html\">http://terminology.hl7.org/CodeSystem/library-type</a></span>\n                        </p>\n                        \n                        \n                        <p style=\"margin-bottom: 5px;\">\n                            <b>code: </b> <span>logic-library</span>\n                        </p>\n                        \n                        \n                    \n                \n                \n            </td>\n        </tr>\n        \n\n        \n\n        \n        <tr>\n            <th scope=\"row\"><b>Date: </b></th>\n            <td style=\"padding-left: 4px;\">2025-06-25 20:08:00+0000</td>\n        </tr>\n        \n\n        \n        <tr>\n            <th scope=\"row\"><b>Publisher: </b></th>\n            <td style=\"padding-left: 4px;\">WHO</td>\n        </tr>\n        \n\n        \n        <tr>\n            <th scope=\"row\"><b>Description: </b></th>\n            <td style=\"padding-left: 4px;\"><div><p>This library defines decision support logic for the IMMZ.D2.DT.Hib.3 doses decision table in the Immunization CPG</p>\n</div></td>\n        </tr>\n        \n\n        \n\n        \n\n        \n\n        \n\n        \n\n        \n\n        \n\n        \n\n        \n\n        \n\n        \n        <tr>\n            <th scope=\"row\"><b>Related Artifacts: </b></th>\n            <td style=\"padding-left: 4px;\">\n                \n                \n                \n                <p><b>Dependencies</b></p>\n                <ul>\n                  \n                    <li><a href=\"Library-IMMZD2DTHibEncounterElements.html\">IMMZD2DTHibEncounterElements</a></li>\n                  \n                </ul>\n                \n                \n                \n                \n                \n            </td>\n        </tr>\n        \n\n        \n        <tr>\n          <th scope=\"row\"><b>Parameters: </b></th>\n          <td style=\"padding-left: 4px;\">\n            <table class=\"grid-dict\">\n              <tr><th><b>Name</b></th><th><b>Type</b></th><th><b>Min</b></th><th><b>Max</b></th><th><b>In/Out</b></th></tr>\n              \n                <tr><th>Today</th><th>date</th><th>0</th><th>1</th><th>In</th></tr>\n              \n                <tr><th>Patient</th><th>Patient</th><th>0</th><th>1</th><th>Out</th></tr>\n              \n                <tr><th>Client is not due for Hib vaccination Case 1</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>\n              \n                <tr><th>Client is not due for Hib vaccination Case 2</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>\n              \n                <tr><th>Client is not due for Hib vaccination Case 3</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>\n              \n                <tr><th>Client is not due for Hib vaccination Case 4</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>\n              \n                <tr><th>Client is not due for Hib vaccination</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>\n              \n                <tr><th>Client is not due for Hib vaccination Guidance</th><th>string</th><th>0</th><th>1</th><th>Out</th></tr>\n              \n                <tr><th>Client is due for Hib vaccination Case 1</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>\n              \n                <tr><th>Client is due for Hib vaccination Case 2</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>\n              \n                <tr><th>Client is due for Hib vaccination Case 3</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>\n              \n                <tr><th>Client is due for Hib vaccination</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>\n              \n                <tr><th>Client is due for Hib vaccination Guidance</th><th>string</th><th>0</th><th>1</th><th>Out</th></tr>\n              \n                <tr><th>Hib immunization schedule is complete Case 1</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>\n              \n                <tr><th>Hib immunization schedule is complete Case 2</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>\n              \n                <tr><th>Hib immunization schedule is complete</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>\n              \n                <tr><th>Hib immunization schedule is complete Guidance</th><th>string</th><th>0</th><th>1</th><th>Out</th></tr>\n              \n                <tr><th>Guidance</th><th>string</th><th>0</th><th>1</th><th>Out</th></tr>\n              \n                <tr><th>Has Guidance</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>\n              \n                <tr><th>Test Validation</th><th>Resource</th><th>0</th><th>1</th><th>Out</th></tr>\n              \n            </table>\n          </td>\n        </tr>\n        \n\n        \n\n        \n        \n        <tr>\n          <td colspan=\"2\">\n            <table>\n              <tr><th><a id=\"cql-content\"><b>Content: </b></a> text/cql</th></tr>\n              <tr><td><pre><code class=\"language-cql\">\n/*\n * Library: IMMZD2DTHib3pLogic (IMMZ.D2.DT.Hib.3 doses)\n * Rule: Determine if the client is due for a Haemophilus influenzae type b (Hib) vaccination according to the national immunization schedule\n * Decision Table: 3 primary doses without a booster dose (3p)\n * Trigger: IMMZ.D2 Determine required vaccination(s) if any\n */\nlibrary IMMZD2DTHib3pLogic\n\nusing FHIR version '4.0.1'\ninclude FHIRHelpers version '4.0.1'\n\ninclude IMMZD2DTHibEncounterElements called Encounter\n\nparameter Today Date default Today()\n\ncontext Patient\n\n/*\n@dynamicValue: Guidance\n*/\ndefine &quot;Guidance&quot;:\n  case\n    when &quot;Client is not due for Hib vaccination&quot; then &quot;Client is not due for Hib vaccination Guidance&quot;\n    when &quot;Client is due for Hib vaccination&quot; then &quot;Client is due for Hib vaccination Guidance&quot;\n    when &quot;Hib immunization schedule is complete&quot; then &quot;Hib immunization schedule is complete Guidance&quot;\n    else ''\n  end\n\ndefine &quot;Has Guidance&quot;:\n  &quot;Guidance&quot; is not null and &quot;Guidance&quot; != ''\n\n/*\n@output: Client is not due for Hib vaccination Case 1\n@pseudocode: &quot;Immunization recommendation status&quot; = &quot;Not due&quot;\n*/\ndefine &quot;Client is not due for Hib vaccination Case 1&quot;:\n  Encounter.&quot;Client's age is less than 6 weeks&quot;\n\n/*\n@output: Client is not due for Hib vaccination Case 2\n@pseudocode: &quot;Immunization recommendation status&quot; = &quot;Not due&quot;\n*/\ndefine &quot;Client is not due for Hib vaccination Case 2&quot;:\n  Encounter.&quot;One Hib primary series dose was administered&quot;\n    and Encounter.&quot;Client's age is at least 6 weeks and not more than 5 years&quot;\n    and Encounter.&quot;Client's age was less than 1 year when first Hib dose was administered&quot;\n    and Encounter.&quot;The latest Hib dose was administered less than 4 weeks ago&quot;\n\n/*\n@output: Client is not due for Hib vaccination Case 3\n@pseudocode: &quot;Immunization recommendation status&quot; = &quot;Not due&quot;\n*/\ndefine &quot;Client is not due for Hib vaccination Case 3&quot;:\n  Encounter.&quot;Two Hib primary series doses were administered&quot;\n    and Encounter.&quot;Client's age is between 6 weeks and not more than 5 years&quot;\n    and Encounter.&quot;The latest Hib dose was administered less than 4 weeks ago&quot;\n\n/*\n@output: Client is not due for Hib vaccination Case 4\n@pseudocode: &quot;Immunization recommendation status&quot; = &quot;Not due&quot;\n*/\ndefine &quot;Client is not due for Hib vaccination Case 4&quot;:\n  Encounter.&quot;Client's age is more than 5 years&quot;\n\n/*\n@output: Client is not due for Hib vaccination\n@pseudocode: &quot;Immunization recommendation status&quot; = &quot;Not due&quot;\n*/\ndefine &quot;Client is not due for Hib vaccination&quot;:\n  &quot;Client is not due for Hib vaccination Case 1&quot;\n    or &quot;Client is not due for Hib vaccination Case 2&quot;\n    or &quot;Client is not due for Hib vaccination Case 3&quot;\n    or &quot;Client is not due for Hib vaccination Case 4&quot;\n\n/*\n@output: Client is not due for Hib vaccination Guidance\n@guidance: Should not vaccinate client with first Hib dose as client's age is less than 6 weeks. \nCheck for any other vaccines due and inform the caregiver of when to come back for first dose.\n@guidance: Should not vaccinate client with second Hib dose as latest Hib dose was administered less than 4 weeks ago. \nCheck for any other vaccines due and inform the caregiver of when to come back for second dose.\n@guidance: Should not vaccinate client with third Hib dose as latest Hib dose was administered less than 4 weeks ago. \nCheck for any other vaccines due and inform the caregiver of when to come back for third dose.\n@guidance: Should not vaccinate client with Hib dose as client is more than 5 years old and Hib vaccination is not required for healthy children aged over 5 years. \nCheck for any other vaccines due.\n*/\ndefine &quot;Client is not due for Hib vaccination Guidance&quot;:\n  case\n    when &quot;Client is not due for Hib vaccination Case 1&quot; then 'Should not vaccinate client with first Hib dose as client\\'s age is less than 6 weeks. \nCheck for any other vaccines due and inform the caregiver of when to come back for first dose.'\n    when &quot;Client is not due for Hib vaccination Case 2&quot; then 'Should not vaccinate client with second Hib dose as latest Hib dose was administered less than 4 weeks ago. \nCheck for any other vaccines due and inform the caregiver of when to come back for second dose.'\n    when &quot;Client is not due for Hib vaccination Case 3&quot; then 'Should not vaccinate client with third Hib dose as latest Hib dose was administered less than 4 weeks ago. \nCheck for any other vaccines due and inform the caregiver of when to come back for third dose.'\n    when &quot;Client is not due for Hib vaccination Case 4&quot; then 'Should not vaccinate client with Hib dose as client is more than 5 years old and Hib vaccination is not required for healthy children aged over 5 years. \nCheck for any other vaccines due.'\n    else ''\n  end\n\n/*\n@output: Client is due for Hib vaccination Case 1\n@pseudocode: &quot;Immunization recommendation status&quot; = &quot;Due&quot;\n*/\ndefine &quot;Client is due for Hib vaccination Case 1&quot;:\n  Encounter.&quot;No Hib primary series doses were administered&quot;\n    and Encounter.&quot;Client's age is between 6 weeks and 5 years&quot;\n\n/*\n@output: Client is due for Hib vaccination Case 2\n@pseudocode: &quot;Immunization recommendation status&quot; = &quot;Due&quot;\n*/\ndefine &quot;Client is due for Hib vaccination Case 2&quot;:\n  Encounter.&quot;One Hib primary series dose was administered&quot;\n    and Encounter.&quot;Client's age is at least 6 weeks and not more than 5 years&quot;\n    and Encounter.&quot;Client's age was less than 1 year when first Hib dose was administered&quot;\n    and Encounter.&quot;The latest Hib dose was administered more than 4 weeks ago&quot;\n\n/*\n@output: Client is due for Hib vaccination Case 3\n@pseudocode: &quot;Immunization recommendation status&quot; = &quot;Due&quot;\n*/\ndefine &quot;Client is due for Hib vaccination Case 3&quot;:\n  Encounter.&quot;Two Hib primary series doses were administered&quot;\n    and Encounter.&quot;Client's age is between 6 weeks and not more than 5 years&quot;\n    and Encounter.&quot;Client's age was more than 1 year when first Hib dose was administered&quot;\n    and Encounter.&quot;The latest Hib dose was administered more than 4 weeks ago&quot;\n\n/*\n@output: Client is due for Hib vaccination\n@pseudocode: &quot;Immunization recommendation status&quot; = &quot;Due&quot;\n*/\ndefine &quot;Client is due for Hib vaccination&quot;:\n  &quot;Client is due for Hib vaccination Case 1&quot;\n    or &quot;Client is due for Hib vaccination Case 2&quot;\n    or &quot;Client is due for Hib vaccination Case 3&quot;\n\n/*\n@output: Client is due for Hib vaccination Guidance\n@guidance: Should vaccinate client with first Hib dose as no Hib doses were administered and client is within appropriate age range. \nCheck for contraindications.\n@guidance: Should vaccinate client with second Hib dose as client's age was less than 1 year when first Hib dose was administered and the latest Hib dose was administered more than 4 weeks ago. \nCheck for contraindications.\n@guidance: Should vaccinate client with third Hib dose as client is within appropriate age range and latest Hib dose was administered more than 4 weeks ago. \nCheck for contraindications.\n*/\ndefine &quot;Client is due for Hib vaccination Guidance&quot;:\n  case\n    when &quot;Client is due for Hib vaccination Case 1&quot; then 'Should vaccinate client with first Hib dose as no Hib doses were administered and client is within appropriate age range. \nCheck for contraindications.'\n    when &quot;Client is due for Hib vaccination Case 2&quot; then 'Should vaccinate client with second Hib dose as client\\'s age was less than 1 year when first Hib dose was administered and the latest Hib dose was administered more than 4 weeks ago. \nCheck for contraindications.'\n    when &quot;Client is due for Hib vaccination Case 3&quot; then 'Should vaccinate client with third Hib dose as client is within appropriate age range and latest Hib dose was administered more than 4 weeks ago. \nCheck for contraindications.'\n    else ''\n  end\n\n/*\n@output: Hib immunization schedule is complete Case 1\n@pseudocode: &quot;Immunization recommendation status&quot; = &quot;Complete&quot;\n*/\ndefine &quot;Hib immunization schedule is complete Case 1&quot;:\n  Encounter.&quot;One Hib primary series dose was administered&quot;\n    and Encounter.&quot;Client's age is at least 6 weeks and not more than 5 years&quot;\n    and Encounter.&quot;Client's age was more than 1 year when first Hib dose was administered&quot;\n\n/*\n@output: Hib immunization schedule is complete Case 2\n@pseudocode: &quot;Immunization recommendation status&quot; = &quot;Complete&quot;\n*/\ndefine &quot;Hib immunization schedule is complete Case 2&quot;:\n  Encounter.&quot;Three Hib primary series doses were administered&quot;\n\n/*\n@output: Hib immunization schedule is complete\n@pseudocode: &quot;Immunization recommendation status&quot; = &quot;Complete&quot;\n*/\ndefine &quot;Hib immunization schedule is complete&quot;:\n  &quot;Hib immunization schedule is complete Case 1&quot;\n    or &quot;Hib immunization schedule is complete Case 2&quot;\n\n/*\n@output: Hib immunization schedule is complete Guidance\n@guidance: Hib immunization schedule is complete as client's age was more than 1 year when first Hib dose was administered. One Hib primary series dose was administered.\nCheck for any other vaccines due.\n@guidance: Hib immunization schedule is complete. Three Hib primary series doses were administered. \nCheck for any vaccines due.\n*/\ndefine &quot;Hib immunization schedule is complete Guidance&quot;:\n  case\n    when &quot;Hib immunization schedule is complete Case 1&quot; then 'Hib immunization schedule is complete as client\\'s age was more than 1 year when first Hib dose was administered. One Hib primary series dose was administered.\nCheck for any other vaccines due.'\n    when &quot;Hib immunization schedule is complete Case 2&quot; then 'Hib immunization schedule is complete. Three Hib primary series doses were administered. \nCheck for any vaccines due.'\n    else ''\n  end\n\n\n/*\n@test: Test expected results based on example patients\n*/\ndefine &quot;Test Validation&quot;:\n  case\n    when Patient.id = '08.Alt6w' then &quot;Client is not due for Hib vaccination Case 1&quot; and &quot;Guidance&quot; = 'Should not vaccinate client with first Hib dose as client\\'s age is less than 6 weeks. \nCheck for any other vaccines due and inform the caregiver of when to come back for first dose.'\n    when Patient.id = '09.Abt6w5y' then &quot;Client is due for Hib vaccination Case 1&quot; and &quot;Guidance&quot; = 'Should vaccinate client with first Hib dose as no Hib doses were administered and client is within appropriate age range. \nCheck for contraindications.'\n    when Patient.id = '10.D1Abt6w5yFlt1yDlt4w' then &quot;Client is not due for Hib vaccination Case 2&quot; and &quot;Guidance&quot; = 'Should not vaccinate client with second Hib dose as latest Hib dose was administered less than 4 weeks ago. \nCheck for any other vaccines due and inform the caregiver of when to come back for second dose.'\n    when Patient.id = '11.D1Abt6w5yFlt1yDgt4w' then &quot;Client is due for Hib vaccination Case 2&quot; and &quot;Guidance&quot; = 'Should vaccinate client with second Hib dose as client\\'s age was less than 1 year when first Hib dose was administered and the latest Hib dose was administered more than 4 weeks ago. \nCheck for contraindications.'\n    when Patient.id = '12.D1Abt6w5yFgt1y' then &quot;Hib immunization schedule is complete Case 1&quot; and &quot;Guidance&quot; = 'Hib immunization schedule is complete as client\\'s age was more than 1 year when first Hib dose was administered. One Hib primary series dose was administered.\nCheck for any other vaccines due.'\n    when Patient.id = '13.D2Abt6w5yDlt4w' then &quot;Client is not due for Hib vaccination Case 3&quot; and &quot;Guidance&quot; = 'Should not vaccinate client with third Hib dose as latest Hib dose was administered less than 4 weeks ago. \nCheck for any other vaccines due and inform the caregiver of when to come back for third dose.'\n    when Patient.id = '14.D2Abt6w5yDgt4w' then &quot;Client is due for Hib vaccination Case 3&quot; and &quot;Guidance&quot; = 'Should vaccinate client with third Hib dose as client is within appropriate age range and latest Hib dose was administered more than 4 weeks ago. \nCheck for contraindications.'\n    when Patient.id = '15.D3' then &quot;Hib immunization schedule is complete Case 2&quot; and &quot;Guidance&quot; = 'Hib immunization schedule is complete. Three Hib primary series doses were administered. \nCheck for any vaccines due.'\n    when Patient.id = '16.Agt5y' then &quot;Client is not due for Hib vaccination Case 4&quot; and &quot;Guidance&quot; = 'Should not vaccinate client with Hib dose as client is more than 5 years old and Hib vaccination is not required for healthy children aged over 5 years. \nCheck for any other vaccines due.'\n    else 'No test case set'\n  end\n</code></pre></td></tr>\n            </table>\n          </td>\n        </tr>\n        \n        \n        \n        \n        \n        <tr>\n          <td colspan=\"2\">\n            <table>\n              <tr><th><b>Content: </b> application/elm+xml</th></tr>\n              <tr><td><pre><code>Encoded data (119876 characters)</code></pre></td></tr>\n            </table>\n          </td>\n        </tr>\n        \n        \n    </table>\n</div>\n</div>"
  },
  "extension" : [{
    "url" : "http://hl7.org/fhir/StructureDefinition/cqf-knowledgeCapability",
    "valueCode" : "computable"
  }],
  "url" : "http://smart.who.int/immunizations/Library/IMMZD2DTHib3pLogic",
  "version" : "0.2.0",
  "name" : "IMMZD2DTHib3pLogic",
  "title" : "IMMZD2DTHib3pLogic",
  "status" : "draft",
  "experimental" : true,
  "type" : {
    "coding" : [{
      "system" : "http://terminology.hl7.org/CodeSystem/library-type",
      "code" : "logic-library"
    }]
  },
  "date" : "2025-06-25T20:08:00+00:00",
  "publisher" : "WHO",
  "contact" : [{
    "name" : "WHO",
    "telecom" : [{
      "system" : "url",
      "value" : "http://who.int"
    }]
  }],
  "description" : "This library defines decision support logic for the IMMZ.D2.DT.Hib.3 doses decision table in the Immunization CPG",
  "relatedArtifact" : [{
    "type" : "depends-on",
    "display" : "Library Encounter",
    "resource" : "http://smart.who.int/immunizations/Library/IMMZD2DTHibEncounterElements"
  }],
  "parameter" : [{
    "name" : "Today",
    "use" : "in",
    "min" : 0,
    "max" : "1",
    "type" : "date"
  },
  {
    "name" : "Patient",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "Patient"
  },
  {
    "name" : "Client is not due for Hib vaccination Case 1",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "boolean"
  },
  {
    "name" : "Client is not due for Hib vaccination Case 2",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "boolean"
  },
  {
    "name" : "Client is not due for Hib vaccination Case 3",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "boolean"
  },
  {
    "name" : "Client is not due for Hib vaccination Case 4",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "boolean"
  },
  {
    "name" : "Client is not due for Hib vaccination",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "boolean"
  },
  {
    "name" : "Client is not due for Hib vaccination Guidance",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "string"
  },
  {
    "name" : "Client is due for Hib vaccination Case 1",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "boolean"
  },
  {
    "name" : "Client is due for Hib vaccination Case 2",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "boolean"
  },
  {
    "name" : "Client is due for Hib vaccination Case 3",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "boolean"
  },
  {
    "name" : "Client is due for Hib vaccination",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "boolean"
  },
  {
    "name" : "Client is due for Hib vaccination Guidance",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "string"
  },
  {
    "name" : "Hib immunization schedule is complete Case 1",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "boolean"
  },
  {
    "name" : "Hib immunization schedule is complete Case 2",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "boolean"
  },
  {
    "name" : "Hib immunization schedule is complete",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "boolean"
  },
  {
    "name" : "Hib immunization schedule is complete Guidance",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "string"
  },
  {
    "name" : "Guidance",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "string"
  },
  {
    "name" : "Has Guidance",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "boolean"
  },
  {
    "name" : "Test Validation",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "Resource"
  }],
  "content" : [{
    "contentType" : "text/cql",
    "data" : ""
  },
  {
    "contentType" : "application/elm+xml",
    "data" : ""
  }]
}