<?xml version="1.0" encoding="UTF-8"?>

<Library xmlns="http://hl7.org/fhir">
  <id value="IMMZD5DTYellowfeverCILogic"/>
  <meta>
    <profile value="http://hl7.org/fhir/uv/crmi/StructureDefinition/crmi-shareablelibrary"/>
    <profile value="http://hl7.org/fhir/uv/crmi/StructureDefinition/crmi-publishablelibrary"/>
    <profile value="http://hl7.org/fhir/uv/cql/StructureDefinition/cql-library"/>
    <profile value="http://hl7.org/fhir/uv/cql/StructureDefinition/cql-module"/>
  </meta>
  <text>
    <status value="extensions"/><div xmlns="http://www.w3.org/1999/xhtml">
<div>
    <table class="grid dict">
        
        
        <tr>
            <th scope="row"><b>Title: </b></th>
            <td style="padding-left: 4px;">IMMZD5DTYellowfeverCILogic</td>
        </tr>
        

        
        
        <tr>
            <th scope="row"><b>Id: </b></th>
            <td style="padding-left: 4px;">IMMZD5DTYellowfeverCILogic</td>
        </tr>
        

        
        
        <tr>
            <th scope="row"><b>Version: </b></th>
            <td style="padding-left: 4px;">0.2.0</td>
        </tr>
        

        
        <tr>
            <th scope="row"><b>Url: </b></th>
            <td style="padding-left: 4px;"><a href="Library-IMMZD5DTYellowfeverCILogic.html">IMMZD5DTYellowfeverCILogic</a></td>
        </tr>
        

        

        

        
        <tr>
            <th scope="row"><b>Status: </b></th>
            <td style="padding-left: 4px;">draft</td>
        </tr>
        

        

        
        <tr>
            <th scope="row"><b>Type: </b></th>
            <td style="padding-left: 4px;">
                
                    
                        
                        <p style="margin-bottom: 5px;">
                            <b>system: </b> <span><a href="http://terminology.hl7.org/6.5.0/CodeSystem-library-type.html">http://terminology.hl7.org/CodeSystem/library-type</a></span>
                        </p>
                        
                        
                        <p style="margin-bottom: 5px;">
                            <b>code: </b> <span>logic-library</span>
                        </p>
                        
                        
                    
                
                
            </td>
        </tr>
        

        

        
        <tr>
            <th scope="row"><b>Date: </b></th>
            <td style="padding-left: 4px;">2025-09-19 13:06:04+0000</td>
        </tr>
        

        
        <tr>
            <th scope="row"><b>Publisher: </b></th>
            <td style="padding-left: 4px;">WHO</td>
        </tr>
        

        
        <tr>
            <th scope="row"><b>Description: </b></th>
            <td style="padding-left: 4px;"><div><p>This library defines decision support logic for the IMMZ.D5.DT.Yellow fever contraindications decision table in the Immunization CPG</p>
</div></td>
        </tr>
        

        

        

        

        

        

        

        

        

        

        

        
        <tr>
            <th scope="row"><b>Related Artifacts: </b></th>
            <td style="padding-left: 4px;">
                
                
                
                <p><b>Dependencies</b></p>
                <ul>
                  
                    <li><a href="Library-IMMZD5DTYellowfeverEncounterElements.html">IMMZD5DTYellowfeverEncounterElements</a></li>
                  
                </ul>
                
                
                
                
                
            </td>
        </tr>
        

        
        <tr>
          <th scope="row"><b>Parameters: </b></th>
          <td style="padding-left: 4px;">
            <table class="grid-dict">
              <tr><th><b>Name</b></th><th><b>Type</b></th><th><b>Min</b></th><th><b>Max</b></th><th><b>In/Out</b></th></tr>
              
                <tr><th>Today</th><th>date</th><th>0</th><th>1</th><th>In</th></tr>
              
                <tr><th>Patient</th><th>Patient</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Draft Medication Request ID for Yellow fever dose</th><th>id</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Yellow fever vaccination is contraindicated Case 1</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Yellow fever vaccination is contraindicated Case 2</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Yellow fever vaccination is contraindicated</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Yellow fever vaccination is contraindicated Guidance</th><th>string</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Clinical judgement is required. Create a clinical note Case 1</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Clinical judgement is required. Create a clinical note Case 2</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Clinical judgement is required. Create a clinical note Case 3</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Clinical judgement is required. Create a clinical note Case 4</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Clinical judgement is required. Create a clinical note</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Clinical judgement is required. Create a clinical note Guidance</th><th>string</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Yellow fever vaccination could be contraindicated. Clinical judgement is required. Create a clinical note</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Yellow fever vaccination could be contraindicated. Clinical judgement is required. Create a clinical note Guidance</th><th>string</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Guidance</th><th>string</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Has Guidance</th><th>boolean</th><th>0</th><th>1</th><th>Out</th></tr>
              
                <tr><th>Test Validation</th><th>Resource</th><th>0</th><th>1</th><th>Out</th></tr>
              
            </table>
          </td>
        </tr>
        

        

        
        
        <tr>
          <td colspan="2">
            <table>
              <tr><th><a id="cql-content"><b>Content: </b></a> text/cql</th></tr>
              <tr><td><pre><code class="language-cql">
/*
 * Library: IMMZD5DTYellowfeverCILogic (IMMZ.D5.DT.Yellow fever contraindications)
 * Rule: Check for contraindications before administering the vaccine(s) due	
 * Decision Table: Age
 * Trigger: IMMZ.D5 Determine vaccine(s) to be administered based on contraindications
 */
library IMMZD5DTYellowfeverCILogic

using FHIR version '4.0.1'
include FHIRHelpers version '4.0.1'

include IMMZD5DTYellowfeverEncounterElements called Encounter

parameter Today Date default Today()

context Patient

/*
  @dynamicValue: Draft Medication Request ID for Yellow fever dose
  */
  define &quot;Draft Medication Request ID for Yellow fever dose&quot;:
    First(Encounter.&quot;Draft Medication Request for Yellow fever dose&quot;).id


/*
@dynamicValue: Guidance
*/
define &quot;Guidance&quot;:
  case
    when &quot;Yellow fever vaccination is contraindicated&quot; then &quot;Yellow fever vaccination is contraindicated Guidance&quot;
    when &quot;Clinical judgement is required. Create a clinical note&quot; then &quot;Clinical judgement is required. Create a clinical note Guidance&quot;
    when &quot;Yellow fever vaccination could be contraindicated. Clinical judgement is required. Create a clinical note&quot; then &quot;Yellow fever vaccination could be contraindicated. Clinical judgement is required. Create a clinical note Guidance&quot;
    else ''
  end

define &quot;Has Guidance&quot;:
  &quot;Guidance&quot; is not null and &quot;Guidance&quot; != ''

/*
@output: Yellow fever vaccination is contraindicated Case 1
@pseudocode: &quot;Immunization recommendation status&quot; = &quot;Contraindicated&quot;
*/
define &quot;Yellow fever vaccination is contraindicated Case 1&quot;:
  Encounter.&quot;Client's age is less than 6 months&quot;

/*
@output: Yellow fever vaccination is contraindicated Case 2
@pseudocode: &quot;Immunization recommendation status&quot; = &quot;Contraindicated&quot;
*/
define &quot;Yellow fever vaccination is contraindicated Case 2&quot;:
  Encounter.&quot;The client is severely immunocompromised&quot;

/*
@output: Yellow fever vaccination is contraindicated
@pseudocode: &quot;Immunization recommendation status&quot; = &quot;Contraindicated&quot;
*/
define &quot;Yellow fever vaccination is contraindicated&quot;:
  &quot;Yellow fever vaccination is contraindicated Case 1&quot;
    or &quot;Yellow fever vaccination is contraindicated Case 2&quot;

/*
@output: Yellow fever vaccination is contraindicated Guidance
@guidance: Do not vaccinate client with yellow fever as yellow fever vaccination is contraindicated in client's aged less than 6 months.
@guidance: Do not vaccinate client with yellow fever as yellow fever vaccination is contraindicated in severely immunocompromised clients.
*/
define &quot;Yellow fever vaccination is contraindicated Guidance&quot;:
  case
    when &quot;Yellow fever vaccination is contraindicated Case 1&quot; then 'Do not vaccinate client with yellow fever as yellow fever vaccination is contraindicated in client\'s aged less than 6 months.'
    when &quot;Yellow fever vaccination is contraindicated Case 2&quot; then 'Do not vaccinate client with yellow fever as yellow fever vaccination is contraindicated in severely immunocompromised clients.'
    else ''
  end

/*
@output: Clinical judgement is required. Create a clinical note Case 1
@pseudocode: &quot;Immunization recommendation status&quot; = &quot;Further evaluation needed&quot;
*/
define &quot;Clinical judgement is required. Create a clinical note Case 1&quot;:
  Encounter.&quot;Client's age is 6–9 months&quot;

/*
@output: Clinical judgement is required. Create a clinical note Case 2
@pseudocode: &quot;Immunization recommendation status&quot; = &quot;Further evaluation needed&quot;
*/
define &quot;Clinical judgement is required. Create a clinical note Case 2&quot;:
  Encounter.&quot;Client's age is more than or equal to 60 years&quot;

/*
@output: Clinical judgement is required. Create a clinical note Case 3
@pseudocode: &quot;Immunization recommendation status&quot; = &quot;Further evaluation needed&quot;
*/
define &quot;Clinical judgement is required. Create a clinical note Case 3&quot;:
  Encounter.&quot;The client is currently pregnant&quot;

/*
@output: Clinical judgement is required. Create a clinical note Case 4
@pseudocode: &quot;Immunization recommendation status&quot; = &quot;Further evaluation needed&quot;
*/
define &quot;Clinical judgement is required. Create a clinical note Case 4&quot;:
  Encounter.&quot;The client is lactating&quot;

/*
@output: Clinical judgement is required. Create a clinical note
@pseudocode: &quot;Immunization recommendation status&quot; = &quot;Further evaluation needed&quot;
*/
define &quot;Clinical judgement is required. Create a clinical note&quot;:
  &quot;Clinical judgement is required. Create a clinical note Case 1&quot;
    or &quot;Clinical judgement is required. Create a clinical note Case 2&quot;
    or &quot;Clinical judgement is required. Create a clinical note Case 3&quot;
    or &quot;Clinical judgement is required. Create a clinical note Case 4&quot;

/*
@output: Clinical judgement is required. Create a clinical note Guidance
@guidance: Check if exceptions to age range is being met, consider risks of vaccination and make a clinical judgement. Vaccine is not recommended for those aged 6–8 months, except during epidemics when the risk of infection with the yellow fever virus is very high.
@guidance: Conduct a risk–benefit assessment taking into account the risk of acquiring yellow fever disease, consider risks of potential adverse events following immunization and make a clinical judgement.
@guidance: Conduct a risk–benefit assessment since yellow fever is a live vaccine and make a clinical judgement. Pregnant women may be vaccinated during epidemics at the direction of local health authorities.
@guidance: Conduct a risk–benefit assessment since yellow fever is a live vaccine and make a clinical judgement. Lactating women should be advised that the benefits of breastfeeding far outweigh alternatives.
*/
define &quot;Clinical judgement is required. Create a clinical note Guidance&quot;:
  case
    when &quot;Clinical judgement is required. Create a clinical note Case 1&quot; then 'Check if exceptions to age range is being met, consider risks of vaccination and make a clinical judgement. Vaccine is not recommended for those aged 6–8 months, except during epidemics when the risk of infection with the yellow fever virus is very high.'
    when &quot;Clinical judgement is required. Create a clinical note Case 2&quot; then 'Conduct a risk–benefit assessment taking into account the risk of acquiring yellow fever disease, consider risks of potential adverse events following immunization and make a clinical judgement.'
    when &quot;Clinical judgement is required. Create a clinical note Case 3&quot; then 'Conduct a risk–benefit assessment since yellow fever is a live vaccine and make a clinical judgement. Pregnant women may be vaccinated during epidemics at the direction of local health authorities.'
    when &quot;Clinical judgement is required. Create a clinical note Case 4&quot; then 'Conduct a risk–benefit assessment since yellow fever is a live vaccine and make a clinical judgement. Lactating women should be advised that the benefits of breastfeeding far outweigh alternatives.'
    else ''
  end

/*
@output: Yellow fever vaccination could be contraindicated. Clinical judgement is required. Create a clinical note
@pseudocode: &quot;Immunization recommendation status&quot; = &quot;Further evaluation needed&quot;
*/
define &quot;Yellow fever vaccination could be contraindicated. Clinical judgement is required. Create a clinical note&quot;:
  Encounter.&quot;The client has a history of severe allergic reactions&quot;

/*
@output: Yellow fever vaccination could be contraindicated. Clinical judgement is required. Create a clinical note Guidance
@guidance: Do not vaccinate client with yellow fever if client has severe hypersensitivity to egg antigens.
*/
define &quot;Yellow fever vaccination could be contraindicated. Clinical judgement is required. Create a clinical note Guidance&quot;:
  'Do not vaccinate client with yellow fever if client has severe hypersensitivity to egg antigens.'


/*
@test: Test expected results based on example patients
*/
define &quot;Test Validation&quot;:
  case
    when Patient.id = '16.0' then &quot;Yellow fever vaccination is contraindicated Case 1&quot; and &quot;Guidance&quot; = 'Do not vaccinate client with yellow fever as yellow fever vaccination is contraindicated in client\'s aged less than 6 months.'
    when Patient.id = '17.0' then &quot;Clinical judgement is required. Create a clinical note Case 1&quot; and &quot;Guidance&quot; = 'Check if exceptions to age range is being met, consider risks of vaccination and make a clinical judgement. Vaccine is not recommended for those aged 6–8 months, except during epidemics when the risk of infection with the yellow fever virus is very high.'
    when Patient.id = '18.0' then &quot;Clinical judgement is required. Create a clinical note Case 2&quot; and &quot;Guidance&quot; = 'Conduct a risk–benefit assessment taking into account the risk of acquiring yellow fever disease, consider risks of potential adverse events following immunization and make a clinical judgement.'
    when Patient.id = '19.1' then &quot;Yellow fever vaccination could be contraindicated. Clinical judgement is required. Create a clinical note&quot; and &quot;Guidance&quot; = 'Do not vaccinate client with yellow fever if client has severe hypersensitivity to egg antigens.'
    when Patient.id = '20.1' then &quot;Yellow fever vaccination is contraindicated Case 2&quot; and &quot;Guidance&quot; = 'Do not vaccinate client with yellow fever as yellow fever vaccination is contraindicated in severely immunocompromised clients.'
    when Patient.id = '21.1' then &quot;Clinical judgement is required. Create a clinical note Case 3&quot; and &quot;Guidance&quot; = 'Conduct a risk–benefit assessment since yellow fever is a live vaccine and make a clinical judgement. Pregnant women may be vaccinated during epidemics at the direction of local health authorities.'
    when Patient.id = '22.1' then &quot;Clinical judgement is required. Create a clinical note Case 4&quot; and &quot;Guidance&quot; = 'Conduct a risk–benefit assessment since yellow fever is a live vaccine and make a clinical judgement. Lactating women should be advised that the benefits of breastfeeding far outweigh alternatives.'
    else 'No test case set'
  end
</code></pre></td></tr>
            </table>
          </td>
        </tr>
        
        
        
        
        
        <tr>
          <td colspan="2">
            <table>
              <tr><th><b>Content: </b> application/elm+xml</th></tr>
              <tr><td><pre><code>Encoded data (87960 characters)</code></pre></td></tr>
            </table>
          </td>
        </tr>
        
        
    </table>
</div>
</div>
  </text>
  <extension url="http://hl7.org/fhir/StructureDefinition/cqf-knowledgeCapability">
    <valueCode value="computable"/>
  </extension>
  <url value="http://smart.who.int/immunizations/Library/IMMZD5DTYellowfeverCILogic"/>
  <version value="0.2.0"/>
  <name value="IMMZD5DTYellowfeverCILogic"/>
  <title value="IMMZD5DTYellowfeverCILogic"/>
  <status value="draft"/>
  <experimental value="false"/>
  <type>
    <coding>
      <system value="http://terminology.hl7.org/CodeSystem/library-type"/>
      <code value="logic-library"/>
    </coding>
  </type>
  <date value="2025-09-19T13:06:04+00:00"/>
  <publisher value="WHO"/>
  <contact>
    <name value="WHO"/>
    <telecom>
      <system value="url"/>
      <value value="http://who.int"/>
    </telecom>
  </contact>
  <description value="This library defines decision support logic for the IMMZ.D5.DT.Yellow fever contraindications decision table in the Immunization CPG"/>
  <relatedArtifact>
    <type value="depends-on"/>
    <display value="Library Encounter"/>
    <resource value="http://smart.who.int/immunizations/Library/IMMZD5DTYellowfeverEncounterElements"/>
  </relatedArtifact>
  <parameter>
    <name value="Today"/>
    <use value="in"/>
    <min value="0"/>
    <max value="1"/>
    <type value="date"/>
  </parameter>
  <parameter>
    <name value="Patient"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="Patient"/>
  </parameter>
  <parameter>
    <name value="Draft Medication Request ID for Yellow fever dose"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="id"/>
  </parameter>
  <parameter>
    <name value="Yellow fever vaccination is contraindicated Case 1"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Yellow fever vaccination is contraindicated Case 2"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Yellow fever vaccination is contraindicated"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Yellow fever vaccination is contraindicated Guidance"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="string"/>
  </parameter>
  <parameter>
    <name value="Clinical judgement is required. Create a clinical note Case 1"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Clinical judgement is required. Create a clinical note Case 2"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Clinical judgement is required. Create a clinical note Case 3"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Clinical judgement is required. Create a clinical note Case 4"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Clinical judgement is required. Create a clinical note"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Clinical judgement is required. Create a clinical note Guidance"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="string"/>
  </parameter>
  <parameter>
    <name value="Yellow fever vaccination could be contraindicated. Clinical judgement is required. Create a clinical note"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Yellow fever vaccination could be contraindicated. Clinical judgement is required. Create a clinical note Guidance"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="string"/>
  </parameter>
  <parameter>
    <name value="Guidance"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="string"/>
  </parameter>
  <parameter>
    <name value="Has Guidance"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="boolean"/>
  </parameter>
  <parameter>
    <name value="Test Validation"/>
    <use value="out"/>
    <min value="0"/>
    <max value="1"/>
    <type value="Resource"/>
  </parameter>
  <content>
    <contentType value="text/cql"/>
    <data value=""/>
  </content>
  <content>
    <contentType value="application/elm+xml"/>
    <data value=""/>
  </content>
</Library>