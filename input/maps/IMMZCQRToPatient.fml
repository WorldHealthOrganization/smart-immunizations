map "http://smart.who.int/ig/smart-immunizations/StructureMap/IMMZCQRToPatient" = "IMMZCQRToPatient"

uses "http://hl7.org/fhir/StructureDefinition/QuestionnaireResponse" alias QResp as source
uses "http://smart.who.int/ig/smart-immunizations/StructureDefinition/IMMZCRegisterClient" alias IMMZC as source
uses "http://hl7.org/fhir/StructureDefinition/Patient" alias Patient as target

imports "http://smart.who.int/ig/smart-immunizations/StructureMap/IMMZCQRToLM"
imports "http://smart.who.int/ig/smart-immunizations/StructureMap/IMMZCLMToPatient"

group QRestToIMMZC (
  source qr : QResp,
  target patient: Patient
) {
  qr -> create("http://smart.who.int/ig/smart-immunizations/StructureDefinition/IMMZCRegisterClient") as model 
  then{
    qr -> model then QRespToIMMZC( qr, model) "QRtoLM";
    qr -> patient then IMMZCToPatient( model, patient ) "LMtoPatient";
  } "QRtoPatient";
}

/*
group QRespToIMMZC (
  source qr : QResp,
  target patient : Patient
) {
  qr.item as item then {

    item.answer first as answer where item.linkId = 'uniqueId' -> patient.identifier as identifier then {
      answer.valueString as content -> identifier.value = content  "set identifier";
    } "firstAnswerForIdentifier";

    item as name where item.linkId = 'name' -> patient.name as pname then NameToHumanName( name, pname ) "setNames";

    item.answer first as answer where item.linkId = 'sex' then {
      answer.valueCoding as coding then {
        coding.code as content -> patient.gender = translate(content, 
            'http://worldhealthorganization.github.io/smart-immunizations-mini/ConceptMap/IMMZ.C.SexToAdministrativeGender', 
            'code') "setSex";
      } "processCoding";
    } "firstAnswerForIdentifier2";
  
    item.answer first as answer where item.linkId = 'birthDate' then {
      answer.valueDate as content -> patient.birthDate = content "set birthDate";
    } "firstAnswerForBirthDate";

    item as caregiver where item.linkId = 'caregiver' -> patient.contact as contact, contact.name as hname 
      then NameToHumanName( caregiver, hname ) "set caregiver";

    item.answer first as answer where item.linkId = 'phone' -> patient.telecom as telecom then {
       answer.valueString as content -> telecom.value = content, telecom.system = 'phone' "setPhone";
     } "firstAnswerForPhone";

    item.answer first as answer where item.linkId = 'administrativeArea' -> patient.address as address then {
      answer.valueCoding first as coding -> address then {
        coding.code as content -> address.text = content "setAddressToCode";
        coding.display as content -> address.text = content "setAddressToDisplay";
      } "setAddressText";
    } "firstAnswerForAdministrativeArea";

  } "processItems";

}

group NameToHumanName( 
  source name,
  target hname
) {
  name.item as item then {

    item.answer first as answer where item.linkId = 'fullName' then {
      answer.valueString as content -> hname.text = content "set full name";
    } "firstAnswerForFullName";

    item.answer first as answer where item.linkId = 'firstName' then {
      answer.valueString as content -> hname.given = content "set first name";
    } "firstAnswerForFirstName";

    item.answer first as answer where item.linkId = 'familyName' then {
      answer.valueString as content -> hname.family = content "set family name";
    } "firstAnswerForFamilyName";

  } "processNameItems";
}
*/