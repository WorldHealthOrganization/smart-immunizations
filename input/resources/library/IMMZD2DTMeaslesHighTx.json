{
  "resourceType": "Library",
  "id": "IMMZD2DTMeaslesHighTx",
  "extension": [ {
    "url": "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
    "valueReference": {
      "reference": "Device/cqf-tooling"
    }
  } ],
  "url": "http://smart.who.int/ig/smart-immunizations/Library/IMMZD2DTMeaslesHighTx",
  "name": "IMMZD2DTMeaslesHighTx",
  "relatedArtifact": [ {
    "type": "depends-on",
    "display": "FHIR model information",
    "resource": "http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1"
  }, {
    "type": "depends-on",
    "display": "Library FHIRHelpers",
    "resource": "http://smart.who.int/ig/smart-immunizations/Library/FHIRHelpers|4.0.1"
  }, {
    "type": "depends-on",
    "display": "Library IMMZCom",
    "resource": "http://smart.who.int/ig/smart-immunizations/Library/IMMZCommon"
  }, {
    "type": "depends-on",
    "display": "Library IMMZc",
    "resource": "http://smart.who.int/ig/smart-immunizations/Library/IMMZConcepts"
  }, {
    "type": "depends-on",
    "display": "Library IMMZCon",
    "resource": "http://smart.who.int/ig/smart-immunizations/Library/IMMZConfig"
  }, {
    "type": "depends-on",
    "display": "Library IMMZvl",
    "resource": "http://smart.who.int/ig/smart-immunizations/Library/IMMZVaccineLibrary"
  }, {
    "type": "depends-on",
    "display": "Library FC",
    "resource": "http://smart.who.int/ig/smart-immunizations/Library/FHIRCommon"
  }, {
    "type": "depends-on",
    "display": "Library input",
    "resource": "http://smart.who.int/ig/smart-immunizations/Library/IMMZD2DTMeaslesInput"
  }, {
    "type": "depends-on",
    "display": "Value set MCV Vaccine",
    "resource": "http://smart.who.int/ig/smart-immunizations/ValueSet/IMMZ.Z.DE9"
  }, {
    "type": "depends-on",
    "display": "Value set Live Attenuated",
    "resource": "http://smart.who.int/ig/smart-immunizations/ValueSet/LiveAttenuatedVaccines"
  } ],
  "parameter": [ {
    "name": "Patient",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Patient"
  }, {
    "name": "Client is due for MCV1",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Client is due for MCV2",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Due date of the dose",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "date"
  }, {
    "name": "Routine immunization schedule complete",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Routine immunization schedule complete Guidance",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Client is due for MCV1 Guidance",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Client is due for MCV2 Guidance",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Client is not due for MCV1 Case 1",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Client is not due for MCV1 Case 2",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Client is not due for MCV1",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Client is not due for MCV1 Guidance",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Client is not due for MCV2 Case 1",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Client is not due for MCV2 Case 2",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Client is not due for MCV2",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Client is not due for MCV2 Guidance",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Guidance",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  } ],
  "dataRequirement": [ {
    "type": "Patient",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Patient" ]
  }, {
    "type": "Immunization",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Immunization" ],
    "mustSupport": [ "status", "vaccineCode", "occurrence" ]
  } ],
  "content": [ {
    "contentType": "text/cql",
    "data": ""
  }, {
    "contentType": "application/elm+xml",
    "data": ""
  }, {
    "contentType": "application/elm+json",
    "data": ""
  } ]
}