{
  "resourceType": "Library",
  "id": "IMMZD18SMeaslesDose0HighTx",
  "extension": [ {
    "url": "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
    "valueReference": {
      "reference": "Device/cqf-tooling"
    }
  } ],
  "url": "http://smart.who.int/ig/smart-immunizations/Library/IMMZD18SMeaslesDose0HighTx",
  "name": "IMMZD18SMeaslesDose0HighTx",
  "relatedArtifact": [ {
    "type": "depends-on",
    "display": "FHIR model information",
    "resource": "http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1"
  }, {
    "type": "depends-on",
    "display": "Library FHIRHelpers",
    "resource": "http://smart.who.int/ig/smart-immunizations/Library/FHIRHelpers|4.0.1"
  }, {
    "type": "depends-on",
    "display": "Library IMMZCom",
    "resource": "http://smart.who.int/ig/smart-immunizations/Library/IMMZCommon"
  }, {
    "type": "depends-on",
    "display": "Library IMMZc",
    "resource": "http://smart.who.int/ig/smart-immunizations/Library/IMMZConcepts"
  }, {
    "type": "depends-on",
    "display": "Library IMMZCon",
    "resource": "http://smart.who.int/ig/smart-immunizations/Library/IMMZConfig"
  }, {
    "type": "depends-on",
    "display": "Library IMMZvl",
    "resource": "http://smart.who.int/ig/smart-immunizations/Library/IMMZVaccineLibrary"
  }, {
    "type": "depends-on",
    "display": "Library FC",
    "resource": "http://smart.who.int/ig/smart-immunizations/Library/FHIRCommon"
  }, {
    "type": "depends-on",
    "display": "Library input",
    "resource": "http://smart.who.int/ig/smart-immunizations/Library/IMMZD2DTMeaslesInput"
  }, {
    "type": "depends-on",
    "display": "Value set MCV Vaccine",
    "resource": "http://smart.who.int/ig/smart-immunizations/ValueSet/IMMZ.Z.DE9"
  } ],
  "parameter": [ {
    "name": "Patient",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Patient"
  }, {
    "name": "Measles MCV0 dose Expiration",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "date"
  }, {
    "name": "Measles MCV0 dose",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Measles MCV0 dose Due Date",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "date"
  }, {
    "name": "Measles MCV0 dose Create",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Measles MCV0 dose Overdue",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Any"
  } ],
  "dataRequirement": [ {
    "type": "Patient",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Patient" ]
  }, {
    "type": "Immunization",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Immunization" ],
    "mustSupport": [ "status", "vaccineCode" ]
  } ],
  "content": [ {
    "contentType": "text/cql",
    "data": "LyoKICogTGlicmFyeTogSU1NWkQxOFNNZWFzbGVzRG9zZTBIaWdoVHggKElNTVouRDE4LlMuTWVhc2xlcy5NQ1YgZG9zZSAwIHNjaGVkdWxlLkhpZ2hUeCkKICogU2NoZWR1bGUgVGFibGU6IE1DViBkb3NlIDAgKE1DVjApIHNjaGVkdWxlCiAqLwpsaWJyYXJ5IElNTVpEMThTTWVhc2xlc0Rvc2UwSGlnaFR4Ci8vIFN0YXJ0IFNrZWxldG9uIENRTAp1c2luZyBGSElSIHZlcnNpb24gJzQuMC4xJwppbmNsdWRlIEZISVJIZWxwZXJzIHZlcnNpb24gJzQuMC4xJwppbmNsdWRlIElNTVpDb21tb24gY2FsbGVkIElNTVpDb20KaW5jbHVkZSBJTU1aQ29uY2VwdHMgY2FsbGVkIElNTVpjCmluY2x1ZGUgSU1NWkNvbmZpZyBjYWxsZWQgSU1NWkNvbgppbmNsdWRlIElNTVpWYWNjaW5lTGlicmFyeSBjYWxsZWQgSU1NWnZsCmluY2x1ZGUgRkhJUkNvbW1vbiBjYWxsZWQgRkMKaW5jbHVkZSBJTU1aRDJEVE1lYXNsZXNJbnB1dCBjYWxsZWQgaW5wdXQKCi8vIEVuZCBTa2VsZXRvbiBDUUwKY29udGV4dCBQYXRpZW50CgoKLyoKQG91dHB1dDogTWVhc2xlcyBNQ1YwIGRvc2UKQHRyaWdnZXI6IENoaWxkJ3MgYmlydGgKKi8KZGVmaW5lICJNZWFzbGVzIE1DVjAgZG9zZSI6CglDb3VudChpbnB1dC4iTUNWIERvc2VzIEFkbWluaXN0ZXJlZCB0byBQYXRpZW50IikgPSAwIGFuZCBOb3coKSA8PSAiTWVhc2xlcyBNQ1YwIGRvc2UgRXhwaXJhdGlvbiIKCi8qCkBvdXRwdXQ6IE1lYXNsZXMgTUNWMCBkb3NlIENyZWF0ZQpAY3JlYXRlOiBJbiB0aGUgZm9sbG93aW5nIHNpdHVhdGlvbnMsIGEgc3VwcGxlbWVudGFyeSBkb3NlIG9mIE1DViBzaG91bGQgYmUgZ2l2ZW4gdG8gaW5mYW50cyBmcm9tIDYgbW9udGhzIG9mIGFnZTogCi0JKDEpIGR1cmluZyBhIG1lYXNsZXMgb3V0YnJlYWsgYXMgcGFydCBvZiBpbnRlbnNpZmllZCBzZXJ2aWNlIGRlbGl2ZXJ5OwotCSgyKSBkdXJpbmcgY2FtcGFpZ25zIGluIHNldHRpbmdzIHdoZXJlIHRoZSByaXNrIG9mIG1lYXNsZXMgYW1vbmcgaW5mYW50cyA8IDkgbW9udGhzIG9mIGFnZSByZW1haW5zIGhpZ2ggKGUuZy4gaW4gZW5kZW1pYyBjb3VudHJpZXMgZXhwZXJpZW5jaW5nIHJlZ3VsYXIgb3V0YnJlYWtzKTsKLQkoMykgZm9yIGludGVybmFsbHkgZGlzcGxhY2VkIHBvcHVsYXRpb25zIGFuZCByZWZ1Z2VlcywgYW5kIHBvcHVsYXRpb25zIGluIGNvbmZsaWN0IHpvbmVzOwotCSg0KSBmb3IgaW5kaXZpZHVhbCBpbmZhbnRzIGF0IGhpZ2ggcmlzayBvZiBjb250cmFjdGluZyBtZWFzbGVzIChlLmcuIGNvbnRhY3RzIG9mIGtub3duIG1lYXNsZXMgY2FzZXMgb3IgaW4gc2V0dGluZ3Mgd2l0aCBpbmNyZWFzZWQgcmlzayBvZiBleHBvc3VyZSBkdXJpbmcgb3V0YnJlYWtzIHN1Y2ggYXMgZGF5LWNhcmUgZmFjaWxpdGllcyk7Ci0JKDUpIGZvciBpbmZhbnRzIHRyYXZlbGxpbmcgdG8gY291bnRyaWVzIGV4cGVyaWVuY2luZyBtZWFzbGVzIG91dGJyZWFrczsKLQkoNikgZm9yIGluZmFudHMga25vd24gdG8gYmUgSElWLWluZmVjdGVkIG9yIGV4cG9zZWQgKGkuZS4gYm9ybiB0byBhbiBISVYtaW5mZWN0ZWQgd29tYW4pLgoqLwpkZWZpbmUgIk1lYXNsZXMgTUNWMCBkb3NlIENyZWF0ZSI6CglpZiAiTWVhc2xlcyBNQ1YwIGRvc2UiIHRoZW4gCSdJbiB0aGUgZm9sbG93aW5nIHNpdHVhdGlvbnMsIGEgc3VwcGxlbWVudGFyeSBkb3NlIG9mIE1DViBzaG91bGQgYmUgZ2l2ZW4gdG8gaW5mYW50cyBmcm9tIDYgbW9udGhzIG9mIGFnZTogXG4tCSgxKSBkdXJpbmcgYSBtZWFzbGVzIG91dGJyZWFrIGFzIHBhcnQgb2YgaW50ZW5zaWZpZWQgc2VydmljZSBkZWxpdmVyeTtcbi0JKDIpIGR1cmluZyBjYW1wYWlnbnMgaW4gc2V0dGluZ3Mgd2hlcmUgdGhlIHJpc2sgb2YgbWVhc2xlcyBhbW9uZyBpbmZhbnRzIDwgOSBtb250aHMgb2YgYWdlIHJlbWFpbnMgaGlnaCAoZS5nLiBpbiBlbmRlbWljIGNvdW50cmllcyBleHBlcmllbmNpbmcgcmVndWxhciBvdXRicmVha3MpO1xuLQkoMykgZm9yIGludGVybmFsbHkgZGlzcGxhY2VkIHBvcHVsYXRpb25zIGFuZCByZWZ1Z2VlcywgYW5kIHBvcHVsYXRpb25zIGluIGNvbmZsaWN0IHpvbmVzO1xuLQkoNCkgZm9yIGluZGl2aWR1YWwgaW5mYW50cyBhdCBoaWdoIHJpc2sgb2YgY29udHJhY3RpbmcgbWVhc2xlcyAoZS5nLiBjb250YWN0cyBvZiBrbm93biBtZWFzbGVzIGNhc2VzIG9yIGluIHNldHRpbmdzIHdpdGggaW5jcmVhc2VkIHJpc2sgb2YgZXhwb3N1cmUgZHVyaW5nIG91dGJyZWFrcyBzdWNoIGFzIGRheS1jYXJlIGZhY2lsaXRpZXMpO1xuLQkoNSkgZm9yIGluZmFudHMgdHJhdmVsbGluZyB0byBjb3VudHJpZXMgZXhwZXJpZW5jaW5nIG1lYXNsZXMgb3V0YnJlYWtzO1xuLQkoNikgZm9yIGluZmFudHMga25vd24gdG8gYmUgSElWLWluZmVjdGVkIG9yIGV4cG9zZWQgKGkuZS4gYm9ybiB0byBhbiBISVYtaW5mZWN0ZWQgd29tYW4pLlxuRHVlIERhdGUgaXMgJwoJCSsgVG9TdHJpbmcoIk1lYXNsZXMgTUNWMCBkb3NlIER1ZSBEYXRlIikKCWVsc2UgJycKCi8qCkBkeW5hbWljVmFsdWU6IE1lYXNsZXMgTUNWMCBkb3NlIER1ZSBEYXRlCkBwc2V1ZG9jb2RlOiAiRGF0ZSBvZiBiaXJ0aCIgKyA2ICdtb250aCcKKi8KZGVmaW5lICJNZWFzbGVzIE1DVjAgZG9zZSBEdWUgRGF0ZSI6CglpZiAiTWVhc2xlcyBNQ1YwIGRvc2UiIHRoZW4gUGF0aWVudC5iaXJ0aERhdGUgKyA2IG1vbnRocwoJZWxzZSBudWxsCgovKgpAZHluYW1pY1ZhbHVlOiBNZWFzbGVzIE1DVjAgZG9zZSBPdmVyZHVlCkBwc2V1ZG9jb2RlOiBUbyBiZSBkZXRlcm1pbmVkIGJ5IE1lbWJlciBTdGF0ZXMgaG93ZXZlciB0aGVyZSBpcyBubyByZWNvbW1lbmRlZCBvdmVyZHVlIGRhdGUgYW5kIGluZGl2aWR1YWxzIGFyZSBhbHdheXMgZWxpZ2libGUgdG8gYmUgdmFjY2luYXRlZAoqLwpkZWZpbmUgIk1lYXNsZXMgTUNWMCBkb3NlIE92ZXJkdWUiOgoJbnVsbAoKLyoKQGR5bmFtaWNWYWx1ZTogTWVhc2xlcyBNQ1YwIGRvc2UgRXhwaXJhdGlvbgpAcHNldWRvY29kZTogIkRhdGUgb2YgYmlydGgiICsgOSAnbW9udGgnIGZvciBjb3VudHJpZXMgd2l0aCBvbmdvaW5nIHRyYW5zbWlzc2lvbiBpbiB3aGljaCB0aGUgcmlzayBvZiBtZWFzbGVzIG1vcnRhbGl0eSByZW1haW5zIGhpZ2ggT1IgIkRhdGUgb2YgYmlydGgiICsgMTIgJ21vbnRoJyBmb3IgY291bnRyaWVzIHdpdGggbG93IGxldmVscyBvZiBtZWFzbGVzIHRyYW5zbWlzc2lvbgoqLwpkZWZpbmUgIk1lYXNsZXMgTUNWMCBkb3NlIEV4cGlyYXRpb24iOgoJUGF0aWVudC5iaXJ0aERhdGUgKyA5IG1vbnRocw=="
  }, {
    "contentType": "application/elm+xml",
    "data": ""
  }, {
    "contentType": "application/elm+json",
    "data": ""
  } ]
}