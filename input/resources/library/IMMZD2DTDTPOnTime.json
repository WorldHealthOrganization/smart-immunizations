{
  "resourceType": "Library",
  "id": "IMMZD2DTDTPOnTime",
  "extension": [ {
    "url": "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
    "valueReference": {
      "reference": "Device/cqf-tooling"
    }
  } ],
  "url": "http://smart.who.int/ig/smart-immunizations/Library/IMMZD2DTDTPOnTime",
  "name": "IMMZD2DTDTPOnTime",
  "relatedArtifact": [ {
    "type": "depends-on",
    "display": "FHIR model information",
    "resource": "http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1"
  }, {
    "type": "depends-on",
    "display": "Library FHIRHelpers",
    "resource": "http://smart.who.int/ig/smart-immunizations/Library/FHIRHelpers|4.0.1"
  }, {
    "type": "depends-on",
    "display": "Library IMMZCom",
    "resource": "http://smart.who.int/ig/smart-immunizations/Library/IMMZCommon"
  }, {
    "type": "depends-on",
    "display": "Library IMMZc",
    "resource": "http://smart.who.int/ig/smart-immunizations/Library/IMMZConcepts"
  }, {
    "type": "depends-on",
    "display": "Library IMMZCon",
    "resource": "http://smart.who.int/ig/smart-immunizations/Library/IMMZConfig"
  }, {
    "type": "depends-on",
    "display": "Library IMMZvl",
    "resource": "http://smart.who.int/ig/smart-immunizations/Library/IMMZVaccineLibrary"
  }, {
    "type": "depends-on",
    "display": "Library FC",
    "resource": "http://smart.who.int/ig/smart-immunizations/Library/FHIRCommon"
  }, {
    "type": "depends-on",
    "display": "Library input",
    "resource": "http://smart.who.int/ig/smart-immunizations/Library/IMMZD2DTDTPInput"
  }, {
    "type": "depends-on",
    "display": "Value set DTP Vaccine",
    "resource": "http://smart.who.int/ig/smart-immunizations/ValueSet/IMMZ.Z.DE24"
  }, {
    "type": "depends-on",
    "display": "Value set Tetanus and Diphtheria Vaccine",
    "resource": "http://smart.who.int/ig/smart-immunizations/ValueSet/IMMZ.Z.DE28"
  }, {
    "type": "depends-on",
    "display": "Value set Pertussis Vaccine",
    "resource": "http://smart.who.int/ig/smart-immunizations/ValueSet/IMMZ.Z.DE12"
  } ],
  "parameter": [ {
    "name": "Patient",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Patient"
  }, {
    "name": "Client is not due for DTP vaccination Case 1",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Client is not due for DTP vaccination Case 2",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Client is not due for DTP vaccination Case 3",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Client is not due for DTP vaccination",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Client is not due for DTP vaccination Guidance",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Client is due for DTP vaccination Case 1",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Client is due for DTP vaccination Case 2",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Client is due for DTP vaccination Case 3",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Client is due for DTP vaccination",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Client is due for DTP vaccination Guidance",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Primary DTP series is complete. Client is not due for tetanus and diphtheria booster dose",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Primary DTP series is complete. Client is not due for tetanus and diphtheria booster dose Guidance",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Primary DTP series is complete. Client is due for tetanus and diphtheria booster dose.",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Primary DTP series is complete. Client is due for tetanus and diphtheria booster dose. Guidance",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Client is not due for tetanus and diphtheria booster dose.",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Client is not due for tetanus and diphtheria booster dose. Guidance",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Client is due for tetanus and diphtheria booster dose Case 1",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Client is due for tetanus and diphtheria booster dose Case 2",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Client is due for tetanus and diphtheria booster dose",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Client is due for tetanus and diphtheria booster dose Guidance",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Client is not due for tetanus and diphtheria booster dose",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Client is not due for tetanus and diphtheria booster dose Guidance",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Tetanus and diphtheria immunization schedule is complete",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Tetanus and diphtheria immunization schedule is complete Guidance",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Client is not due for pertussis booster dose",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Client is not due for pertussis booster dose Guidance",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Primary DTP series is complete. Client is not due for pertussis booster dose",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Primary DTP series is complete. Client is not due for pertussis booster dose Guidance",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Primary DTP series is complete. Client is due for pertussis booster dose",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Primary DTP series is complete. Client is due for pertussis booster dose Guidance",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Pertussis immunization schedule is complete Case 1",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Pertussis immunization schedule is complete Case 2",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Pertussis immunization schedule is complete",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Pertussis immunization schedule is complete Guidance",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Guidance",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "age in years",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "integer"
  }, {
    "name": "age in months",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "integer"
  }, {
    "name": "Test Validation",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Any"
  } ],
  "dataRequirement": [ {
    "type": "Patient",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Patient" ]
  }, {
    "type": "Immunization",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Immunization" ],
    "mustSupport": [ "status", "vaccineCode" ]
  } ],
  "content": [ {
    "contentType": "text/cql",
    "data": ""
  }, {
    "contentType": "application/elm+xml",
    "data": ""
  }, {
    "contentType": "application/elm+json",
    "data": ""
  } ]
}