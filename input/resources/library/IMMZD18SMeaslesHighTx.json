{
  "resourceType": "Library",
  "id": "IMMZD18SMeaslesHighTx",
  "extension": [ {
    "url": "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
    "valueReference": {
      "reference": "Device/cqf-tooling"
    }
  } ],
  "url": "http://smart.who.int/ig/smart-immunizations/Library/IMMZD18SMeaslesHighTx",
  "name": "IMMZD18SMeaslesHighTx",
  "relatedArtifact": [ {
    "type": "depends-on",
    "display": "FHIR model information",
    "resource": "http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1"
  }, {
    "type": "depends-on",
    "display": "Library FHIRHelpers",
    "resource": "http://smart.who.int/ig/smart-immunizations/Library/FHIRHelpers|4.0.1"
  }, {
    "type": "depends-on",
    "display": "Library IMMZCom",
    "resource": "http://smart.who.int/ig/smart-immunizations/Library/IMMZCommon"
  }, {
    "type": "depends-on",
    "display": "Library IMMZc",
    "resource": "http://smart.who.int/ig/smart-immunizations/Library/IMMZConcepts"
  }, {
    "type": "depends-on",
    "display": "Library IMMZCon",
    "resource": "http://smart.who.int/ig/smart-immunizations/Library/IMMZConfig"
  }, {
    "type": "depends-on",
    "display": "Library IMMZvl",
    "resource": "http://smart.who.int/ig/smart-immunizations/Library/IMMZVaccineLibrary"
  }, {
    "type": "depends-on",
    "display": "Library FC",
    "resource": "http://smart.who.int/ig/smart-immunizations/Library/FHIRCommon"
  }, {
    "type": "depends-on",
    "display": "Library input",
    "resource": "http://smart.who.int/ig/smart-immunizations/Library/IMMZD2DTMeaslesInput"
  }, {
    "type": "depends-on",
    "display": "Value set MCV Vaccine",
    "resource": "http://smart.who.int/ig/smart-immunizations/ValueSet/IMMZ.Z.DE9"
  } ],
  "parameter": [ {
    "name": "Patient",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Patient"
  }, {
    "name": "Measles dose 1",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Measles dose 1 Due Date",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "date"
  }, {
    "name": "Measles dose 1 Create",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Measles dose 1 Overdue",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Any"
  }, {
    "name": "Measles dose 1 Expiration",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Any"
  }, {
    "name": "Measles dose 2",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Measles dose 2 Due Date",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "date"
  }, {
    "name": "Measles dose 2 Create",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Measles dose 2 Overdue",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Any"
  }, {
    "name": "Measles dose 2 Expiration",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Any"
  } ],
  "dataRequirement": [ {
    "type": "Patient",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Patient" ]
  }, {
    "type": "Immunization",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Immunization" ],
    "mustSupport": [ "status", "vaccineCode", "occurrence" ]
  } ],
  "content": [ {
    "contentType": "text/cql",
    "data": "LyoKICogTGlicmFyeTogSU1NWkQxOFNNZWFzbGVzSGlnaFR4IChJTU1aLkQxOC5TLk1lYXNsZXMuSGlnaFR4KQogKiBSdWxlOiBDb3VudHJpZXMgd2l0aCBvbmdvaW5nIHRyYW5zbWlzc2lvbiBpbiB3aGljaCB0aGUgcmlzayBvZiBtZWFzbGVzIG1vcnRhbGl0eSByZW1haW5zIGhpZ2gKICogVHJpZ2dlcjogSU1NWi5EMTggRGV0ZXJtaW5lIHJlcXVpcmVkIHZhY2NpbmF0aW9uKHMpIFNjaGVkdWxlIGlmIGFueQogKi8KbGlicmFyeSBJTU1aRDE4U01lYXNsZXNIaWdoVHgKLy8gU3RhcnQgU2tlbGV0b24gQ1FMCnVzaW5nIEZISVIgdmVyc2lvbiAnNC4wLjEnCmluY2x1ZGUgRkhJUkhlbHBlcnMgdmVyc2lvbiAnNC4wLjEnCmluY2x1ZGUgSU1NWkNvbW1vbiBjYWxsZWQgSU1NWkNvbQppbmNsdWRlIElNTVpDb25jZXB0cyBjYWxsZWQgSU1NWmMKaW5jbHVkZSBJTU1aQ29uZmlnIGNhbGxlZCBJTU1aQ29uCmluY2x1ZGUgSU1NWlZhY2NpbmVMaWJyYXJ5IGNhbGxlZCBJTU1admwKaW5jbHVkZSBGSElSQ29tbW9uIGNhbGxlZCBGQwppbmNsdWRlIElNTVpEMkRUTWVhc2xlc0lucHV0IGNhbGxlZCBpbnB1dAoKLy8gRW5kIFNrZWxldG9uIENRTApjb250ZXh0IFBhdGllbnQKCgovKgpAb3V0cHV0OiBNZWFzbGVzIGRvc2UgMQpAdHJpZ2dlcjogQ2hpbGQncyBiaXJ0aAoqLwpkZWZpbmUgIk1lYXNsZXMgZG9zZSAxIjoKCWlucHV0LiJObyBtZWFzbGVzIHByaW1hcnkgc2VyaWVzIGRvc2VzIHdlcmUgYWRtaW5pc3RlcmVkIgoKLyoKQG91dHB1dDogTWVhc2xlcyBkb3NlIDEgQ3JlYXRlCkBjcmVhdGU6IFRoZSBjbGllbnQgaXMgZHVlIGZvciBtZWFzbGVzIGRvc2UgMSBpZiB0aGUgY2xpZW50IGlzIGF0IGxlYXN0IDkgbW9udGhzCiovCmRlZmluZSAiTWVhc2xlcyBkb3NlIDEgQ3JlYXRlIjoKCWlmICJNZWFzbGVzIGRvc2UgMSIgdGhlbiAJJ1RoZSBjbGllbnQgaXMgZHVlIGZvciBtZWFzbGVzIGRvc2UgMSBpZiB0aGUgY2xpZW50IGlzIGF0IGxlYXN0IDkgbW9udGhzLiBEdWUgRGF0ZSBpcyAnCgkJKyBUb1N0cmluZygiTWVhc2xlcyBkb3NlIDEgRHVlIERhdGUiKQoJZWxzZSAnJwoKLyoKQGR5bmFtaWNWYWx1ZTogTWVhc2xlcyBkb3NlIDEgRHVlIERhdGUKQHBzZXVkb2NvZGU6ICJEYXRlIG9mIGJpcnRoIiArIDkgJ21vbnRoJwoqLwpkZWZpbmUgIk1lYXNsZXMgZG9zZSAxIER1ZSBEYXRlIjoKCWlmICJNZWFzbGVzIGRvc2UgMSIgdGhlbiBQYXRpZW50LmJpcnRoRGF0ZSArIDkgbW9udGhzCgllbHNlIG51bGwKCi8qCkBkeW5hbWljVmFsdWU6IE1lYXNsZXMgZG9zZSAxIE92ZXJkdWUKQHBzZXVkb2NvZGU6IFRvIGJlIGRldGVybWluZWQgYnkgTWVtYmVyIFN0YXRlcyBob3dldmVyIHRoZXJlIGlzIG5vIHJlY29tbWVuZGVkIG92ZXJkdWUgZGF0ZSBhbmQgaW5kaXZpZHVhbHMgYXJlIGFsd2F5cyBlbGlnaWJsZSB0byBiZSB2YWNjaW5hdGVkCiovCmRlZmluZSAiTWVhc2xlcyBkb3NlIDEgT3ZlcmR1ZSI6CgludWxsCgovKgpAZHluYW1pY1ZhbHVlOiBNZWFzbGVzIGRvc2UgMSBFeHBpcmF0aW9uCkBwc2V1ZG9jb2RlOiBUbyBiZSBkZXRlcm1pbmVkIGJ5IE1lbWJlciBTdGF0ZXMgaG93ZXZlciB0aGVyZSBpcyBubyByZWNvbW1lbmRlZCBleHBpcmF0aW9uIGRhdGUgYW5kIGluZGl2aWR1YWxzIGFyZSBhbHdheXMgZWxpZ2libGUgdG8gYmUgdmFjY2luYXRlZAoqLwpkZWZpbmUgIk1lYXNsZXMgZG9zZSAxIEV4cGlyYXRpb24iOgoJbnVsbAoKLyoKQG91dHB1dDogTWVhc2xlcyBkb3NlIDIKQHRyaWdnZXI6IE9uZSBtZWFzbGVzIHByaW1hcnkgc2VyaWVzIGRvc2Ugd2FzIGFkbWluaXN0ZXJlZApAcHNldWRvY29kZTogQ291bnQgb2YgdmFjY2luZXMgYWRtaW5pc3RlcmVkICh3aGVyZSAiVmFjY2luZSB0eXBlIiA9ICdNZWFzbGVzIGNvbnRhaW5pbmcgdmFjY2luZXMnIGFuZCAiVHlwZSBvZiBkb3NlIiA9ICJQcmltYXJ5IHNlcmllcyIgKSA9IDEKKi8KZGVmaW5lICJNZWFzbGVzIGRvc2UgMiI6CglpbnB1dC4iTUNWMSB3YXMgYWRtaW5pc3RlcmVkIEhpZ2ggVHgiCgovKgpAb3V0cHV0OiBNZWFzbGVzIGRvc2UgMiBDcmVhdGUKQGNyZWF0ZTogVGhlIGNsaWVudCBpcyBkdWUgZm9yIG1lYXNsZXMgZG9zZSAyIGlmIHRoZSBjbGllbnQgaXMgYXQgbGVhc3QgMTUgbW9udGhzLgoqLwpkZWZpbmUgIk1lYXNsZXMgZG9zZSAyIENyZWF0ZSI6CglpZiAiTWVhc2xlcyBkb3NlIDIiIHRoZW4gJ1RoZSBjbGllbnQgaXMgZHVlIGZvciBtZWFzbGVzIGRvc2UgMiBpZiB0aGUgY2xpZW50IGlzIGF0IGxlYXN0IDE1IG1vbnRocy4gRHVlIERhdGUgaXMgJwoJCSsgVG9TdHJpbmcoIk1lYXNsZXMgZG9zZSAyIER1ZSBEYXRlIikKCWVsc2UgJycKCi8qCkBkeW5hbWljVmFsdWU6IE1lYXNsZXMgZG9zZSAyIER1ZSBEYXRlCkBwc2V1ZG9jb2RlOiAiRGF0ZSBvZiBiaXJ0aCIgKyAxNSAnbW9udGgnCiovCmRlZmluZSAiTWVhc2xlcyBkb3NlIDIgRHVlIERhdGUiOgoJaWYgIk1lYXNsZXMgZG9zZSAyIiB0aGVuIFBhdGllbnQuYmlydGhEYXRlICsgMTUgbW9udGhzCgllbHNlIG51bGwKCi8qCkBkeW5hbWljVmFsdWU6IE1lYXNsZXMgZG9zZSAyIE92ZXJkdWUKQHBzZXVkb2NvZGU6IFRvIGJlIGRldGVybWluZWQgYnkgTWVtYmVyIFN0YXRlcyBob3dldmVyIHRoZXJlIGlzIG5vIHJlY29tbWVuZGVkIG92ZXJkdWUgZGF0ZSBhbmQgaW5kaXZpZHVhbHMgYXJlIGFsd2F5cyBlbGlnaWJsZSB0byBiZSB2YWNjaW5hdGVkCiovCmRlZmluZSAiTWVhc2xlcyBkb3NlIDIgT3ZlcmR1ZSI6CgludWxsCgovKgpAZHluYW1pY1ZhbHVlOiBNZWFzbGVzIGRvc2UgMiBFeHBpcmF0aW9uCkBwc2V1ZG9jb2RlOiBUbyBiZSBkZXRlcm1pbmVkIGJ5IE1lbWJlciBTdGF0ZXMgaG93ZXZlciB0aGVyZSBpcyBubyByZWNvbW1lbmRlZCBleHBpcmF0aW9uIGRhdGUgYW5kIGluZGl2aWR1YWxzIGFyZSBhbHdheXMgZWxpZ2libGUgdG8gYmUgdmFjY2luYXRlZAoqLwpkZWZpbmUgIk1lYXNsZXMgZG9zZSAyIEV4cGlyYXRpb24iOgoJbnVsbA=="
  }, {
    "contentType": "application/elm+xml",
    "data": ""
  }, {
    "contentType": "application/elm+json",
    "data": ""
  } ]
}